{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\a\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\a\\ant-design-vue-jeecg\\src\\qiankun\\state.js","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\qiankun\\state.js","mtime":1661074531229},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1657458632572}],"contextDependencies":[],"result":["/**\r\n *公共数据\r\n */\nimport { initGlobalState } from 'qiankun';\nimport store from '@/store';\nimport router from '@/router';\nimport Vue from 'vue';\nimport { ACCESS_TOKEN } from \"@/store/mutation-types\"; //定义传入子应用的数据\n\nexport function getProps() {\n  return {\n    data: {\n      publicPath: process.env.BASE_URL,\n      token: Vue.ls.get(ACCESS_TOKEN),\n      store: store,\n      router: router\n    }\n  };\n}\n/**\r\n * 定义全局状态，并返回通信方法,在主应用使用，微应用通过 props 获取通信方法。\r\n * @param state 主应用穿的公共数据\r\n */\n\nexport function initGlState() {\n  var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    userName: 'admin'\n  };\n  // 初始化state\n  var actions = initGlobalState(info); // 设置新的值\n\n  actions.setGlobalState(info); // 注册 观察者 函数 - 响应 globalState 变化，在 globalState 发生改变时触发该 观察者 函数。\n\n  actions.onGlobalStateChange(function (newState, prev) {\n    // state: 变更后的状态; prev 变更前的状态\n    console.info(\"newState\", newState);\n\n    for (var key in newState) {\n      console.info(\"onGlobalStateChange\", key);\n    }\n  }); // 将action对象绑到Vue原型上，为了项目中其他地方使用方便\n\n  Vue.prototype.$actions = actions;\n}",{"version":3,"sources":["D:/a/ant-design-vue-jeecg/src/qiankun/state.js"],"names":["initGlobalState","store","router","Vue","ACCESS_TOKEN","getProps","data","publicPath","process","env","BASE_URL","token","ls","get","initGlState","info","userName","actions","setGlobalState","onGlobalStateChange","newState","prev","console","key","prototype","$actions"],"mappings":"AAAA;;;AAGA,SAAQA,eAAR,QAA8B,SAA9B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,SAAQC,YAAR,QAA2B,wBAA3B,C,CAEA;;AACA,OAAO,SAASC,QAAT,GAAoB;AACzB,SAAO;AACLC,IAAAA,IAAI,EAAE;AACJC,MAAAA,UAAU,EAAEC,OAAO,CAACC,GAAR,CAAYC,QADpB;AAEJC,MAAAA,KAAK,EAAER,GAAG,CAACS,EAAJ,CAAOC,GAAP,CAAWT,YAAX,CAFH;AAGJH,MAAAA,KAAK,EAALA,KAHI;AAIJC,MAAAA,MAAM,EAANA;AAJI;AADD,GAAP;AAQD;AAED;;;;;AAIA,OAAO,SAASY,WAAT,GAAiD;AAAA,MAA5BC,IAA4B,uEAArB;AAACC,IAAAA,QAAQ,EAAE;AAAX,GAAqB;AACtD;AACA,MAAMC,OAAO,GAAGjB,eAAe,CAACe,IAAD,CAA/B,CAFsD,CAGtD;;AACAE,EAAAA,OAAO,CAACC,cAAR,CAAuBH,IAAvB,EAJsD,CAKtD;;AACAE,EAAAA,OAAO,CAACE,mBAAR,CAA4B,UAACC,QAAD,EAAWC,IAAX,EAAoB;AAC9C;AACAC,IAAAA,OAAO,CAACP,IAAR,CAAa,UAAb,EAAyBK,QAAzB;;AACA,SAAK,IAAMG,GAAX,IAAkBH,QAAlB,EAA4B;AAC1BE,MAAAA,OAAO,CAACP,IAAR,CAAa,qBAAb,EAAoCQ,GAApC;AACD;AACF,GAND,EANsD,CAatD;;AACApB,EAAAA,GAAG,CAACqB,SAAJ,CAAcC,QAAd,GAAyBR,OAAzB;AACD","sourcesContent":["/**\r\n *公共数据\r\n */\r\nimport {initGlobalState} from 'qiankun';\r\nimport store from '@/store';\r\nimport router from '@/router';\r\nimport Vue from 'vue';\r\nimport {ACCESS_TOKEN} from \"@/store/mutation-types\"\r\n\r\n//定义传入子应用的数据\r\nexport function getProps() {\r\n  return {\r\n    data: {\r\n      publicPath: process.env.BASE_URL,\r\n      token: Vue.ls.get(ACCESS_TOKEN),\r\n      store,\r\n      router\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 定义全局状态，并返回通信方法,在主应用使用，微应用通过 props 获取通信方法。\r\n * @param state 主应用穿的公共数据\r\n */\r\nexport function initGlState(info = {userName: 'admin'}) {\r\n  // 初始化state\r\n  const actions = initGlobalState(info);\r\n  // 设置新的值\r\n  actions.setGlobalState(info);\r\n  // 注册 观察者 函数 - 响应 globalState 变化，在 globalState 发生改变时触发该 观察者 函数。\r\n  actions.onGlobalStateChange((newState, prev) => {\r\n    // state: 变更后的状态; prev 变更前的状态\r\n    console.info(\"newState\", newState)\r\n    for (const key in newState) {\r\n      console.info(\"onGlobalStateChange\", key)\r\n    }\r\n  });\r\n  // 将action对象绑到Vue原型上，为了项目中其他地方使用方便\r\n  Vue.prototype.$actions = actions;\r\n}\r\n"]}]}