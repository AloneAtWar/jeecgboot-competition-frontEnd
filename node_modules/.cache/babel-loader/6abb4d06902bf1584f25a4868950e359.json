{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\a\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\a\\ant-design-vue-jeecg\\src\\utils\\encryption\\signMd5Utils.js","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\utils\\encryption\\signMd5Utils.js","mtime":1661074531239},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1657458632572}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport md5 from 'md5'; //签名密钥串(前后端要一致，正式发布请自行修改)\n\nvar signatureSecret = \"dd05f1c54d63749eda95f9fa6d49v442a\";\n\nvar signMd5Utils = /*#__PURE__*/function () {\n  function signMd5Utils() {\n    _classCallCheck(this, signMd5Utils);\n  }\n\n  _createClass(signMd5Utils, null, [{\n    key: \"sortAsc\",\n\n    /**\r\n     * json参数升序\r\n     * @param jsonObj 发送参数\r\n     */\n    value: function sortAsc(jsonObj) {\n      var arr = new Array();\n      var num = 0;\n\n      for (var i in jsonObj) {\n        arr[num] = i;\n        num++;\n      }\n\n      var sortArr = arr.sort();\n      var sortObj = {};\n\n      for (var _i in sortArr) {\n        sortObj[sortArr[_i]] = jsonObj[sortArr[_i]];\n      }\n\n      return sortObj;\n    }\n    /**\r\n     * @param url 请求的url,应该包含请求参数(url的?后面的参数)\r\n     * @param requestParams 请求参数(POST的JSON参数)\r\n     * @returns {string} 获取签名\r\n     */\n\n  }, {\n    key: \"getSign\",\n    value: function getSign(url, requestParams) {\n      var urlParams = this.parseQueryString(url);\n      var jsonObj = this.mergeObject(urlParams, requestParams); //console.log(\"sign jsonObj: \",jsonObj)\n\n      var requestBody = this.sortAsc(jsonObj);\n      console.log(\"sign requestBody: \", requestBody);\n      return md5(JSON.stringify(requestBody) + signatureSecret).toUpperCase();\n    }\n    /**\r\n     * @param url 请求的url\r\n     * @returns {{}} 将url中请求参数组装成json对象(url的?后面的参数)\r\n     */\n\n  }, {\n    key: \"parseQueryString\",\n    value: function parseQueryString(url) {\n      var urlReg = /^[^\\?]+\\?([\\w\\W]+)$/,\n          paramReg = /([^&=]+)=([\\w\\W]*?)(&|$|#)/g,\n          urlArray = urlReg.exec(url),\n          result = {}; // 获取URL上最后带逗号的参数变量 sys/dict/getDictItems/sys_user,realname,username\n      //【这边条件没有encode】带条件参数例子：/sys/dict/getDictItems/sys_user,realname,id,username!='admin'%20order%20by%20create_time\n\n      var lastpathVariable = url.substring(url.lastIndexOf('/') + 1);\n\n      if (lastpathVariable.includes(\",\")) {\n        if (lastpathVariable.includes(\"?\")) {\n          lastpathVariable = lastpathVariable.substring(0, lastpathVariable.indexOf(\"?\"));\n        } //解决Sign 签名校验失败 #2728\n\n\n        result[\"x-path-variable\"] = decodeURIComponent(lastpathVariable);\n      }\n\n      if (urlArray && urlArray[1]) {\n        var paramString = urlArray[1],\n            paramResult;\n\n        while ((paramResult = paramReg.exec(paramString)) != null) {\n          //数字值转为string类型，前后端加密规则保持一致\n          if (this.myIsNaN(paramResult[2])) {\n            paramResult[2] = paramResult[2].toString();\n          }\n\n          result[paramResult[1]] = paramResult[2];\n        }\n      }\n\n      return result;\n    }\n    /**\r\n     * @returns {*} 将两个对象合并成一个\r\n     */\n\n  }, {\n    key: \"mergeObject\",\n    value: function mergeObject(objectOne, objectTwo) {\n      if (objectTwo && Object.keys(objectTwo).length > 0) {\n        for (var key in objectTwo) {\n          if (objectTwo.hasOwnProperty(key) === true) {\n            //数字值转为string类型，前后端加密规则保持一致\n            if (this.myIsNaN(objectTwo[key])) {\n              objectTwo[key] = objectTwo[key].toString();\n            }\n\n            objectOne[key] = objectTwo[key];\n          }\n        }\n      }\n\n      return objectOne;\n    }\n  }, {\n    key: \"urlEncode\",\n    value: function urlEncode(param, key, encode) {\n      if (param == null) return '';\n      var paramStr = '';\n\n      var t = _typeof(param);\n\n      if (t == 'string' || t == 'number' || t == 'boolean') {\n        paramStr += '&' + key + '=' + (encode == null || encode ? encodeURIComponent(param) : param);\n      } else {\n        for (var i in param) {\n          var k = key == null ? i : key + (param instanceof Array ? '[' + i + ']' : '.' + i);\n          paramStr += this.urlEncode(param[i], k, encode);\n        }\n      }\n\n      return paramStr;\n    }\n  }, {\n    key: \"getTimestamp\",\n\n    /**\r\n     * 接口签名用 生成header中的时间戳\r\n     * @returns {number}\r\n     */\n    value: function getTimestamp() {\n      return new Date().getTime();\n    } // /**\n    //  * 获取客户端时间（签名参数 X_TIMESTAMP）\n    //  * @returns {string}\n    //  */\n    // static getDateTimeToString() {\n    //   const date_ = new Date()\n    //   const year = date_.getFullYear()\n    //   let month = date_.getMonth() + 1\n    //   let day = date_.getDate()\n    //   if (month < 10) month = '0' + month\n    //   if (day < 10) day = '0' + day\n    //   let hours = date_.getHours()\n    //   let mins = date_.getMinutes()\n    //   let secs = date_.getSeconds()\n    //   const msecs = date_.getMilliseconds()\n    //   if (hours < 10) hours = '0' + hours\n    //   if (mins < 10) mins = '0' + mins\n    //   if (secs < 10) secs = '0' + secs\n    //   if (msecs < 10) secs = '0' + msecs\n    //   return year + '' + month + '' + day + '' + hours + '' + mins + '' + secs\n    // }\n    // true:数值型的，false：非数值型\n\n  }, {\n    key: \"myIsNaN\",\n    value: function myIsNaN(value) {\n      return typeof value === 'number' && !isNaN(value);\n    }\n  }]);\n\n  return signMd5Utils;\n}();\n\nexport { signMd5Utils as default };",{"version":3,"sources":["D:/a/ant-design-vue-jeecg/src/utils/encryption/signMd5Utils.js"],"names":["md5","signatureSecret","signMd5Utils","jsonObj","arr","Array","num","i","sortArr","sort","sortObj","url","requestParams","urlParams","parseQueryString","mergeObject","requestBody","sortAsc","console","log","JSON","stringify","toUpperCase","urlReg","paramReg","urlArray","exec","result","lastpathVariable","substring","lastIndexOf","includes","indexOf","decodeURIComponent","paramString","paramResult","myIsNaN","toString","objectOne","objectTwo","Object","keys","length","key","hasOwnProperty","param","encode","paramStr","t","encodeURIComponent","k","urlEncode","Date","getTime","value","isNaN"],"mappings":"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","sourcesContent":["import md5 from 'md5'\r\n//签名密钥串(前后端要一致，正式发布请自行修改)\r\nconst signatureSecret = \"dd05f1c54d63749eda95f9fa6d49v442a\";\r\n\r\nexport default class signMd5Utils {\r\n  /**\r\n   * json参数升序\r\n   * @param jsonObj 发送参数\r\n   */\r\n\r\n  static sortAsc(jsonObj) {\r\n    let arr = new Array();\r\n    let num = 0;\r\n    for (let i in jsonObj) {\r\n      arr[num] = i;\r\n      num++;\r\n    }\r\n    let sortArr = arr.sort();\r\n    let sortObj = {};\r\n    for (let i in sortArr) {\r\n      sortObj[sortArr[i]] = jsonObj[sortArr[i]];\r\n    }\r\n    return sortObj;\r\n  }\r\n\r\n\r\n  /**\r\n   * @param url 请求的url,应该包含请求参数(url的?后面的参数)\r\n   * @param requestParams 请求参数(POST的JSON参数)\r\n   * @returns {string} 获取签名\r\n   */\r\n  static getSign(url, requestParams) {\r\n    let urlParams = this.parseQueryString(url);\r\n    let jsonObj = this.mergeObject(urlParams, requestParams);\r\n    //console.log(\"sign jsonObj: \",jsonObj)\r\n    let requestBody = this.sortAsc(jsonObj);\r\n    console.log(\"sign requestBody: \",requestBody)\r\n    return md5(JSON.stringify(requestBody) + signatureSecret).toUpperCase();\r\n  }\r\n\r\n  /**\r\n   * @param url 请求的url\r\n   * @returns {{}} 将url中请求参数组装成json对象(url的?后面的参数)\r\n   */\r\n  static parseQueryString(url) {\r\n    let urlReg = /^[^\\?]+\\?([\\w\\W]+)$/,\r\n      paramReg = /([^&=]+)=([\\w\\W]*?)(&|$|#)/g,\r\n      urlArray = urlReg.exec(url),\r\n      result = {};\r\n\r\n    // 获取URL上最后带逗号的参数变量 sys/dict/getDictItems/sys_user,realname,username\r\n    //【这边条件没有encode】带条件参数例子：/sys/dict/getDictItems/sys_user,realname,id,username!='admin'%20order%20by%20create_time\r\n    let lastpathVariable = url.substring(url.lastIndexOf('/') + 1);\r\n    if(lastpathVariable.includes(\",\")){\r\n      if(lastpathVariable.includes(\"?\")){\r\n        lastpathVariable = lastpathVariable.substring(0, lastpathVariable.indexOf(\"?\"));\r\n      }\r\n      //解决Sign 签名校验失败 #2728\r\n      result[\"x-path-variable\"] = decodeURIComponent(lastpathVariable);\r\n    }\r\n    if (urlArray && urlArray[1]) {\r\n      let paramString = urlArray[1], paramResult;\r\n      while ((paramResult = paramReg.exec(paramString)) != null) {\r\n        //数字值转为string类型，前后端加密规则保持一致\r\n        if(this.myIsNaN(paramResult[2])){\r\n          paramResult[2] = paramResult[2].toString()\r\n        }\r\n        result[paramResult[1]] = paramResult[2];\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @returns {*} 将两个对象合并成一个\r\n   */\r\n  static mergeObject(objectOne, objectTwo) {\r\n    if (objectTwo && Object.keys(objectTwo).length > 0) {\r\n      for (let key in objectTwo) {\r\n        if (objectTwo.hasOwnProperty(key) === true) {\r\n          //数字值转为string类型，前后端加密规则保持一致\r\n          if(this.myIsNaN(objectTwo[key])){\r\n            objectTwo[key] = objectTwo[key].toString()\r\n          }\r\n          objectOne[key] = objectTwo[key];\r\n        }\r\n      }\r\n    }\r\n    return objectOne;\r\n  }\r\n\r\n  static urlEncode(param, key, encode) {\r\n    if (param == null) return '';\r\n    let paramStr = '';\r\n    let t = typeof (param);\r\n    if (t == 'string' || t == 'number' || t == 'boolean') {\r\n      paramStr += '&' + key + '=' + ((encode == null || encode) ? encodeURIComponent(param) : param);\r\n    } else {\r\n      for (let i in param) {\r\n        let k = key == null ? i : key + (param instanceof Array ? '[' + i + ']' : '.' + i);\r\n        paramStr += this.urlEncode(param[i], k, encode);\r\n      }\r\n    }\r\n    return paramStr;\r\n  };\r\n\r\n  /**\r\n   * 接口签名用 生成header中的时间戳\r\n   * @returns {number}\r\n   */\r\n  static getTimestamp(){\r\n    return new Date().getTime()\r\n  }\r\n\r\n  // /**\r\n  //  * 获取客户端时间（签名参数 X_TIMESTAMP）\r\n  //  * @returns {string}\r\n  //  */\r\n  // static getDateTimeToString() {\r\n  //   const date_ = new Date()\r\n  //   const year = date_.getFullYear()\r\n  //   let month = date_.getMonth() + 1\r\n  //   let day = date_.getDate()\r\n  //   if (month < 10) month = '0' + month\r\n  //   if (day < 10) day = '0' + day\r\n  //   let hours = date_.getHours()\r\n  //   let mins = date_.getMinutes()\r\n  //   let secs = date_.getSeconds()\r\n  //   const msecs = date_.getMilliseconds()\r\n  //   if (hours < 10) hours = '0' + hours\r\n  //   if (mins < 10) mins = '0' + mins\r\n  //   if (secs < 10) secs = '0' + secs\r\n  //   if (msecs < 10) secs = '0' + msecs\r\n  //   return year + '' + month + '' + day + '' + hours + '' + mins + '' + secs\r\n  // }\r\n    // true:数值型的，false：非数值型\r\n  static myIsNaN(value) {\r\n    return typeof value === 'number' && !isNaN(value);\r\n  }\r\n\r\n}"]}]}