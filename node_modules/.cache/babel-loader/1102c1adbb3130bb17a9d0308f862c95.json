{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a\\ant-design-vue-jeecg\\src\\components\\jeecgbiz\\modal\\JSelectDepartModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\components\\jeecgbiz\\modal\\JSelectDepartModal.vue","mtime":1661074531208},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1657458571653}],"contextDependencies":[],"result":["function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { queryDepartTreeList } from '@/api/api';\nexport default {\n  name: 'JSelectDepartModal',\n  props: ['modalWidth', 'multi', 'rootOpened', 'departId', 'store', 'text', 'treeOpera'],\n  data: function data() {\n    return {\n      visible: false,\n      confirmLoading: false,\n      treeData: [],\n      autoExpandParent: true,\n      expandedKeys: [],\n      dataList: [],\n      checkedKeys: [],\n      checkedRows: [],\n      searchValue: \"\",\n      checkStrictly: true,\n      fullscreen: false\n    };\n  },\n  created: function created() {\n    this.loadDepart();\n  },\n  watch: {\n    departId: function departId() {\n      this.initDepartComponent();\n    },\n    visible: {\n      handler: function handler() {\n        this.initDepartComponent(true);\n      }\n    }\n  },\n  computed: {\n    treeScreenClass: function treeScreenClass() {\n      return {\n        'my-dept-select-tree': true,\n        'fullscreen': this.fullscreen\n      };\n    },\n    filterTreeData: function filterTreeData() {\n      var _this = this;\n\n      if (!this.searchValue) {\n        return this.treeData;\n      }\n\n      var filter = [];\n      this.dataList.forEach(function (item) {\n        if (item.title.includes(_this.searchValue)) {\n          filter.push(Object.assign({}, item, {\n            children: null,\n            isLeaf: true\n          }));\n        }\n      });\n      return filter;\n    }\n  },\n  methods: {\n    show: function show() {\n      this.visible = true;\n      this.checkedRows = [];\n      this.checkedKeys = [];\n    },\n    loadDepart: function loadDepart() {\n      var _this2 = this;\n\n      // 这个方法是找到所有的部门信息\n      queryDepartTreeList().then(function (res) {\n        if (res.success) {\n          var arr = _toConsumableArray(res.result);\n\n          _this2.reWriterWithSlot(arr);\n\n          _this2.treeData = arr;\n\n          _this2.initDepartComponent();\n\n          if (_this2.rootOpened) {\n            _this2.initExpandedKeys(res.result);\n          }\n        }\n      });\n    },\n    initDepartComponent: function initDepartComponent(flag) {\n      var arr = []; //该方法两个地方用 1.visible改变事件重新设置选中项 2.组件编辑页面回显\n\n      var fieldName = flag == true ? 'key' : this.text;\n\n      if (this.departId) {\n        var arr2 = this.departId.split(',');\n\n        var _iterator = _createForOfIteratorHelper(this.dataList),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var item = _step.value;\n\n            if (arr2.indexOf(item[this.store]) >= 0) {\n              arr.push(item[fieldName]);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      if (flag == true) {\n        this.checkedKeys = [].concat(arr);\n      } else {\n        this.$emit(\"initComp\", arr.join(','));\n      }\n    },\n    reWriterWithSlot: function reWriterWithSlot(arr) {\n      var _iterator2 = _createForOfIteratorHelper(arr),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n\n          if (item.children && item.children.length > 0) {\n            this.reWriterWithSlot(item.children);\n            var temp = Object.assign({}, item);\n            temp.children = {};\n            this.dataList.push(temp);\n          } else {\n            this.dataList.push(item);\n            item.scopedSlots = {\n              title: 'title'\n            };\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    },\n    initExpandedKeys: function initExpandedKeys(arr) {\n      if (arr && arr.length > 0) {\n        var keys = [];\n\n        var _iterator3 = _createForOfIteratorHelper(arr),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var item = _step3.value;\n\n            if (item.children && item.children.length > 0) {\n              keys.push(item.id);\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        this.expandedKeys = [].concat(keys); //全部keys\n        //this.allTreeKeys = [...keys]\n      } else {\n        this.expandedKeys = []; //this.allTreeKeys = []\n      }\n    },\n    onCheck: function onCheck(checkedKeys, info) {\n      var _this3 = this;\n\n      if (!this.multi) {\n        var arr = checkedKeys.checked.filter(function (item) {\n          return _this3.checkedKeys.indexOf(item) < 0;\n        });\n        this.checkedKeys = _toConsumableArray(arr);\n        this.checkedRows = this.checkedKeys.length === 0 ? [] : [info.node.dataRef];\n      } else {\n        if (this.checkStrictly) {\n          this.checkedKeys = checkedKeys.checked;\n        } else {\n          this.checkedKeys = checkedKeys;\n        }\n\n        this.checkedRows = this.getCheckedRows(this.checkedKeys);\n      }\n    },\n    onSelect: function onSelect(selectedKeys, info) {\n      //取消关联的情况下才走onSelect的逻辑\n      if (this.checkStrictly) {\n        var keys = [];\n        keys.push(selectedKeys[0]);\n\n        if (!this.checkedKeys || this.checkedKeys.length === 0 || !this.multi) {\n          this.checkedKeys = [].concat(keys);\n          this.checkedRows = [info.node.dataRef];\n        } else {\n          var currKey = info.node.dataRef.key;\n\n          if (this.checkedKeys.indexOf(currKey) >= 0) {\n            this.checkedKeys = this.checkedKeys.filter(function (item) {\n              return item !== currKey;\n            });\n          } else {\n            var _this$checkedKeys;\n\n            (_this$checkedKeys = this.checkedKeys).push.apply(_this$checkedKeys, keys);\n          }\n        }\n\n        this.checkedRows = this.getCheckedRows(this.checkedKeys);\n      }\n    },\n    onExpand: function onExpand(expandedKeys) {\n      this.expandedKeys = expandedKeys;\n      this.autoExpandParent = false;\n    },\n    handleSubmit: function handleSubmit() {\n      if (!this.checkedKeys || this.checkedKeys.length == 0) {\n        this.$emit(\"ok\", '');\n      } else {\n        var checkRow = this.getCheckedRows(this.checkedKeys);\n        var keyStr = this.checkedKeys.join(\",\");\n        this.$emit(\"ok\", checkRow, keyStr);\n      }\n\n      this.handleClear();\n    },\n    handleCancel: function handleCancel() {\n      this.handleClear();\n    },\n    handleClear: function handleClear() {\n      this.visible = false;\n      this.checkedKeys = [];\n    },\n    getParentKey: function getParentKey(currKey, treeData) {\n      var parentKey;\n\n      for (var i = 0; i < treeData.length; i++) {\n        var node = treeData[i];\n\n        if (node.children) {\n          if (node.children.some(function (item) {\n            return item.key === currKey;\n          })) {\n            parentKey = node.key;\n          } else if (this.getParentKey(currKey, node.children)) {\n            parentKey = this.getParentKey(currKey, node.children);\n          }\n        }\n      }\n\n      return parentKey;\n    },\n    // 根据 checkedKeys 获取 rows\n    getCheckedRows: function getCheckedRows(checkedKeys) {\n      var forChildren = function forChildren(list, key) {\n        var _iterator4 = _createForOfIteratorHelper(list),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var item = _step4.value;\n\n            if (item.id === key) {\n              return item;\n            }\n\n            if (item.children instanceof Array) {\n              var value = forChildren(item.children, key);\n\n              if (value != null) {\n                return value;\n              }\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        return null;\n      };\n\n      var rows = [];\n\n      var _iterator5 = _createForOfIteratorHelper(checkedKeys),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var key = _step5.value;\n          var row = forChildren(this.treeData, key);\n\n          if (row != null) {\n            rows.push(row);\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return rows;\n    },\n    switchCheckStrictly: function switchCheckStrictly(v) {\n      if (v == 1) {\n        this.checkStrictly = false;\n      } else if (v == 2) {\n        this.checkStrictly = true;\n      }\n    },\n    isFullscreen: function isFullscreen(val) {\n      this.fullscreen = val;\n    }\n  }\n};",{"version":3,"sources":["JSelectDepartModal.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <j-modal\r\n    title=\"选择部门\"\r\n    :width=\"modalWidth\"\r\n    :visible=\"visible\"\r\n    :confirmLoading=\"confirmLoading\"\r\n    @ok=\"handleSubmit\"\r\n    @cancel=\"handleCancel\"\r\n    @update:fullscreen=\"isFullscreen\"\r\n    wrapClassName=\"j-depart-select-modal\"\r\n    switchFullscreen\r\n    cancelText=\"关闭\">\r\n    <a-spin tip=\"Loading...\" :spinning=\"false\">\r\n      <a-input-search v-model=\"searchValue\" style=\"margin-bottom: 1px\" placeholder=\"请输入部门名称按回车进行搜索\" />\r\n      <a-empty v-if=\"filterTreeData.length===0\"></a-empty>\r\n      <a-tree\r\n        v-else\r\n        checkable\r\n        :class=\"treeScreenClass\"\r\n        :treeData=\"filterTreeData\"\r\n        :checkStrictly=\"checkStrictly\"\r\n        @check=\"onCheck\"\r\n        @select=\"onSelect\"\r\n        @expand=\"onExpand\"\r\n        :autoExpandParent=\"autoExpandParent\"\r\n        :expandedKeys=\"expandedKeys\"\r\n        :checkedKeys=\"checkedKeys\">\r\n\r\n      </a-tree>\r\n    </a-spin>\r\n    <!--底部父子关联操作和确认取消按钮-->\r\n    <template slot=\"footer\" v-if=\"treeOpera && multi\">\r\n      <div class=\"drawer-bootom-button\">\r\n        <a-dropdown style=\"float: left\" :trigger=\"['click']\" placement=\"topCenter\">\r\n          <a-menu slot=\"overlay\">\r\n            <a-menu-item key=\"1\" @click=\"switchCheckStrictly(1)\">父子关联</a-menu-item>\r\n            <a-menu-item key=\"2\" @click=\"switchCheckStrictly(2)\">取消关联</a-menu-item>\r\n          </a-menu>\r\n          <a-button>\r\n            树操作 <a-icon type=\"up\" />\r\n          </a-button>\r\n        </a-dropdown>\r\n        <a-button @click=\"handleCancel\" type=\"primary\" style=\"margin-right: 0.8rem\">关闭</a-button>\r\n        <a-button @click=\"handleSubmit\" type=\"primary\" >确认</a-button>\r\n      </div>\r\n    </template>\r\n  </j-modal>\r\n</template>\r\n\r\n<script>\r\n  import { queryDepartTreeList } from '@/api/api'\r\n  export default {\r\n    name: 'JSelectDepartModal',\r\n    props:['modalWidth','multi','rootOpened','departId', 'store', 'text','treeOpera'],\r\n    data(){\r\n      return {\r\n        visible:false,\r\n        confirmLoading:false,\r\n        treeData:[],\r\n        autoExpandParent:true,\r\n        expandedKeys:[],\r\n        dataList:[],\r\n        checkedKeys:[],\r\n        checkedRows:[],\r\n        searchValue:\"\",\r\n        checkStrictly: true,\r\n        fullscreen:false\r\n      }\r\n    },\r\n    created(){\r\n      this.loadDepart();\r\n    },\r\n    watch:{\r\n      departId(){\r\n        this.initDepartComponent()\r\n      },\r\n      visible: {\r\n        handler() {\r\n          this.initDepartComponent(true)\r\n        }\r\n      }\r\n    },\r\n    computed:{\r\n      treeScreenClass() {\r\n        return {\r\n          'my-dept-select-tree': true,\r\n          'fullscreen': this.fullscreen,\r\n        }\r\n      },\r\n      filterTreeData(){\r\n        if(!this.searchValue){\r\n          return this.treeData\r\n        }\r\n        let filter = []\r\n        this.dataList.forEach((item) => {\r\n          if (item.title.includes(this.searchValue)) {\r\n            filter.push(Object.assign({}, item, {children: null, isLeaf: true}))\r\n          }\r\n        })\r\n        return filter\r\n      },\r\n    },\r\n    methods:{\r\n      show(){\r\n        this.visible=true\r\n        this.checkedRows=[]\r\n        this.checkedKeys=[]\r\n      },\r\n      loadDepart(){\r\n        // 这个方法是找到所有的部门信息\r\n        queryDepartTreeList().then(res=>{\r\n          if(res.success){\r\n            let arr = [...res.result]\r\n            this.reWriterWithSlot(arr)\r\n            this.treeData = arr\r\n            this.initDepartComponent()\r\n            if(this.rootOpened){\r\n              this.initExpandedKeys(res.result)\r\n            }\r\n          }\r\n        })\r\n      },\r\n      initDepartComponent(flag){\r\n        let arr = []\r\n        //该方法两个地方用 1.visible改变事件重新设置选中项 2.组件编辑页面回显\r\n        let fieldName = flag==true?'key':this.text\r\n        if(this.departId){\r\n          let arr2 = this.departId.split(',')\r\n          for(let item of this.dataList){\r\n            if(arr2.indexOf(item[this.store])>=0){\r\n              arr.push(item[fieldName])\r\n            }\r\n          }\r\n        }\r\n        if(flag==true){\r\n          this.checkedKeys = [...arr]\r\n        }else{\r\n          this.$emit(\"initComp\", arr.join(','))\r\n        }\r\n      },\r\n      reWriterWithSlot(arr){\r\n        for(let item of arr){\r\n          if(item.children && item.children.length>0){\r\n            this.reWriterWithSlot(item.children)\r\n            let temp = Object.assign({},item)\r\n            temp.children = {}\r\n            this.dataList.push(temp)\r\n          }else{\r\n            this.dataList.push(item)\r\n            item.scopedSlots={ title: 'title' }\r\n          }\r\n        }\r\n      },\r\n      initExpandedKeys(arr){\r\n        if(arr && arr.length>0){\r\n          let keys = []\r\n          for(let item of arr){\r\n            if(item.children && item.children.length>0){\r\n              keys.push(item.id)\r\n            }\r\n          }\r\n          this.expandedKeys=[...keys]\r\n          //全部keys\r\n          //this.allTreeKeys = [...keys]\r\n        }else{\r\n          this.expandedKeys=[]\r\n          //this.allTreeKeys = []\r\n        }\r\n      },\r\n      onCheck (checkedKeys,info) {\r\n        if(!this.multi){\r\n          let arr = checkedKeys.checked.filter(item => this.checkedKeys.indexOf(item) < 0)\r\n          this.checkedKeys = [...arr]\r\n          this.checkedRows = (this.checkedKeys.length === 0) ? [] : [info.node.dataRef]\r\n        }else{\r\n          if(this.checkStrictly){\r\n            this.checkedKeys = checkedKeys.checked\r\n          }else{\r\n            this.checkedKeys = checkedKeys\r\n          }\r\n          this.checkedRows = this.getCheckedRows(this.checkedKeys)\r\n        }\r\n      },\r\n      onSelect(selectedKeys,info) {\r\n        //取消关联的情况下才走onSelect的逻辑\r\n        if(this.checkStrictly){\r\n          let keys = []\r\n          keys.push(selectedKeys[0])\r\n          if(!this.checkedKeys || this.checkedKeys.length===0 || !this.multi){\r\n            this.checkedKeys = [...keys]\r\n            this.checkedRows=[info.node.dataRef]\r\n          }else{\r\n            let currKey = info.node.dataRef.key\r\n            if(this.checkedKeys.indexOf(currKey)>=0){\r\n              this.checkedKeys = this.checkedKeys.filter(item=> item !==currKey)\r\n            }else{\r\n              this.checkedKeys.push(...keys)\r\n            }\r\n          }\r\n          this.checkedRows = this.getCheckedRows(this.checkedKeys)\r\n        }\r\n      },\r\n      onExpand (expandedKeys) {\r\n        this.expandedKeys = expandedKeys\r\n        this.autoExpandParent = false\r\n      },\r\n      handleSubmit(){\r\n        if(!this.checkedKeys || this.checkedKeys.length==0){\r\n          this.$emit(\"ok\",'')\r\n        }else{\r\n          let checkRow = this.getCheckedRows(this.checkedKeys)\r\n          let keyStr = this.checkedKeys.join(\",\")\r\n          this.$emit(\"ok\", checkRow, keyStr)\r\n        }\r\n        this.handleClear()\r\n      },\r\n      handleCancel(){\r\n        this.handleClear()\r\n      },\r\n      handleClear(){\r\n        this.visible=false\r\n        this.checkedKeys=[]\r\n      },\r\n      getParentKey(currKey,treeData){\r\n        let parentKey\r\n        for (let i = 0; i < treeData.length; i++) {\r\n          const node = treeData[i]\r\n          if (node.children) {\r\n            if (node.children.some(item => item.key === currKey)) {\r\n              parentKey = node.key\r\n            } else if (this.getParentKey(currKey, node.children)) {\r\n              parentKey = this.getParentKey(currKey, node.children)\r\n            }\r\n          }\r\n        }\r\n        return parentKey\r\n      },\r\n      // 根据 checkedKeys 获取 rows\r\n      getCheckedRows(checkedKeys) {\r\n        const forChildren = (list, key) => {\r\n          for (let item of list) {\r\n            if (item.id === key) {\r\n              return item\r\n            }\r\n            if (item.children instanceof Array) {\r\n              let value = forChildren(item.children, key)\r\n              if (value != null) {\r\n                return value\r\n              }\r\n            }\r\n          }\r\n          return null\r\n        }\r\n\r\n        let rows = []\r\n        for (let key of checkedKeys) {\r\n          let row = forChildren(this.treeData, key)\r\n          if (row != null) {\r\n            rows.push(row)\r\n          }\r\n        }\r\n        return rows\r\n      },\r\n      switchCheckStrictly (v) {\r\n        if(v==1){\r\n          this.checkStrictly = false\r\n        }else if(v==2){\r\n          this.checkStrictly = true\r\n        }\r\n      },\r\n      isFullscreen(val){\r\n        this.fullscreen=val\r\n      }\r\n    }\r\n  }\r\n\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n  // 限制部门选择树高度，避免部门太多时点击确定不便\r\n  .my-dept-select-tree{\r\n    height:350px;\r\n    \r\n    &.fullscreen{\r\n      height: calc(100vh - 250px);\r\n    }\r\n    overflow-y: scroll;\r\n  }\r\n  .drawer-bootom-button {\r\n    position: absolute;\r\n    bottom: 0;\r\n    width: 100%;\r\n    border-top: 1px solid #e8e8e8;\r\n    padding: 10px 16px;\r\n    text-align: right;\r\n    left: 0;\r\n    background: #fff;\r\n    border-radius: 0 0 2px 2px;\r\n  }\r\n</style>"],"sourceRoot":"src/components/jeecgbiz/modal"}]}