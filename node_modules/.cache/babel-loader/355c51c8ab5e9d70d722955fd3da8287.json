{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\a\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\a\\ant-design-vue-jeecg\\src\\mixins\\JVxeTableModelMixin.js","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\mixins\\JVxeTableModelMixin.js","mtime":1661074531227},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1657458632572}],"contextDependencies":[],"result":["import { VALIDATE_FAILED, getRefPromise, validateFormAndTables, validateFormModelAndTables } from '@/components/jeecg/JVxeTable/utils/vxeUtils.js';\nimport { httpAction, getAction } from '@/api/manage';\nexport var JVxeTableModelMixin = {\n  data: function data() {\n    return {\n      title: '操作',\n      visible: false,\n      confirmLoading: false,\n      scrolling: true,\n      model: {},\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 6\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 18\n        }\n      }\n    };\n  },\n  methods: {\n    /** 获取所有的JVxeTable实例 */\n    getAllTable: function getAllTable() {\n      var _this = this;\n\n      if (!(this.refKeys instanceof Array)) {\n        throw this.throwNotArray('refKeys');\n      }\n\n      var values = this.refKeys.map(function (key) {\n        return getRefPromise(_this, key);\n      });\n      return Promise.all(values);\n    },\n\n    /** 遍历所有的JVxeTable实例 */\n    eachAllTable: function eachAllTable(callback) {\n      // 开始遍历\n      this.getAllTable().then(function (tables) {\n        console.log(\"tables\", tables);\n        tables.forEach(function (item, index) {\n          if (typeof callback === 'function') {\n            callback(item, index);\n          }\n        });\n      });\n    },\n\n    /** 当点击新增按钮时调用此方法 */\n    add: function add() {\n      if (typeof this.addBefore === 'function') this.addBefore(); // 默认新增空数据\n\n      var rowNum = this.addDefaultRowNum;\n\n      if (typeof rowNum !== 'number') {\n        rowNum = 1;\n        console.warn('由于你没有在 data 中定义 addDefaultRowNum 或 addDefaultRowNum 不是数字，所以默认添加一条空数据，如果不想默认添加空数据，请将定义 addDefaultRowNum 为 0');\n      }\n\n      this.eachAllTable(function (item) {\n        //update-begin-author:taoyan date:20210315 for: 一对多jvex 默认几行不好使了 LOWCOD-1349\n        setTimeout(function () {\n          item.addRows();\n        }, 30); //update-end-author:taoyan date:20210315 for: 一对多jvex 默认几行不好使了 LOWCOD-1349\n      });\n      if (typeof this.addAfter === 'function') this.addAfter(this.model);\n      this.edit(this.model);\n    },\n\n    /** 当点击了编辑（修改）按钮时调用此方法 */\n    edit: function edit(record) {\n      if (typeof this.editBefore === 'function') this.editBefore(record);\n      this.visible = true;\n      this.activeKey = this.refKeys[0];\n      this.$refs.form.resetFields();\n      this.model = Object.assign({}, record);\n      if (typeof this.editAfter === 'function') this.editAfter(this.model);\n    },\n\n    /** 关闭弹窗，并将所有JVxeTable实例回归到初始状态 */\n    close: function close() {\n      this.visible = false;\n      this.eachAllTable(function (item) {\n        item._remove();\n      });\n      this.$emit('close');\n    },\n\n    /** 查询某个tab的数据 */\n    requestSubTableData: function requestSubTableData(url, params, tab, success) {\n      tab.loading = true;\n      getAction(url, params).then(function (res) {\n        var result = res.result;\n        var dataSource = [];\n\n        if (result) {\n          if (Array.isArray(result)) {\n            dataSource = result;\n          } else if (Array.isArray(result.records)) {\n            dataSource = result.records;\n          }\n        }\n\n        tab.dataSource = dataSource;\n        typeof success === 'function' ? success(res) : '';\n      }).finally(function () {\n        tab.loading = false;\n      });\n    },\n\n    /** 发起请求，自动判断是执行新增还是修改操作 */\n    request: function request(formData) {\n      var _this2 = this;\n\n      var url = this.url.add,\n          method = 'post';\n\n      if (this.model.id) {\n        url = this.url.edit;\n        method = 'put';\n      }\n\n      this.confirmLoading = true;\n      console.log(\"formData===>\", formData);\n      httpAction(url, formData, method).then(function (res) {\n        if (res.success) {\n          _this2.$message.success(res.message);\n\n          _this2.$emit('ok');\n\n          _this2.close();\n        } else {\n          _this2.$message.warning(res.message);\n        }\n      }).finally(function () {\n        _this2.confirmLoading = false;\n      });\n    },\n\n    /* --- handle 事件 --- */\n\n    /** ATab 选项卡切换事件 */\n    handleChangeTabs: function handleChangeTabs(key) {\n      // 自动重置scrollTop状态，防止出现白屏\n      getRefPromise(this, key).then(function (vxeTable) {\n        vxeTable.resetScrollTop();\n      });\n    },\n\n    /** 关闭按钮点击事件 */\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n\n    /** 确定按钮点击事件 */\n    handleOk: function handleOk() {\n      var _this3 = this;\n\n      /** 触发表单验证 */\n      this.getAllTable().then(function (tables) {\n        /** 一次性验证主表和所有的次表 */\n        return validateFormModelAndTables(_this3.$refs.form, _this3.model, tables);\n      }).then(function (allValues) {\n        /** 一次性验证一对一的所有子表 */\n        return _this3.validateSubForm(allValues);\n      }).then(function (allValues) {\n        if (typeof _this3.classifyIntoFormData !== 'function') {\n          throw _this3.throwNotFunction('classifyIntoFormData');\n        }\n\n        var formData = _this3.classifyIntoFormData(allValues); // 发起请求\n\n\n        return _this3.request(formData);\n      }).catch(function (e) {\n        if (e.error === VALIDATE_FAILED) {\n          // 如果有未通过表单验证的子表，就自动跳转到它所在的tab\n          _this3.activeKey = e.index == null ? _this3.activeKey : _this3.refKeys[e.index];\n        } else {\n          console.error(e);\n        }\n      });\n    },\n    //校验所有子表表单\n    validateSubForm: function validateSubForm(allValues) {\n      return new Promise(function (resolve) {\n        resolve(allValues);\n      });\n    },\n\n    /* --- throw --- */\n\n    /** not a function */\n    throwNotFunction: function throwNotFunction(name) {\n      return \"\".concat(name, \" \\u672A\\u5B9A\\u4E49\\u6216\\u4E0D\\u662F\\u4E00\\u4E2A\\u51FD\\u6570\");\n    },\n\n    /** not a array */\n    throwNotArray: function throwNotArray(name) {\n      return \"\".concat(name, \" \\u672A\\u5B9A\\u4E49\\u6216\\u4E0D\\u662F\\u4E00\\u4E2A\\u6570\\u7EC4\");\n    }\n  }\n};",{"version":3,"sources":["D:/a/ant-design-vue-jeecg/src/mixins/JVxeTableModelMixin.js"],"names":["VALIDATE_FAILED","getRefPromise","validateFormAndTables","validateFormModelAndTables","httpAction","getAction","JVxeTableModelMixin","data","title","visible","confirmLoading","scrolling","model","labelCol","xs","span","sm","wrapperCol","methods","getAllTable","refKeys","Array","throwNotArray","values","map","key","Promise","all","eachAllTable","callback","then","tables","console","log","forEach","item","index","add","addBefore","rowNum","addDefaultRowNum","warn","setTimeout","addRows","addAfter","edit","record","editBefore","activeKey","$refs","form","resetFields","Object","assign","editAfter","close","_remove","$emit","requestSubTableData","url","params","tab","success","loading","res","result","dataSource","isArray","records","finally","request","formData","method","id","$message","message","warning","handleChangeTabs","vxeTable","resetScrollTop","handleCancel","handleOk","allValues","validateSubForm","classifyIntoFormData","throwNotFunction","catch","e","error","resolve","name"],"mappings":"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","sourcesContent":["import { VALIDATE_FAILED, getRefPromise, validateFormAndTables,validateFormModelAndTables} from '@/components/jeecg/JVxeTable/utils/vxeUtils.js'\r\nimport { httpAction, getAction } from '@/api/manage'\r\n\r\nexport const JVxeTableModelMixin = {\r\n  data() {\r\n    return {\r\n      title: '操作',\r\n      visible: false,\r\n      confirmLoading: false,\r\n      scrolling: true,\r\n      model: {},\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 6 }\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 18 }\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n\r\n    /** 获取所有的JVxeTable实例 */\r\n    getAllTable() {\r\n      if (!(this.refKeys instanceof Array)) {\r\n        throw this.throwNotArray('refKeys')\r\n      }\r\n      let values = this.refKeys.map(key => getRefPromise(this, key))\r\n      return Promise.all(values)\r\n    },\r\n\r\n    /** 遍历所有的JVxeTable实例 */\r\n    eachAllTable(callback) {\r\n      // 开始遍历\r\n      this.getAllTable().then(tables => {\r\n        console.log(\"tables\",tables)\r\n        tables.forEach((item, index) => {\r\n          if (typeof callback === 'function') {\r\n            callback(item, index)\r\n          }\r\n        })\r\n      })\r\n    },\r\n\r\n    /** 当点击新增按钮时调用此方法 */\r\n    add() {\r\n      if (typeof this.addBefore === 'function') this.addBefore()\r\n      // 默认新增空数据\r\n      let rowNum = this.addDefaultRowNum\r\n      if (typeof rowNum !== 'number') {\r\n        rowNum = 1\r\n        console.warn('由于你没有在 data 中定义 addDefaultRowNum 或 addDefaultRowNum 不是数字，所以默认添加一条空数据，如果不想默认添加空数据，请将定义 addDefaultRowNum 为 0')\r\n      }\r\n      this.eachAllTable((item) => {\r\n        //update-begin-author:taoyan date:20210315 for: 一对多jvex 默认几行不好使了 LOWCOD-1349\r\n        setTimeout(()=>{\r\n          item.addRows()\r\n        }, 30)\r\n        //update-end-author:taoyan date:20210315 for: 一对多jvex 默认几行不好使了 LOWCOD-1349\r\n      })\r\n      if (typeof this.addAfter === 'function') this.addAfter(this.model)\r\n      this.edit(this.model)\r\n    },\r\n    /** 当点击了编辑（修改）按钮时调用此方法 */\r\n    edit(record) {\r\n      if (typeof this.editBefore === 'function') this.editBefore(record)\r\n      this.visible = true\r\n      this.activeKey = this.refKeys[0]\r\n      this.$refs.form.resetFields()\r\n      this.model = Object.assign({}, record)\r\n      if (typeof this.editAfter === 'function') this.editAfter(this.model)\r\n    },\r\n    /** 关闭弹窗，并将所有JVxeTable实例回归到初始状态 */\r\n    close() {\r\n      this.visible = false\r\n      this.eachAllTable((item) => {\r\n        item._remove()\r\n      })\r\n      this.$emit('close')\r\n    },\r\n\r\n    /** 查询某个tab的数据 */\r\n    requestSubTableData(url, params, tab, success) {\r\n      tab.loading = true\r\n      getAction(url, params).then(res => {\r\n        let { result } = res\r\n        let dataSource = []\r\n        if (result) {\r\n          if (Array.isArray(result)) {\r\n            dataSource = result\r\n          } else if (Array.isArray(result.records)) {\r\n            dataSource = result.records\r\n          }\r\n        }\r\n        tab.dataSource = dataSource\r\n        typeof success === 'function' ? success(res) : ''\r\n      }).finally(() => {\r\n        tab.loading = false\r\n      })\r\n    },\r\n    /** 发起请求，自动判断是执行新增还是修改操作 */\r\n    request(formData) {\r\n      let url = this.url.add, method = 'post'\r\n      if (this.model.id) {\r\n        url = this.url.edit\r\n        method = 'put'\r\n      }\r\n      this.confirmLoading = true\r\n      console.log(\"formData===>\",formData);\r\n      httpAction(url, formData, method).then((res) => {\r\n        if (res.success) {\r\n          this.$message.success(res.message)\r\n          this.$emit('ok')\r\n          this.close()\r\n        } else {\r\n          this.$message.warning(res.message)\r\n        }\r\n      }).finally(() => {\r\n        this.confirmLoading = false\r\n      })\r\n    },\r\n\r\n    /* --- handle 事件 --- */\r\n\r\n    /** ATab 选项卡切换事件 */\r\n    handleChangeTabs(key) {\r\n      // 自动重置scrollTop状态，防止出现白屏\r\n      getRefPromise(this, key).then(vxeTable => {\r\n        vxeTable.resetScrollTop()\r\n      })\r\n    },\r\n    /** 关闭按钮点击事件 */\r\n    handleCancel() {\r\n      this.close()\r\n    },\r\n    /** 确定按钮点击事件 */\r\n    handleOk() {\r\n      /** 触发表单验证 */\r\n      this.getAllTable().then(tables => {\r\n        /** 一次性验证主表和所有的次表 */\r\n        return validateFormModelAndTables(this.$refs.form,this.model, tables)\r\n      }).then(allValues => {\r\n        /** 一次性验证一对一的所有子表 */\r\n        return this.validateSubForm(allValues)\r\n      }).then(allValues => {\r\n        if (typeof this.classifyIntoFormData !== 'function') {\r\n          throw this.throwNotFunction('classifyIntoFormData')\r\n        }\r\n        let formData = this.classifyIntoFormData(allValues)\r\n        // 发起请求\r\n        return this.request(formData)\r\n      }).catch(e => {\r\n        if (e.error === VALIDATE_FAILED) {\r\n          // 如果有未通过表单验证的子表，就自动跳转到它所在的tab\r\n          this.activeKey = e.index == null ? this.activeKey : this.refKeys[e.index]\r\n        } else {\r\n          console.error(e)\r\n        }\r\n      })\r\n    },\r\n//校验所有子表表单\r\n    validateSubForm(allValues){\r\n      return new Promise((resolve) => {\r\n        resolve(allValues)\r\n      })\r\n    },\r\n    /* --- throw --- */\r\n\r\n    /** not a function */\r\n    throwNotFunction(name) {\r\n      return `${name} 未定义或不是一个函数`\r\n    },\r\n\r\n    /** not a array */\r\n    throwNotArray(name) {\r\n      return `${name} 未定义或不是一个数组`\r\n    }\r\n\r\n  }\r\n}"]}]}