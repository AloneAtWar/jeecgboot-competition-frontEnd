{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\a\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\a\\ant-design-vue-jeecg\\src\\components\\jeecg\\JEasyCron\\validator.js","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\components\\jeecg\\JEasyCron\\validator.js","mtime":1661074531174},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1657458632572}],"contextDependencies":[],"result":["import CronParser from 'cron-parser';\nimport { replaceWeekName } from './tabs/const';\nexport default (function (rule, value, callback) {\n  // 没填写就不校验\n  if (!value) {\n    callback();\n    return true;\n  }\n\n  var values = value.split(' ').filter(function (item) {\n    return !!item;\n  });\n\n  if (values.length > 7) {\n    callback(new Error('Cron表达式最多7项！'));\n    return false;\n  } // 检查第7项\n\n\n  var e = value;\n\n  if (values.length === 7) {\n    var year = replaceWeekName(values[6]);\n\n    if (year !== '*' && year !== '?') {\n      var yearValues = [];\n\n      if (year.indexOf('-') >= 0) {\n        yearValues = year.split('-');\n      } else if (year.indexOf('/')) {\n        yearValues = year.split('/');\n      } else {\n        yearValues = [year];\n      } // console.info(yearValues)\n      // 判断是否都是数字\n\n\n      var checkYear = yearValues.some(function (item) {\n        return isNaN(item);\n      });\n\n      if (checkYear) {\n        callback(new Error('Cron表达式参数[年]错误：' + year));\n        return false;\n      }\n    } // 取其中的前六项\n\n\n    e = values.slice(0, 6).join(' ');\n  } // 6位 没有年\n  // 5位没有秒、年\n\n\n  var result = true;\n\n  try {\n    var iter = CronParser.parseExpression(e);\n    iter.next();\n    callback();\n  } catch (e) {\n    callback(new Error('Cron表达式错误：' + e));\n    result = false;\n  }\n\n  return result;\n});",{"version":3,"sources":["D:/a/ant-design-vue-jeecg/src/components/jeecg/JEasyCron/validator.js"],"names":["CronParser","replaceWeekName","rule","value","callback","values","split","filter","item","length","Error","e","year","yearValues","indexOf","checkYear","some","isNaN","slice","join","result","iter","parseExpression","next"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,aAAvB;AACA,SAASC,eAAT,QAAgC,cAAhC;AAEA,gBAAe,UAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,EAA2B;AACxC;AACA,MAAI,CAACD,KAAL,EAAY;AACVC,IAAAA,QAAQ;AACR,WAAO,IAAP;AACD;;AACD,MAAMC,MAAM,GAAGF,KAAK,CAACG,KAAN,CAAY,GAAZ,EAAiBC,MAAjB,CAAwB,UAAAC,IAAI;AAAA,WAAI,CAAC,CAACA,IAAN;AAAA,GAA5B,CAAf;;AACA,MAAIH,MAAM,CAACI,MAAP,GAAgB,CAApB,EAAuB;AACrBL,IAAAA,QAAQ,CAAC,IAAIM,KAAJ,CAAU,cAAV,CAAD,CAAR;AACA,WAAO,KAAP;AACD,GAVuC,CAWxC;;;AACA,MAAIC,CAAC,GAAGR,KAAR;;AACA,MAAIE,MAAM,CAACI,MAAP,KAAkB,CAAtB,EAAyB;AACvB,QAAMG,IAAI,GAAGX,eAAe,CAACI,MAAM,CAAC,CAAD,CAAP,CAA5B;;AACA,QAAIO,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,GAA7B,EAAkC;AAChC,UAAIC,UAAU,GAAG,EAAjB;;AACA,UAAID,IAAI,CAACE,OAAL,CAAa,GAAb,KAAqB,CAAzB,EAA4B;AAC1BD,QAAAA,UAAU,GAAGD,IAAI,CAACN,KAAL,CAAW,GAAX,CAAb;AACD,OAFD,MAEO,IAAIM,IAAI,CAACE,OAAL,CAAa,GAAb,CAAJ,EAAuB;AAC5BD,QAAAA,UAAU,GAAGD,IAAI,CAACN,KAAL,CAAW,GAAX,CAAb;AACD,OAFM,MAEA;AACLO,QAAAA,UAAU,GAAG,CAACD,IAAD,CAAb;AACD,OAR+B,CAShC;AACA;;;AACA,UAAMG,SAAS,GAAGF,UAAU,CAACG,IAAX,CAAgB,UAAAR,IAAI;AAAA,eAAIS,KAAK,CAACT,IAAD,CAAT;AAAA,OAApB,CAAlB;;AACA,UAAIO,SAAJ,EAAe;AACbX,QAAAA,QAAQ,CAAC,IAAIM,KAAJ,CAAU,oBAAoBE,IAA9B,CAAD,CAAR;AACA,eAAO,KAAP;AACD;AACF,KAlBsB,CAmBvB;;;AACAD,IAAAA,CAAC,GAAGN,MAAM,CAACa,KAAP,CAAa,CAAb,EAAgB,CAAhB,EAAmBC,IAAnB,CAAwB,GAAxB,CAAJ;AACD,GAlCuC,CAmCxC;AACA;;;AACA,MAAIC,MAAM,GAAG,IAAb;;AACA,MAAI;AACF,QAAMC,IAAI,GAAGrB,UAAU,CAACsB,eAAX,CAA2BX,CAA3B,CAAb;AACAU,IAAAA,IAAI,CAACE,IAAL;AACAnB,IAAAA,QAAQ;AACT,GAJD,CAIE,OAAOO,CAAP,EAAU;AACVP,IAAAA,QAAQ,CAAC,IAAIM,KAAJ,CAAU,eAAeC,CAAzB,CAAD,CAAR;AACAS,IAAAA,MAAM,GAAG,KAAT;AACD;;AACD,SAAOA,MAAP;AACD,CA/CD","sourcesContent":["import CronParser from 'cron-parser'\r\nimport { replaceWeekName } from './tabs/const'\r\n\r\nexport default (rule, value, callback) => {\r\n  // 没填写就不校验\r\n  if (!value) {\r\n    callback()\r\n    return true\r\n  }\r\n  const values = value.split(' ').filter(item => !!item)\r\n  if (values.length > 7) {\r\n    callback(new Error('Cron表达式最多7项！'))\r\n    return false\r\n  }\r\n  // 检查第7项\r\n  let e = value\r\n  if (values.length === 7) {\r\n    const year = replaceWeekName(values[6])\r\n    if (year !== '*' && year !== '?') {\r\n      let yearValues = []\r\n      if (year.indexOf('-') >= 0) {\r\n        yearValues = year.split('-')\r\n      } else if (year.indexOf('/')) {\r\n        yearValues = year.split('/')\r\n      } else {\r\n        yearValues = [year]\r\n      }\r\n      // console.info(yearValues)\r\n      // 判断是否都是数字\r\n      const checkYear = yearValues.some(item => isNaN(item))\r\n      if (checkYear) {\r\n        callback(new Error('Cron表达式参数[年]错误：' + year))\r\n        return false\r\n      }\r\n    }\r\n    // 取其中的前六项\r\n    e = values.slice(0, 6).join(' ')\r\n  }\r\n  // 6位 没有年\r\n  // 5位没有秒、年\r\n  let result = true\r\n  try {\r\n    const iter = CronParser.parseExpression(e)\r\n    iter.next()\r\n    callback()\r\n  } catch (e) {\r\n    callback(new Error('Cron表达式错误：' + e))\r\n    result = false\r\n  }\r\n  return result\r\n}\r\n"]}]}