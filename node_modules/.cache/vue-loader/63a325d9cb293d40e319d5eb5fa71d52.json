{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a\\ant-design-vue-jeecg\\src\\views\\user\\LoginPhone.vue?vue&type=style&index=0&id=50afd0bf&scoped=true&lang=css&","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\views\\user\\LoginPhone.vue","mtime":1661074531324},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\css-loader\\index.js","mtime":1657458574837},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1657458571653},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\postcss-loader\\src\\index.js","mtime":1657458638287},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1657458571653}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.getCaptcha{\r\n  display: block;\r\n  width: 100%;\r\n  height: 40px;\r\n}\r\n",{"version":3,"sources":["LoginPhone.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsKA;AACA;AACA;AACA;AACA","file":"LoginPhone.vue","sourceRoot":"src/views/user","sourcesContent":["<template>\r\n  <div>\r\n    <a-form-model ref=\"form\" :model=\"model\" :rules=\"validatorRules\">\r\n      <a-form-model-item required prop=\"mobile\">\r\n        <a-input v-model=\"model.mobile\" size=\"large\" type=\"text\" placeholder=\"请输入手机号\">\r\n          <a-icon slot=\"prefix\" type=\"mobile\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\r\n        </a-input>\r\n      </a-form-model-item>\r\n      <a-row :gutter=\"16\">\r\n        <a-col class=\"gutter-row\" :span=\"16\">\r\n          <a-form-model-item required prop=\"captcha\">\r\n            <a-input v-model=\"model.captcha\" size=\"large\" type=\"text\" placeholder=\"请输入验证码\">\r\n              <a-icon slot=\"prefix\" type=\"mail\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\r\n            </a-input>\r\n          </a-form-model-item>\r\n        </a-col>\r\n        <a-col class=\"gutter-row\" :span=\"8\">\r\n          <a-button\r\n            class=\"getCaptcha\"\r\n            tabindex=\"-1\"\r\n            :disabled=\"state.smsSendBtn\"\r\n            @click.stop.prevent=\"getCaptcha\"\r\n            v-text=\"!state.smsSendBtn && '获取验证码' || (state.time+' s')\"></a-button>\r\n        </a-col>\r\n      </a-row>\r\n    </a-form-model>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import { postAction } from '@/api/manage'\r\n  import { mapActions } from 'vuex'\r\n\r\n  export default {\r\n    name: 'LoginPhone',\r\n    data(){\r\n      return {\r\n        model:{\r\n          mobile: '',\r\n          captcha: ''\r\n        },\r\n        //手机号登录用\r\n        state: {\r\n          time: 60,\r\n          smsSendBtn: false,\r\n        },\r\n        validatorRules:{\r\n          mobile: [\r\n            { required: true, message: '请输入手机号码!' },\r\n            { validator: this.validateMobile }\r\n          ],\r\n          captcha: [{\r\n            required: true, message: '请输入验证码!'\r\n          }]\r\n        }\r\n\r\n      }\r\n    },\r\n    methods:{\r\n      ...mapActions(['PhoneLogin']),\r\n      handleLogin(rememberMe){\r\n        this.validateFields([ 'mobile', 'captcha' ], (err) => {\r\n          if (!err) {\r\n            let loginParams = {\r\n              mobile: this.model.mobile,\r\n              captcha: this.model.captcha,\r\n              remember_me: rememberMe\r\n            }\r\n            console.log(\"登录参数\", loginParams)\r\n            this.PhoneLogin(loginParams).then((res) => {\r\n              this.$emit('success', res.result)\r\n            }).catch((err) => {\r\n              this.$emit('fail', err)\r\n            });\r\n          }else{\r\n            this.$emit('validateFail')\r\n          }\r\n        })\r\n      },\r\n      // 校验手机号\r\n      validateMobile(rule,value,callback){\r\n        if (!value || new RegExp(/^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\\d{8}$/).test(value)){\r\n          callback();\r\n        }else{\r\n          callback(\"您的手机号码格式不正确!\");\r\n        }\r\n      },\r\n      //获取验证码\r\n      getCaptcha (e) {\r\n        e.preventDefault();\r\n        let that = this;\r\n        that.validateFields([ 'mobile' ], (err) => {\r\n            if (!err) {\r\n              that.state.smsSendBtn = true;\r\n              let interval = window.setInterval(() => {\r\n                if (that.state.time-- <= 0) {\r\n                  that.state.time = 60;\r\n                  that.state.smsSendBtn = false;\r\n                  window.clearInterval(interval);\r\n                }\r\n              }, 1000);\r\n\r\n              const hide = that.$message.loading('验证码发送中..', 0);\r\n              let smsParams = {};\r\n              smsParams.mobile=that.model.mobile;\r\n              smsParams.smsmode=\"0\";\r\n              postAction(\"/sys/sms\",smsParams)\r\n                .then(res => {\r\n                  if(!res.success){\r\n                    setTimeout(hide, 0);\r\n                    that.cmsFailed(res.message);\r\n                  }\r\n                  console.log(res);\r\n                  setTimeout(hide, 500);\r\n                })\r\n                .catch(err => {\r\n                  setTimeout(hide, 1);\r\n                  clearInterval(interval);\r\n                  that.state.time = 60;\r\n                  that.state.smsSendBtn = false;\r\n                  that.requestFailed(err);\r\n                });\r\n            }\r\n          }\r\n        );\r\n      },\r\n      cmsFailed(err){\r\n        this.$notification[ 'error' ]({\r\n          message: '获取验证码失败',\r\n          description:err,\r\n          duration: 4,\r\n        });\r\n      },\r\n      /**\r\n       * 验证字段\r\n       * @param arr\r\n       * @param callback\r\n       */\r\n      validateFields(arr, callback){\r\n        let promiseArray = []\r\n        for(let item of arr){\r\n          let p = new Promise((resolve, reject) => {\r\n            this.$refs['form'].validateField(item, (err)=>{\r\n              if(!err){\r\n                resolve();\r\n              }else{\r\n                reject(err);\r\n              }\r\n            })\r\n          });\r\n          promiseArray.push(p)\r\n        }\r\n        Promise.all(promiseArray).then(()=>{\r\n          callback()\r\n        }).catch(err=>{\r\n          callback(err)\r\n        })\r\n      },\r\n\r\n\r\n    }\r\n\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n.getCaptcha{\r\n  display: block;\r\n  width: 100%;\r\n  height: 40px;\r\n}\r\n</style>"]}]}