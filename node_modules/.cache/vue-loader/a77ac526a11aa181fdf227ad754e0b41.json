{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a\\ant-design-vue-jeecg\\src\\views\\system\\modules\\GateWayRouteModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\views\\system\\modules\\GateWayRouteModal.vue","mtime":1661074531312},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1657458571653}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { postAction } from '@/api/manage'\n\nexport default {\n  name: 'GateWayRouteModal',\n  components: {},\n  data() {\n    return {\n      layout: 'horizontal',\n      labelCol: { span: 3 },\n      wrapperCol: { span: 14 },\n      currentNameIndex: 0,\n      currentTagIndex:-1,\n      predicates: {},\n      filterArray: [ { key: 1, name: '限流过滤器' }],\n      //gateway对应的规则key\n      tagArray: [\n        {\n          name:'Path',\n          args:[]\n        },\n        {\n          name:'Header',\n          args:{\n            header:'',\n            regexp:''\n          }\n        },\n        {\n          name:'Query',\n          args:{\n            param:'',\n            regexp:''\n          }\n        },\n        {\n          name:'Method',\n          args:[]\n        },\n        {\n          name:'Host',\n          args:[]\n        },\n        {\n          name:'Cookie',\n          args:{\n            name:'',\n            regexp:''\n          }\n        },\n        {\n          name:'After',\n          args:[]\n        },\n        {\n          name:'Before',\n          args:[]\n        },\n        {\n          name:'Between',\n          args:[]\n        },\n        {\n          name:'RemoteAddr',\n          args:[]\n        }\n      ],\n      inputVisible: false,\n      inputValue: '',\n      url: {\n        update: '/sys/gatewayRoute/updateAll',\n        clear: '/sys/gatewayRoute/clearRedis'\n      },\n      router: this.getRouter(),\n      title: '路由编辑',\n      visible: false,\n      loading: false,\n      genKeyRouter:[\"Path\",\"Host\",\"Method\",\"After\",\"Before\",\"Between\",\"RemoteAddr\"]\n    }\n  },\n  methods: {\n    getRouter() {\n      return {\n        routerId: '',\n        name: '',\n        uri: '',\n        predicates: [],\n        filters: []\n      }\n    },\n    show(router) {\n      if (router) {\n        router.status=Boolean(router.status)\n        this.router = router\n      } else {\n        this.router = this.getRouter()\n        this.inputValue=''\n      }\n      this.visible = true\n      this.currentTagIndex=-1\n      this.currentNameIndex=-1\n    },\n    close() {\n      this.reset()\n      this.$emit('close')\n      this.$refs['form'].resetFields()\n      this.visible = false\n    },\n    //删除路由条件配置项\n    removeTag(item, removedTag) {\n      const tags = item.args.filter(tag => tag !== removedTag)\n      item.args = tags\n    },\n    //添加路由选项\n    predicatesHandleMenuClick(e) {\n      this.router.predicates.push({\n        args: e.args,\n        name: e.name,\n      })\n    },\n    editTag(tag, tagIndex,index){\n      this.currentNameIndex = index;\n      this.currentTagIndex=tagIndex\n    },\n    /**\n     * 值修改事件\n     * @param e\n     * @param item\n     * @param key\n     */\n    valueChange(e,item,key){\n       item[key]=e.target.value\n    },\n    //显示输入框\n    showInput(item, index) {\n      this.inputVisible = true\n      this.currentNameIndex = index\n    },\n    //路由选项输入框失去焦点事件\n    handleInputChange(e) {\n      this.inputValue = e.target.value\n    },\n    //删除路由条件\n    removePredicate(item, index) {\n      item.predicates.splice(index, 1)\n    },\n    //删除过滤器参数\n    removeFilterParams(item, index) {\n      item.args.splice(index, 1)\n    },\n    //删除过滤器\n    removeFilter(item, index) {\n      item.filters.splice(index, 1)\n    },\n    //添加过滤器参数\n    addFilterParams(item) {\n      item.args.push({\n        key: 'key' + item.args.length + 1,\n        value: ''\n      })\n    },\n    //过滤器添加事件\n    filterHandleMenuClick(e) {\n      if (e.key == 0) {\n        this.router.filters.push({\n          args: [  {\n            key: 'name',\n            value: 'default'\n          },{\n            key: 'fallbackUri',\n            value: 'forward:/fallback'\n          }],\n          name:'Hystrix',\n          title: this.filterArray[0].name\n        })\n      }\n      if (e.key == 1) {\n        this.router.filters.push({\n          args: [ {\n            key: 'key-resolver',\n            value: '#{@ipKeyResolver}'\n          }, {\n            key: 'redis-rate-limiter.replenishRate',\n            value: 20\n          }, {\n            key: 'redis-rate-limiter.burstCapacity',\n            value: 20\n          }],\n          name:\"RequestRateLimiter\",\n          title: this.filterArray[0].name\n        })\n      }\n    },\n    //输入框确认\n    handleInputConfirm(item) {\n      const inputValue = this.inputValue\n      let tags = item.args\n      if (inputValue && tags.indexOf(inputValue) === -1) {\n        item.args = [...tags, inputValue]\n      }\n      console.log(tags)\n      Object.assign(this, {\n        tags,\n        inputVisible: false,\n        inputValue: ''\n      })\n      this.currentTagIndex=-1\n    },\n    //输入框确认\n    handleInputEditConfirm(item,tag,index) {\n      if(this.inputValue)\n      {\n        const inputValue = this.inputValue\n        item.args[index]=inputValue\n      }\n      this.currentTagIndex=-1\n\n    },\n    reset() {\n      this.expandedKeysss = []\n      this.checkedKeys = []\n      this.defaultCheckedKeys = []\n      this.loading = false\n    },\n    //关闭弹窗\n    handleCancel() {\n      this.close()\n    },\n    //提交路由\n    handleSubmit() {\n      let { predicates, filters, ...other } = this.router\n      let router = other\n      router.predicates = JSON.stringify(this.router.predicates)\n      router.filters = JSON.stringify(this.router.filters)\n      postAction(this.url.update, {\n        router\n      }).then(res => {\n        if (res.success) {\n          this.close()\n          this.$emit('ok')\n          this.$message.success(res.message)\n        } else {\n          this.$message.error(res.message)\n        }\n      })\n\n    }\n  }\n}\n\n",{"version":3,"sources":["GateWayRouteModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"GateWayRouteModal.vue","sourceRoot":"src/views/system/modules","sourcesContent":["<template>\r\n  <a-drawer\r\n    :title=\"title\"\r\n    :maskClosable=\"true\"\r\n    width=\"45%\"\r\n    placement=\"right\"\r\n    v-if=\"visible\"\r\n    :closable=\"true\"\r\n    @close=\"handleCancel\"\r\n    :visible=\"visible\"\r\n    style=\"overflow: auto;padding-bottom: 53px;\">\r\n    <a-form-model ref=\"form\" :layout=\"layout\" :label-col=\"labelCol\" :wrapper-col=\"wrapperCol\" :model=\"router\">\r\n      <a-form-model-item label=\"路由ID\">\r\n        <a-input v-model=\"router.routerId\" placeholder=\"路由唯一ID\"/>\r\n      </a-form-model-item>\r\n      <a-form-model-item label=\"路由名称\">\r\n        <a-input v-model=\"router.name\" placeholder=\"路由名称\"/>\r\n      </a-form-model-item>\r\n      <a-form-model-item label=\"路由URI\">\r\n        <a-input v-model=\"router.uri\" placeholder=\"路由URL\"/>\r\n      </a-form-model-item>\r\n      <a-form-model-item label=\"路由状态\" prop=\"status\">\r\n        <a-switch default-checked v-model=\"router.status\"/>\r\n      </a-form-model-item>\r\n\r\n      <a-form-model-item prop=\"predicates\" label=\"路由条件\">\r\n        <div v-for=\"(item,index) in router.predicates\">\r\n          <a-divider>{{item.name}}\r\n            <a-icon type=\"delete\" size=\"22\" @click=\"removePredicate(router,index)\"/>\r\n          </a-divider>\r\n          <!--当name在 genKeyRouter 时不需要指定key，后台自动拼key -->\r\n          <div v-if=\"genKeyRouter.includes(item.name)\">\r\n            <template v-for=\"(tag, tagIndex) in item.args\">\r\n              <a-input v-if=\"tagIndex==currentTagIndex&&index==currentNameIndex\" ref=\"input\" type=\"text\" size=\"small\"\r\n                       :style=\"{ width: '190px' }\"\r\n                       :value=\"tag\"\r\n                       @change=\"handleInputChange\" @blur=\"handleInputEditConfirm(item,tag,tagIndex)\"\r\n                       @keyup.enter=\"handleInputEditConfirm(item,tag,tagIndex)\"/>\r\n              <a-tag v-else :key=\"tag\" :closable=\"true\" @close=\"() => removeTag(item,tag)\" @click=\"editTag(tag,tagIndex,index)\">\r\n                {{ tag }}\r\n              </a-tag>\r\n            </template>\r\n            <a-input v-if=\"inputVisible&&index==currentNameIndex\" ref=\"input\" type=\"text\" size=\"small\"\r\n                     :style=\"{ width: '100px' }\"\r\n                     :value=\"inputValue\"\r\n                     @change=\"handleInputChange\" @blur=\"handleInputConfirm(item)\"\r\n                     @keyup.enter=\"handleInputConfirm(item)\"/>\r\n            <a-tag v-else style=\"background: #fff; borderStyle: dashed;\" @click=\"showInput(item,index)\">\r\n              <a-icon type=\"plus\"/>\r\n              新建{{item.name}}\r\n            </a-tag>\r\n          </div>\r\n          <!--当name不在 genKeyRouter 时需要指定key-->\r\n          <div v-if=\"!genKeyRouter.includes(item.name)\">\r\n            <template v-for=\"(value, key) in item.args\">\r\n              <a-row>\r\n                <a-col :span=\"5\" style=\"margin-top:2px\">\r\n                  <span v-if=\"key=='header'\" >Header名称</span>\r\n                  <span v-if=\"key=='regexp'\">参数值</span>\r\n                  <span v-if=\"key=='param'\">参数名</span>\r\n                  <span v-if=\"key=='name'\">Cookie名称</span>\r\n                </a-col>\r\n                <a-col :span=\"18\">\r\n                  <a-input :defaultValue=\"value\" placeholder=\"参数值\" style=\"width: 70%; margin-right: 8px;margin-top: 3px\" @change=\"(e)=>valueChange(e,item.args,key)\"/>\r\n                </a-col>\r\n              </a-row>\r\n            </template>\r\n          </div>\r\n        </div>\r\n        <p class=\"btn\" style=\"padding-top: 10px\">\r\n          <a-dropdown>\r\n            <a-menu slot=\"overlay\">\r\n              <a-menu-item :key=\"item.name\" v-for=\"item in tagArray\" @click=\"predicatesHandleMenuClick(item)\">{{item.name}}</a-menu-item>\r\n            </a-menu>\r\n            <a-button type=\"dashed\" style=\"margin-left: 8px;width:100%\"> 添加路由条件\r\n              <a-icon type=\"down\"/>\r\n            </a-button>\r\n          </a-dropdown>\r\n        </p>\r\n      </a-form-model-item>\r\n      <a-form-model-item prop=\"predicates\" label=\"过滤器\">\r\n        <div v-for=\"(item,index) in router.filters\">\r\n          <a-divider>{{item.name}}\r\n            <a-icon type=\"delete\" size=\"22\" @click=\"removeFilter(router,index)\"/>\r\n          </a-divider>\r\n          <div v-for=\"(tag, index) in item.args\" :key=\"tag.key\">\r\n            <a-input v-model=\"tag.key\" placeholder=\"参数键\" style=\"width: 45%; margin-right: 8px\"/>\r\n            <a-input v-model=\"tag.value\" placeholder=\"参数值\" style=\"width: 40%; margin-right: 8px\"/>\r\n            <a-icon class=\"dynamic-delete-button\" type=\"minus-circle-o\" @click=\"removeFilterParams(item,index)\"/>\r\n          </div>\r\n          <a-button type=\"dashed\" style=\"margin-left:28%;width: 30%\" size=\"small\" @click=\"addFilterParams(item)\">\r\n            <a-icon type=\"plus\"/>\r\n            添加参数\r\n          </a-button>\r\n        </div>\r\n        <p class=\"btn\" style=\"padding-top: 10px\">\r\n          <a-dropdown>\r\n            <a-menu slot=\"overlay\" @click=\"filterHandleMenuClick\">\r\n              <a-menu-item :key=\"item.key\" :name=\"item.name\" v-for=\"item in filterArray\">{{item.name}}</a-menu-item>\r\n            </a-menu>\r\n            <a-button type=\"dashed\" style=\"margin-left: 8px;width:100%\"> 添加过滤器\r\n              <a-icon type=\"down\"/>\r\n            </a-button>\r\n          </a-dropdown>\r\n        </p>\r\n      </a-form-model-item>\r\n      <a-row :style=\"{textAlign:'right'}\" class=\"drawer-bootom-button\">\r\n        <a-button :style=\"{marginRight: '8px'}\" @click=\"handleCancel\">\r\n          关闭\r\n        </a-button>\r\n        <a-button @click=\"handleSubmit\" type=\"primary\">确定</a-button>\r\n      </a-row>\r\n    </a-form-model>\r\n\r\n  </a-drawer>\r\n\r\n</template>\r\n<script>\r\n\r\n  import { postAction } from '@/api/manage'\r\n\r\n  export default {\r\n    name: 'GateWayRouteModal',\r\n    components: {},\r\n    data() {\r\n      return {\r\n        layout: 'horizontal',\r\n        labelCol: { span: 3 },\r\n        wrapperCol: { span: 14 },\r\n        currentNameIndex: 0,\r\n        currentTagIndex:-1,\r\n        predicates: {},\r\n        filterArray: [ { key: 1, name: '限流过滤器' }],\r\n        //gateway对应的规则key\r\n        tagArray: [\r\n          {\r\n            name:'Path',\r\n            args:[]\r\n          },\r\n          {\r\n            name:'Header',\r\n            args:{\r\n              header:'',\r\n              regexp:''\r\n            }\r\n          },\r\n          {\r\n            name:'Query',\r\n            args:{\r\n              param:'',\r\n              regexp:''\r\n            }\r\n          },\r\n          {\r\n            name:'Method',\r\n            args:[]\r\n          },\r\n          {\r\n            name:'Host',\r\n            args:[]\r\n          },\r\n          {\r\n            name:'Cookie',\r\n            args:{\r\n              name:'',\r\n              regexp:''\r\n            }\r\n          },\r\n          {\r\n            name:'After',\r\n            args:[]\r\n          },\r\n          {\r\n            name:'Before',\r\n            args:[]\r\n          },\r\n          {\r\n            name:'Between',\r\n            args:[]\r\n          },\r\n          {\r\n            name:'RemoteAddr',\r\n            args:[]\r\n          }\r\n        ],\r\n        inputVisible: false,\r\n        inputValue: '',\r\n        url: {\r\n          update: '/sys/gatewayRoute/updateAll',\r\n          clear: '/sys/gatewayRoute/clearRedis'\r\n        },\r\n        router: this.getRouter(),\r\n        title: '路由编辑',\r\n        visible: false,\r\n        loading: false,\r\n        genKeyRouter:[\"Path\",\"Host\",\"Method\",\"After\",\"Before\",\"Between\",\"RemoteAddr\"]\r\n      }\r\n    },\r\n    methods: {\r\n      getRouter() {\r\n        return {\r\n          routerId: '',\r\n          name: '',\r\n          uri: '',\r\n          predicates: [],\r\n          filters: []\r\n        }\r\n      },\r\n      show(router) {\r\n        if (router) {\r\n          router.status=Boolean(router.status)\r\n          this.router = router\r\n        } else {\r\n          this.router = this.getRouter()\r\n          this.inputValue=''\r\n        }\r\n        this.visible = true\r\n        this.currentTagIndex=-1\r\n        this.currentNameIndex=-1\r\n      },\r\n      close() {\r\n        this.reset()\r\n        this.$emit('close')\r\n        this.$refs['form'].resetFields()\r\n        this.visible = false\r\n      },\r\n      //删除路由条件配置项\r\n      removeTag(item, removedTag) {\r\n        const tags = item.args.filter(tag => tag !== removedTag)\r\n        item.args = tags\r\n      },\r\n      //添加路由选项\r\n      predicatesHandleMenuClick(e) {\r\n        this.router.predicates.push({\r\n          args: e.args,\r\n          name: e.name,\r\n        })\r\n      },\r\n      editTag(tag, tagIndex,index){\r\n        this.currentNameIndex = index;\r\n        this.currentTagIndex=tagIndex\r\n      },\r\n      /**\r\n       * 值修改事件\r\n       * @param e\r\n       * @param item\r\n       * @param key\r\n       */\r\n      valueChange(e,item,key){\r\n         item[key]=e.target.value\r\n      },\r\n      //显示输入框\r\n      showInput(item, index) {\r\n        this.inputVisible = true\r\n        this.currentNameIndex = index\r\n      },\r\n      //路由选项输入框失去焦点事件\r\n      handleInputChange(e) {\r\n        this.inputValue = e.target.value\r\n      },\r\n      //删除路由条件\r\n      removePredicate(item, index) {\r\n        item.predicates.splice(index, 1)\r\n      },\r\n      //删除过滤器参数\r\n      removeFilterParams(item, index) {\r\n        item.args.splice(index, 1)\r\n      },\r\n      //删除过滤器\r\n      removeFilter(item, index) {\r\n        item.filters.splice(index, 1)\r\n      },\r\n      //添加过滤器参数\r\n      addFilterParams(item) {\r\n        item.args.push({\r\n          key: 'key' + item.args.length + 1,\r\n          value: ''\r\n        })\r\n      },\r\n      //过滤器添加事件\r\n      filterHandleMenuClick(e) {\r\n        if (e.key == 0) {\r\n          this.router.filters.push({\r\n            args: [  {\r\n              key: 'name',\r\n              value: 'default'\r\n            },{\r\n              key: 'fallbackUri',\r\n              value: 'forward:/fallback'\r\n            }],\r\n            name:'Hystrix',\r\n            title: this.filterArray[0].name\r\n          })\r\n        }\r\n        if (e.key == 1) {\r\n          this.router.filters.push({\r\n            args: [ {\r\n              key: 'key-resolver',\r\n              value: '#{@ipKeyResolver}'\r\n            }, {\r\n              key: 'redis-rate-limiter.replenishRate',\r\n              value: 20\r\n            }, {\r\n              key: 'redis-rate-limiter.burstCapacity',\r\n              value: 20\r\n            }],\r\n            name:\"RequestRateLimiter\",\r\n            title: this.filterArray[0].name\r\n          })\r\n        }\r\n      },\r\n      //输入框确认\r\n      handleInputConfirm(item) {\r\n        const inputValue = this.inputValue\r\n        let tags = item.args\r\n        if (inputValue && tags.indexOf(inputValue) === -1) {\r\n          item.args = [...tags, inputValue]\r\n        }\r\n        console.log(tags)\r\n        Object.assign(this, {\r\n          tags,\r\n          inputVisible: false,\r\n          inputValue: ''\r\n        })\r\n        this.currentTagIndex=-1\r\n      },\r\n      //输入框确认\r\n      handleInputEditConfirm(item,tag,index) {\r\n        if(this.inputValue)\r\n        {\r\n          const inputValue = this.inputValue\r\n          item.args[index]=inputValue\r\n        }\r\n        this.currentTagIndex=-1\r\n\r\n      },\r\n      reset() {\r\n        this.expandedKeysss = []\r\n        this.checkedKeys = []\r\n        this.defaultCheckedKeys = []\r\n        this.loading = false\r\n      },\r\n      //关闭弹窗\r\n      handleCancel() {\r\n        this.close()\r\n      },\r\n      //提交路由\r\n      handleSubmit() {\r\n        let { predicates, filters, ...other } = this.router\r\n        let router = other\r\n        router.predicates = JSON.stringify(this.router.predicates)\r\n        router.filters = JSON.stringify(this.router.filters)\r\n        postAction(this.url.update, {\r\n          router\r\n        }).then(res => {\r\n          if (res.success) {\r\n            this.close()\r\n            this.$emit('ok')\r\n            this.$message.success(res.message)\r\n          } else {\r\n            this.$message.error(res.message)\r\n          }\r\n        })\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n</script>\r\n<style lang=\"less\" scoped>\r\n  .drawer-bootom-button {\r\n    position: absolute;\r\n    bottom: 0;\r\n    width: 100%;\r\n    border-top: 1px solid #e8e8e8;\r\n    padding: 10px 16px;\r\n    text-align: right;\r\n    left: 0;\r\n    background: #fff;\r\n    border-radius: 0 0 2px 2px;\r\n  }\r\n</style>"]}]}