{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\JVxeDemo1.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\JVxeDemo1.vue","mtime":1661074531266},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1657458571653}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport { pushIfNotExist, randomNumber, randomUUID } from '@/utils/util'\nimport { JVXETypes } from '@/components/jeecg/JVxeTable'\n\nexport default {\n  name: 'JVxeDemo1',\n  data() {\n    return {\n      loading: false,\n      columns: [\n        {\n          title: '不可编辑',\n          key: 'normal',\n          type: JVXETypes.normal,\n          width: '180px',\n          fixed: 'left',\n          defaultValue: 'normal-new',\n        },\n        {\n          title: '单行文本',\n          key: 'input',\n          type: JVXETypes.input,\n          width: '180px',\n          defaultValue: '',\n          placeholder: '请输入${title}',\n          validateRules: [\n            {\n              required: true, // 必填\n              message: '请输入${title}' // 显示的文本\n            },\n            {\n              pattern: /^[a-z|A-Z][a-z|A-Z\\d_-]*$/, // 正则\n              message: '${title}必须以字母开头，可包含数字、下划线、横杠'\n            },\n            {\n              unique: true,\n              message: '${title}不能重复'\n            },\n            {\n              handler({cellValue, row, column}, callback, target) {\n                // cellValue 当前校验的值\n                // callback(flag, message) 方法必须执行且只能执行一次\n                //          flag = 是否通过了校验，不填写或者填写 null 代表不进行任何操作\n                //          message = 提示的类型，默认使用配置的 message\n                // target 行编辑的实例对象\n                if (cellValue === 'abc') {\n                  callback(false, '${title}不能是abc')  // false = 未通过校验\n                } else {\n                  callback(true) // true = 通过验证\n                }\n              },\n              message: '${title}默认提示'\n            }\n          ]\n        },\n        {\n          title: '多行文本',\n          key: 'textarea',\n          type: JVXETypes.textarea,\n          width: '200px',\n        },\n        {\n          title: '数字',\n          key: 'number',\n          type: JVXETypes.inputNumber,\n          width: '80px',\n          defaultValue: 32,\n          // 【统计列】sum = 求和、average = 平均值\n          statistics: ['sum', 'average'],\n        },\n        {\n          title: '下拉框',\n          key: 'select',\n          type: JVXETypes.select,\n          width: '180px',\n          // 下拉选项\n          options: [\n            {title: 'String', value: 'string'},\n            {title: 'Integer', value: 'int'},\n            {title: 'Double', value: 'double'},\n            {title: 'Boolean', value: 'boolean'}\n          ],\n          allowInput: true,\n          placeholder: '请选择'\n        },\n        {\n          title: '下拉框_字典',\n          key: 'select_dict',\n          type: JVXETypes.select,\n          width: '180px',\n          options: [],\n          dictCode: 'sex',\n          placeholder: '请选择',\n        },\n        {\n          title: '下拉框_多选',\n          key: 'select_multiple',\n          type: JVXETypes.selectMultiple,\n          width: '205px',\n          options: [\n            {title: 'String', value: 'string'},\n            {title: 'Integer', value: 'int'},\n            {title: 'Double', value: 'double'},\n            {title: 'Boolean', value: 'boolean'}\n          ],\n          defaultValue: ['int', 'boolean'], // 多个默认项\n          // defaultValue: 'string,double,int', // 也可使用这种方式\n          placeholder: '多选',\n        },\n\n        {\n          title: '下拉框_搜索',\n          key: 'select_search',\n          type: JVXETypes.selectSearch,\n          width: '180px',\n          options: [\n            {title: 'String', value: 'string'},\n            {title: 'Integer', value: 'int'},\n            {title: 'Double', value: 'double'},\n            {title: 'Boolean', value: 'boolean'}\n          ],\n        },\n        {\n          title: '日期时间',\n          key: 'datetime',\n          type: JVXETypes.datetime,\n          width: '200px',\n          defaultValue: '2019-4-30 14:52:22',\n          placeholder: '请选择',\n        },\n        {\n          title: '复选框',\n          key: 'checkbox',\n          type: JVXETypes.checkbox,\n          width: '100px',\n          customValue: ['Y', 'N'], // true ,false\n          defaultChecked: false,\n        },\n        {\n          title: '操作',\n          key: 'action',\n          type: JVXETypes.slot,\n          fixed: 'right',\n          minWidth: '100px',\n          align: 'center',\n          slotName: 'action',\n        }\n      ],\n      dataSource: [],\n    }\n\n  },\n\n  created() {\n    this.randomPage(0, 20, true)\n  },\n  methods: {\n\n    handleCK(props) {\n      this.$message.success('请在控制台查看输出')\n      // 参数介绍：\n      // props.value          当前单元格的值\n      // props.row            当前行的数据\n      // props.rowId          当前行ID\n      // props.rowIndex       当前行下标\n      // props.column         当前列的配置\n      // props.columnIndex    当前列下标\n      // props.$table         vxe实例，可以调用vxe内置方法\n      // props.target         JVXE实例，可以调用JVXE内置方法\n      // props.caseId         JVXE实例唯一ID\n      // props.scrolling      是否正在滚动\n      // props.triggerChange  触发change事件，用于更改slot的值\n      console.log('查看: ', {props})\n    },\n\n    handleDL(props) {\n      // 调用删除方法\n      props.target.removeRows(props.row)\n    },\n\n    handleValueChange(event) {\n      console.log('handleValueChange.event: ', event)\n    },\n\n    /** 表单验证 */\n    handleTableCheck() {\n      this.$refs.vTable.validateTable().then(errMap => {\n        if (errMap) {\n          console.log('表单验证未通过：', {errMap})\n          this.$message.error('验证未通过，请在控制台查看详细')\n        } else {\n          this.$message.success('验证通过')\n        }\n      })\n    },\n\n    /** 获取值，忽略表单验证 */\n    handleTableGet() {\n      const values = this.$refs.vTable.getTableData()\n      console.log('获取值:', {values})\n      this.$message.success('获取值成功，请看控制台输出')\n    },\n\n    /** 模拟加载1000条数据 */\n    handleTableSet() {\n      this.randomPage(1, 1000, true)\n    },\n\n    /* 随机生成数据 */\n    randomPage(current, pageSize, loading = false) {\n      if (loading) {\n        this.loading = true\n      }\n\n      let randomDatetime = () => {\n        let time = randomNumber(1000, 9999999999999)\n        return moment(new Date(time)).format('YYYY-MM-DD HH:mm:ss')\n      }\n\n      let limit = (current - 1) * pageSize\n\n      let options = ['string', 'int', 'double', 'boolean']\n\n      let begin = Date.now()\n      let values = []\n      for (let i = 0; i < pageSize; i++) {\n        values.push({\n          id: randomUUID(),\n          normal: `normal-${(limit + i) + 1}`,\n          input: `text-${(limit + i) + 1}`,\n          textarea: `textarea-${(limit + i) + 1}`,\n          number: randomNumber(0, 233),\n          select: options[randomNumber(0, 3)],\n          select_dict: randomNumber(1, 2).toString(),\n          select_multiple: (() => {\n            let length = randomNumber(1, 4)\n            let arr = []\n            for (let j = 0; j < length; j++) {\n              pushIfNotExist(arr, options[randomNumber(0, 3)])\n            }\n            return arr\n          })(),\n          select_search: options[randomNumber(0, 3)],\n          datetime: randomDatetime(),\n          checkbox: ['Y', 'N'][randomNumber(0, 1)]\n        })\n      }\n\n      this.dataSource = values\n      let end = Date.now()\n      let diff = end - begin\n\n      if (loading && diff < pageSize) {\n        setTimeout(() => {\n          this.loading = false\n        }, pageSize - diff)\n      }\n\n    }\n  }\n}\n",{"version":3,"sources":["JVxeDemo1.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"JVxeDemo1.vue","sourceRoot":"src/views/jeecg/JVxeDemo","sourcesContent":["<template>\r\n  <j-vxe-table\r\n    ref=\"vTable\"\r\n    toolbar\r\n    row-number\r\n    row-selection\r\n    drag-sort\r\n    keep-source\r\n    :height=\"580\"\r\n    :loading=\"loading\"\r\n    :dataSource=\"dataSource\"\r\n    :columns=\"columns\"\r\n    style=\"margin-top: 8px;\"\r\n    @valueChange=\"handleValueChange\"\r\n  >\r\n\r\n    <template v-slot:toolbarSuffix>\r\n      <a-button @click=\"handleTableCheck\">表单验证</a-button>\r\n      <a-tooltip placement=\"top\" title=\"获取值，忽略表单验证\" :autoAdjustOverflow=\"true\">\r\n        <a-button @click=\"handleTableGet\">获取值</a-button>\r\n      </a-tooltip>\r\n      <a-tooltip placement=\"top\" title=\"模拟加载1000条数据\" :autoAdjustOverflow=\"true\">\r\n        <a-button @click=\"handleTableSet\">设置值</a-button>\r\n      </a-tooltip>\r\n    </template>\r\n\r\n    <template v-slot:action=\"props\">\r\n      <a @click=\"handleCK(props)\">查看</a>\r\n      <a-divider type=\"vertical\"/>\r\n      <a-popconfirm title=\"确定删除吗？\" @confirm=\"handleDL(props)\">\r\n        <a>删除</a>\r\n      </a-popconfirm>\r\n    </template>\r\n\r\n  </j-vxe-table>\r\n</template>\r\n\r\n<script>\r\n  import moment from 'moment'\r\n  import { pushIfNotExist, randomNumber, randomUUID } from '@/utils/util'\r\n  import { JVXETypes } from '@/components/jeecg/JVxeTable'\r\n\r\n  export default {\r\n    name: 'JVxeDemo1',\r\n    data() {\r\n      return {\r\n        loading: false,\r\n        columns: [\r\n          {\r\n            title: '不可编辑',\r\n            key: 'normal',\r\n            type: JVXETypes.normal,\r\n            width: '180px',\r\n            fixed: 'left',\r\n            defaultValue: 'normal-new',\r\n          },\r\n          {\r\n            title: '单行文本',\r\n            key: 'input',\r\n            type: JVXETypes.input,\r\n            width: '180px',\r\n            defaultValue: '',\r\n            placeholder: '请输入${title}',\r\n            validateRules: [\r\n              {\r\n                required: true, // 必填\r\n                message: '请输入${title}' // 显示的文本\r\n              },\r\n              {\r\n                pattern: /^[a-z|A-Z][a-z|A-Z\\d_-]*$/, // 正则\r\n                message: '${title}必须以字母开头，可包含数字、下划线、横杠'\r\n              },\r\n              {\r\n                unique: true,\r\n                message: '${title}不能重复'\r\n              },\r\n              {\r\n                handler({cellValue, row, column}, callback, target) {\r\n                  // cellValue 当前校验的值\r\n                  // callback(flag, message) 方法必须执行且只能执行一次\r\n                  //          flag = 是否通过了校验，不填写或者填写 null 代表不进行任何操作\r\n                  //          message = 提示的类型，默认使用配置的 message\r\n                  // target 行编辑的实例对象\r\n                  if (cellValue === 'abc') {\r\n                    callback(false, '${title}不能是abc')  // false = 未通过校验\r\n                  } else {\r\n                    callback(true) // true = 通过验证\r\n                  }\r\n                },\r\n                message: '${title}默认提示'\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            title: '多行文本',\r\n            key: 'textarea',\r\n            type: JVXETypes.textarea,\r\n            width: '200px',\r\n          },\r\n          {\r\n            title: '数字',\r\n            key: 'number',\r\n            type: JVXETypes.inputNumber,\r\n            width: '80px',\r\n            defaultValue: 32,\r\n            // 【统计列】sum = 求和、average = 平均值\r\n            statistics: ['sum', 'average'],\r\n          },\r\n          {\r\n            title: '下拉框',\r\n            key: 'select',\r\n            type: JVXETypes.select,\r\n            width: '180px',\r\n            // 下拉选项\r\n            options: [\r\n              {title: 'String', value: 'string'},\r\n              {title: 'Integer', value: 'int'},\r\n              {title: 'Double', value: 'double'},\r\n              {title: 'Boolean', value: 'boolean'}\r\n            ],\r\n            allowInput: true,\r\n            placeholder: '请选择'\r\n          },\r\n          {\r\n            title: '下拉框_字典',\r\n            key: 'select_dict',\r\n            type: JVXETypes.select,\r\n            width: '180px',\r\n            options: [],\r\n            dictCode: 'sex',\r\n            placeholder: '请选择',\r\n          },\r\n          {\r\n            title: '下拉框_多选',\r\n            key: 'select_multiple',\r\n            type: JVXETypes.selectMultiple,\r\n            width: '205px',\r\n            options: [\r\n              {title: 'String', value: 'string'},\r\n              {title: 'Integer', value: 'int'},\r\n              {title: 'Double', value: 'double'},\r\n              {title: 'Boolean', value: 'boolean'}\r\n            ],\r\n            defaultValue: ['int', 'boolean'], // 多个默认项\r\n            // defaultValue: 'string,double,int', // 也可使用这种方式\r\n            placeholder: '多选',\r\n          },\r\n\r\n          {\r\n            title: '下拉框_搜索',\r\n            key: 'select_search',\r\n            type: JVXETypes.selectSearch,\r\n            width: '180px',\r\n            options: [\r\n              {title: 'String', value: 'string'},\r\n              {title: 'Integer', value: 'int'},\r\n              {title: 'Double', value: 'double'},\r\n              {title: 'Boolean', value: 'boolean'}\r\n            ],\r\n          },\r\n          {\r\n            title: '日期时间',\r\n            key: 'datetime',\r\n            type: JVXETypes.datetime,\r\n            width: '200px',\r\n            defaultValue: '2019-4-30 14:52:22',\r\n            placeholder: '请选择',\r\n          },\r\n          {\r\n            title: '复选框',\r\n            key: 'checkbox',\r\n            type: JVXETypes.checkbox,\r\n            width: '100px',\r\n            customValue: ['Y', 'N'], // true ,false\r\n            defaultChecked: false,\r\n          },\r\n          {\r\n            title: '操作',\r\n            key: 'action',\r\n            type: JVXETypes.slot,\r\n            fixed: 'right',\r\n            minWidth: '100px',\r\n            align: 'center',\r\n            slotName: 'action',\r\n          }\r\n        ],\r\n        dataSource: [],\r\n      }\r\n\r\n    },\r\n\r\n    created() {\r\n      this.randomPage(0, 20, true)\r\n    },\r\n    methods: {\r\n\r\n      handleCK(props) {\r\n        this.$message.success('请在控制台查看输出')\r\n        // 参数介绍：\r\n        // props.value          当前单元格的值\r\n        // props.row            当前行的数据\r\n        // props.rowId          当前行ID\r\n        // props.rowIndex       当前行下标\r\n        // props.column         当前列的配置\r\n        // props.columnIndex    当前列下标\r\n        // props.$table         vxe实例，可以调用vxe内置方法\r\n        // props.target         JVXE实例，可以调用JVXE内置方法\r\n        // props.caseId         JVXE实例唯一ID\r\n        // props.scrolling      是否正在滚动\r\n        // props.triggerChange  触发change事件，用于更改slot的值\r\n        console.log('查看: ', {props})\r\n      },\r\n\r\n      handleDL(props) {\r\n        // 调用删除方法\r\n        props.target.removeRows(props.row)\r\n      },\r\n\r\n      handleValueChange(event) {\r\n        console.log('handleValueChange.event: ', event)\r\n      },\r\n\r\n      /** 表单验证 */\r\n      handleTableCheck() {\r\n        this.$refs.vTable.validateTable().then(errMap => {\r\n          if (errMap) {\r\n            console.log('表单验证未通过：', {errMap})\r\n            this.$message.error('验证未通过，请在控制台查看详细')\r\n          } else {\r\n            this.$message.success('验证通过')\r\n          }\r\n        })\r\n      },\r\n\r\n      /** 获取值，忽略表单验证 */\r\n      handleTableGet() {\r\n        const values = this.$refs.vTable.getTableData()\r\n        console.log('获取值:', {values})\r\n        this.$message.success('获取值成功，请看控制台输出')\r\n      },\r\n\r\n      /** 模拟加载1000条数据 */\r\n      handleTableSet() {\r\n        this.randomPage(1, 1000, true)\r\n      },\r\n\r\n      /* 随机生成数据 */\r\n      randomPage(current, pageSize, loading = false) {\r\n        if (loading) {\r\n          this.loading = true\r\n        }\r\n\r\n        let randomDatetime = () => {\r\n          let time = randomNumber(1000, 9999999999999)\r\n          return moment(new Date(time)).format('YYYY-MM-DD HH:mm:ss')\r\n        }\r\n\r\n        let limit = (current - 1) * pageSize\r\n\r\n        let options = ['string', 'int', 'double', 'boolean']\r\n\r\n        let begin = Date.now()\r\n        let values = []\r\n        for (let i = 0; i < pageSize; i++) {\r\n          values.push({\r\n            id: randomUUID(),\r\n            normal: `normal-${(limit + i) + 1}`,\r\n            input: `text-${(limit + i) + 1}`,\r\n            textarea: `textarea-${(limit + i) + 1}`,\r\n            number: randomNumber(0, 233),\r\n            select: options[randomNumber(0, 3)],\r\n            select_dict: randomNumber(1, 2).toString(),\r\n            select_multiple: (() => {\r\n              let length = randomNumber(1, 4)\r\n              let arr = []\r\n              for (let j = 0; j < length; j++) {\r\n                pushIfNotExist(arr, options[randomNumber(0, 3)])\r\n              }\r\n              return arr\r\n            })(),\r\n            select_search: options[randomNumber(0, 3)],\r\n            datetime: randomDatetime(),\r\n            checkbox: ['Y', 'N'][randomNumber(0, 1)]\r\n          })\r\n        }\r\n\r\n        this.dataSource = values\r\n        let end = Date.now()\r\n        let diff = end - begin\r\n\r\n        if (loading && diff < pageSize) {\r\n          setTimeout(() => {\r\n            this.loading = false\r\n          }, pageSize - diff)\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}