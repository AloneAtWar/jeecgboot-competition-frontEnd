{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a\\ant-design-vue-jeecg\\src\\views\\user\\Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\views\\user\\Login.vue","mtime":1661074531323},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1657458571653}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Vue from 'vue'\r\nimport { ACCESS_TOKEN, ENCRYPTED_STRING } from '@/store/mutation-types'\r\nimport ThirdLogin from './third/ThirdLogin'\r\nimport LoginSelectTenant from './LoginSelectTenant'\r\nimport TwoStepCaptcha from '@/components/tools/TwoStepCaptcha'\r\nimport { getEncryptedString } from '@/utils/encryption/aesEncrypt'\r\nimport { timeFix } from '@/utils/util'\r\n\r\nimport LoginAccount from './LoginAccount'\r\nimport LoginPhone from './LoginPhone'\r\n\r\nexport default {\r\n    components: {\r\n      LoginSelectTenant,\r\n      TwoStepCaptcha,\r\n      ThirdLogin,\r\n      LoginAccount,\r\n      LoginPhone\r\n    },\r\n    data () {\r\n      return {\r\n        customActiveKey: 'tab1',\r\n        rememberMe: true,\r\n        loginBtn: false,\r\n        requiredTwoStepCaptcha: false,\r\n        stepCaptchaVisible: false,\r\n        encryptedString:{\r\n          key:\"\",\r\n          iv:\"\",\r\n        },\r\n      }\r\n    },\r\n    created() {\r\n      Vue.ls.remove(ACCESS_TOKEN)\r\n      this.getRouterData();\r\n      this.rememberMe = true\r\n    },\r\n    methods:{\r\n      handleTabClick(key){\r\n        this.customActiveKey = key\r\n      },\r\n      handleRememberMeChange(e){\r\n        this.rememberMe = e.target.checked\r\n      },\r\n      /**跳转到登录页面的参数-账号获取*/\r\n      getRouterData(){\r\n        this.$nextTick(() => {\r\n          let temp = this.$route.params.username || this.$route.query.username || ''\r\n          if (temp) {\r\n            this.$refs.alogin.acceptUsername(temp)\r\n          }\r\n        })\r\n      },\r\n\r\n      //登录\r\n      handleSubmit () {\r\n        this.loginBtn = true;\r\n        if (this.customActiveKey === 'tab1') {\r\n          // 使用账户密码登录\r\n          this.$refs.alogin.handleLogin(this.rememberMe)\r\n        } else {\r\n          //手机号码登录\r\n          this.$refs.plogin.handleLogin(this.rememberMe)\r\n        }\r\n      },\r\n      // 校验失败\r\n      validateFail(){\r\n        this.loginBtn = false;\r\n      },\r\n      // 登录后台成功\r\n      requestSuccess(loginResult){\r\n        this.$refs.loginSelect.show(loginResult)\r\n      },\r\n      //登录后台失败\r\n      requestFailed (err) {\r\n        let description = ((err.response || {}).data || {}).message || err.message || \"请求出现错误，请稍后再试\"\r\n        this.$notification[ 'error' ]({\r\n          message: '登录失败',\r\n          description: description,\r\n          duration: 4,\r\n        });\r\n        //账户密码登录错误后更新验证码\r\n        if(this.customActiveKey === 'tab1' && description.indexOf('密码错误')>0){\r\n          this.$refs.alogin.handleChangeCheckCode()\r\n        }\r\n        this.loginBtn = false;\r\n      },\r\n      loginSelectOk(){\r\n        this.loginSuccess()\r\n      },\r\n      //登录成功\r\n      loginSuccess () {\r\n        this.$router.push({ path: \"/dashboard/analysis\" }).catch(()=>{\r\n          console.log('登录跳转首页出错,这个错误从哪里来的')\r\n        })\r\n        this.$notification.success({\r\n          message: '欢迎',\r\n          description: `${timeFix()}，欢迎回来`,\r\n        });\r\n      },\r\n\r\n      stepCaptchaSuccess () {\r\n        this.loginSuccess()\r\n      },\r\n      stepCaptchaCancel () {\r\n        this.Logout().then(() => {\r\n          this.loginBtn = false\r\n          this.stepCaptchaVisible = false\r\n        })\r\n      },\r\n      //获取密码加密规则\r\n      getEncrypte(){\r\n        var encryptedString = Vue.ls.get(ENCRYPTED_STRING);\r\n        if(encryptedString == null){\r\n          getEncryptedString().then((data) => {\r\n            this.encryptedString = data\r\n          });\r\n        }else{\r\n          this.encryptedString = encryptedString;\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n",{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"Login.vue","sourceRoot":"src/views/user","sourcesContent":["<template>\r\n  <div class=\"main\">\r\n    <a-form-model class=\"user-layout-login\" @keyup.enter.native=\"handleSubmit\">\r\n      <a-tabs :activeKey=\"customActiveKey\" :tabBarStyle=\"{ textAlign: 'center', borderBottom: 'unset' }\"  @change=\"handleTabClick\">\r\n        <a-tab-pane key=\"tab1\" tab=\"账号密码登录\">\r\n          <login-account ref=\"alogin\" @validateFail=\"validateFail\" @success=\"requestSuccess\" @fail=\"requestFailed\"></login-account>\r\n        </a-tab-pane>\r\n\r\n        <a-tab-pane key=\"tab2\" tab=\"手机号登录\">\r\n          <login-phone ref=\"plogin\" @validateFail=\"validateFail\" @success=\"requestSuccess\" @fail=\"requestFailed\"></login-phone>\r\n        </a-tab-pane>\r\n      </a-tabs>\r\n\r\n      <a-form-model-item>\r\n        <a-checkbox @change=\"handleRememberMeChange\" default-checked>自动登录</a-checkbox>\r\n        <router-link :to=\"{ name: 'alteration'}\" class=\"forge-password\" style=\"float: right;\">\r\n          忘记密码\r\n        </router-link>\r\n        <router-link :to=\"{ name: 'register'}\" class=\"forge-password\" style=\"float: right;margin-right: 10px\" >\r\n          注册账户\r\n        </router-link>\r\n      </a-form-model-item>\r\n\r\n      <a-form-item style=\"margin-top:24px\">\r\n        <a-button size=\"large\"  type=\"primary\"  htmlType=\"submit\"  class=\"login-button\"  :loading=\"loginBtn\"  @click.stop.prevent=\"handleSubmit\" :disabled=\"loginBtn\">确定\r\n        </a-button>\r\n      </a-form-item>\r\n\r\n    </a-form-model>\r\n\r\n    <two-step-captcha v-if=\"requiredTwoStepCaptcha\" :visible=\"stepCaptchaVisible\" @success=\"stepCaptchaSuccess\" @cancel=\"stepCaptchaCancel\"></two-step-captcha>\r\n    <login-select-tenant ref=\"loginSelect\" @success=\"loginSelectOk\"></login-select-tenant>\r\n    <third-login ref=\"thirdLogin\"></third-login>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Vue from 'vue'\r\nimport { ACCESS_TOKEN, ENCRYPTED_STRING } from '@/store/mutation-types'\r\nimport ThirdLogin from './third/ThirdLogin'\r\nimport LoginSelectTenant from './LoginSelectTenant'\r\nimport TwoStepCaptcha from '@/components/tools/TwoStepCaptcha'\r\nimport { getEncryptedString } from '@/utils/encryption/aesEncrypt'\r\nimport { timeFix } from '@/utils/util'\r\n\r\nimport LoginAccount from './LoginAccount'\r\nimport LoginPhone from './LoginPhone'\r\n\r\nexport default {\r\n    components: {\r\n      LoginSelectTenant,\r\n      TwoStepCaptcha,\r\n      ThirdLogin,\r\n      LoginAccount,\r\n      LoginPhone\r\n    },\r\n    data () {\r\n      return {\r\n        customActiveKey: 'tab1',\r\n        rememberMe: true,\r\n        loginBtn: false,\r\n        requiredTwoStepCaptcha: false,\r\n        stepCaptchaVisible: false,\r\n        encryptedString:{\r\n          key:\"\",\r\n          iv:\"\",\r\n        },\r\n      }\r\n    },\r\n    created() {\r\n      Vue.ls.remove(ACCESS_TOKEN)\r\n      this.getRouterData();\r\n      this.rememberMe = true\r\n    },\r\n    methods:{\r\n      handleTabClick(key){\r\n        this.customActiveKey = key\r\n      },\r\n      handleRememberMeChange(e){\r\n        this.rememberMe = e.target.checked\r\n      },\r\n      /**跳转到登录页面的参数-账号获取*/\r\n      getRouterData(){\r\n        this.$nextTick(() => {\r\n          let temp = this.$route.params.username || this.$route.query.username || ''\r\n          if (temp) {\r\n            this.$refs.alogin.acceptUsername(temp)\r\n          }\r\n        })\r\n      },\r\n\r\n      //登录\r\n      handleSubmit () {\r\n        this.loginBtn = true;\r\n        if (this.customActiveKey === 'tab1') {\r\n          // 使用账户密码登录\r\n          this.$refs.alogin.handleLogin(this.rememberMe)\r\n        } else {\r\n          //手机号码登录\r\n          this.$refs.plogin.handleLogin(this.rememberMe)\r\n        }\r\n      },\r\n      // 校验失败\r\n      validateFail(){\r\n        this.loginBtn = false;\r\n      },\r\n      // 登录后台成功\r\n      requestSuccess(loginResult){\r\n        this.$refs.loginSelect.show(loginResult)\r\n      },\r\n      //登录后台失败\r\n      requestFailed (err) {\r\n        let description = ((err.response || {}).data || {}).message || err.message || \"请求出现错误，请稍后再试\"\r\n        this.$notification[ 'error' ]({\r\n          message: '登录失败',\r\n          description: description,\r\n          duration: 4,\r\n        });\r\n        //账户密码登录错误后更新验证码\r\n        if(this.customActiveKey === 'tab1' && description.indexOf('密码错误')>0){\r\n          this.$refs.alogin.handleChangeCheckCode()\r\n        }\r\n        this.loginBtn = false;\r\n      },\r\n      loginSelectOk(){\r\n        this.loginSuccess()\r\n      },\r\n      //登录成功\r\n      loginSuccess () {\r\n        this.$router.push({ path: \"/dashboard/analysis\" }).catch(()=>{\r\n          console.log('登录跳转首页出错,这个错误从哪里来的')\r\n        })\r\n        this.$notification.success({\r\n          message: '欢迎',\r\n          description: `${timeFix()}，欢迎回来`,\r\n        });\r\n      },\r\n\r\n      stepCaptchaSuccess () {\r\n        this.loginSuccess()\r\n      },\r\n      stepCaptchaCancel () {\r\n        this.Logout().then(() => {\r\n          this.loginBtn = false\r\n          this.stepCaptchaVisible = false\r\n        })\r\n      },\r\n      //获取密码加密规则\r\n      getEncrypte(){\r\n        var encryptedString = Vue.ls.get(ENCRYPTED_STRING);\r\n        if(encryptedString == null){\r\n          getEncryptedString().then((data) => {\r\n            this.encryptedString = data\r\n          });\r\n        }else{\r\n          this.encryptedString = encryptedString;\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n</script>\r\n<style lang=\"less\" scoped>\r\n  .user-layout-login {\r\n    label {\r\n      font-size: 14px;\r\n    }\r\n  .getCaptcha {\r\n      display: block;\r\n      width: 100%;\r\n      height: 40px;\r\n    }\r\n\r\n  .forge-password {\r\n      font-size: 14px;\r\n    }\r\n\r\n    button.login-button {\r\n      padding: 0 15px;\r\n      font-size: 16px;\r\n      height: 40px;\r\n      width: 100%;\r\n    }\r\n\r\n  .user-login-other {\r\n      text-align: left;\r\n      margin-top: 24px;\r\n      line-height: 22px;\r\n\r\n    .item-icon {\r\n        font-size: 24px;\r\n        color: rgba(0,0,0,.2);\r\n        margin-left: 16px;\r\n        vertical-align: middle;\r\n        cursor: pointer;\r\n        transition: color .3s;\r\n\r\n      &:hover {\r\n          color: #1890ff;\r\n        }\r\n      }\r\n\r\n    .register {\r\n        float: right;\r\n      }\r\n    }\r\n  }\r\n</style>\r\n<style>\r\n  .valid-error .ant-select-selection__placeholder{\r\n    color: #f5222d;\r\n  }\r\n</style>"]}]}