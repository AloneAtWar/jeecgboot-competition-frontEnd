{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a\\ant-design-vue-jeecg\\src\\components\\dict\\JMultiSelectTag.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\components\\dict\\JMultiSelectTag.vue","mtime":1661074531161},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1657458571653}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {ajaxGetDictItems,getDictItemsFromCache} from '@/api/api'\nexport default {\n  name: 'JMultiSelectTag',\n  props: {\n    dictCode: String,\n    placeholder: String,\n    disabled: Boolean,\n    value: String,\n    type: String,\n    options:Array,\n    spliter:{\n      type: String,\n      required: false,\n      default: ','\n    },\n    popContainer:{\n      type:String,\n      default:'',\n      required:false\n    },\n  },\n  data() {\n    return {\n      dictOptions: [],\n      tagType:\"\",\n      arrayValue:!this.value?[]:this.value.split(this.spliter)\n    }\n  },\n  created() {\n    if(!this.type || this.type===\"list_multi\"){\n      this.tagType = \"select\"\n    }else{\n      this.tagType = this.type\n    }\n    //获取字典数据\n    //this.initDictData();\n  },\n  watch:{\n    options: function(val){\n      this.setCurrentDictOptions(val);\n    },\n    dictCode:{\n      immediate:true,\n      handler() {\n        this.initDictData()\n      },\n    },\n    value (val) {\n      if(!val){\n        this.arrayValue = []\n      }else{\n        this.arrayValue = this.value.split(this.spliter)\n      }\n    }\n  },\n  methods: {\n    initDictData() {\n      if(this.options && this.options.length>0){\n        this.dictOptions = [...this.options]\n      }else{\n        //优先从缓存中读取字典配置\n        let cacheOption = getDictItemsFromCache(this.dictCode)\n        if(cacheOption && cacheOption.length>0){\n          this.dictOptions = cacheOption\n          return\n        }\n        //根据字典Code, 初始化字典数组\n        ajaxGetDictItems(this.dictCode, null).then((res) => {\n          if (res.success) {\n            this.dictOptions = res.result;\n          }\n        })\n      }\n\n    },\n    onChange (selectedValue) {\n      this.$emit('change', selectedValue.join(this.spliter));\n    },\n    setCurrentDictOptions(dictOptions){\n      this.dictOptions = dictOptions\n    },\n    getCurrentDictOptions(){\n      return this.dictOptions\n    },\n    getParentContainer(node){\n      if(!this.popContainer){\n        return node.parentNode\n      }else{\n        return document.querySelector(this.popContainer)\n      }\n    },\n    // update--begin--autor:lvdandan-----date:20201120------for：LOWCOD-1086 下拉多选框,搜索时只字典code进行搜索不能通过字典text搜索\n    filterOption(input, option) {\n      return option.componentOptions.children[0].children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    }\n    // update--end--autor:lvdandan-----date:20201120------for：LOWCOD-1086 下拉多选框,搜索时只字典code进行搜索不能通过字典text搜索\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n}\n",{"version":3,"sources":["JMultiSelectTag.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"JMultiSelectTag.vue","sourceRoot":"src/components/dict","sourcesContent":["<template>\r\n  <a-checkbox-group v-if=\"tagType=='checkbox'\" @change=\"onChange\" :value=\"arrayValue\" :disabled=\"disabled\">\r\n    <a-checkbox v-for=\"(item, key) in dictOptions\" :key=\"key\" :value=\"item.value\">{{ item.text || item.label }}</a-checkbox>\r\n  </a-checkbox-group>\r\n\r\n  <a-select\r\n    v-else-if=\"tagType=='select'\"\r\n    :value=\"arrayValue\"\r\n    @change=\"onChange\"\r\n    :disabled=\"disabled\"\r\n    mode=\"multiple\"\r\n    :placeholder=\"placeholder\"\r\n    :getPopupContainer=\"getParentContainer\"\r\n    optionFilterProp=\"children\"\r\n    :filterOption=\"filterOption\"\r\n    allowClear>\r\n    <a-select-option\r\n      v-for=\"(item,index) in dictOptions\"\r\n      :key=\"index\"\r\n      :value=\"item.value\">\r\n      <span style=\"display: inline-block;width: 100%\" :title=\" item.text || item.label \">\r\n        {{ item.text || item.label }}\r\n      </span>\r\n    </a-select-option>\r\n  </a-select>\r\n\r\n</template>\r\n\r\n<script>\r\n  import {ajaxGetDictItems,getDictItemsFromCache} from '@/api/api'\r\n  export default {\r\n    name: 'JMultiSelectTag',\r\n    props: {\r\n      dictCode: String,\r\n      placeholder: String,\r\n      disabled: Boolean,\r\n      value: String,\r\n      type: String,\r\n      options:Array,\r\n      spliter:{\r\n        type: String,\r\n        required: false,\r\n        default: ','\r\n      },\r\n      popContainer:{\r\n        type:String,\r\n        default:'',\r\n        required:false\r\n      },\r\n    },\r\n    data() {\r\n      return {\r\n        dictOptions: [],\r\n        tagType:\"\",\r\n        arrayValue:!this.value?[]:this.value.split(this.spliter)\r\n      }\r\n    },\r\n    created() {\r\n      if(!this.type || this.type===\"list_multi\"){\r\n        this.tagType = \"select\"\r\n      }else{\r\n        this.tagType = this.type\r\n      }\r\n      //获取字典数据\r\n      //this.initDictData();\r\n    },\r\n    watch:{\r\n      options: function(val){\r\n        this.setCurrentDictOptions(val);\r\n      },\r\n      dictCode:{\r\n        immediate:true,\r\n        handler() {\r\n          this.initDictData()\r\n        },\r\n      },\r\n      value (val) {\r\n        if(!val){\r\n          this.arrayValue = []\r\n        }else{\r\n          this.arrayValue = this.value.split(this.spliter)\r\n        }\r\n      }\r\n    },\r\n    methods: {\r\n      initDictData() {\r\n        if(this.options && this.options.length>0){\r\n          this.dictOptions = [...this.options]\r\n        }else{\r\n          //优先从缓存中读取字典配置\r\n          let cacheOption = getDictItemsFromCache(this.dictCode)\r\n          if(cacheOption && cacheOption.length>0){\r\n            this.dictOptions = cacheOption\r\n            return\r\n          }\r\n          //根据字典Code, 初始化字典数组\r\n          ajaxGetDictItems(this.dictCode, null).then((res) => {\r\n            if (res.success) {\r\n              this.dictOptions = res.result;\r\n            }\r\n          })\r\n        }\r\n\r\n      },\r\n      onChange (selectedValue) {\r\n        this.$emit('change', selectedValue.join(this.spliter));\r\n      },\r\n      setCurrentDictOptions(dictOptions){\r\n        this.dictOptions = dictOptions\r\n      },\r\n      getCurrentDictOptions(){\r\n        return this.dictOptions\r\n      },\r\n      getParentContainer(node){\r\n        if(!this.popContainer){\r\n          return node.parentNode\r\n        }else{\r\n          return document.querySelector(this.popContainer)\r\n        }\r\n      },\r\n      // update--begin--autor:lvdandan-----date:20201120------for：LOWCOD-1086 下拉多选框,搜索时只字典code进行搜索不能通过字典text搜索\r\n      filterOption(input, option) {\r\n        return option.componentOptions.children[0].children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n      }\r\n      // update--end--autor:lvdandan-----date:20201120------for：LOWCOD-1086 下拉多选框,搜索时只字典code进行搜索不能通过字典text搜索\r\n    },\r\n    model: {\r\n      prop: 'value',\r\n      event: 'change'\r\n    }\r\n  }\r\n</script>\r\n"]}]}