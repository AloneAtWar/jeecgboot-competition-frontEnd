{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a\\ant-design-vue-jeecg\\src\\components\\jeecg\\JVxeTable\\components\\cells\\JVxeSelectCell.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\components\\jeecg\\JVxeTable\\components\\cells\\JVxeSelectCell.vue","mtime":1661074531192},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1657458571653}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport JVxeCellMixins, { dispatchEvent } from '@/components/jeecg/JVxeTable/mixins/JVxeCellMixins'\nimport { JVXETypes } from '@comp/jeecg/JVxeTable/index'\nimport { filterDictText } from '@comp/dict/JDictSelectUtil'\n\nexport default {\n  name: 'JVxeSelectCell',\n  mixins: [JVxeCellMixins],\n  data(){\n    return {\n      loading: false,\n      // 异步加载的options（用于多级联动）\n      asyncOptions: null,\n    }\n  },\n  computed: {\n    selectProps() {\n      let props = {...this.cellProps}\n      // 判断select是否允许输入\n      let {allowSearch, allowInput} = this.originColumn\n      if (allowInput === true || allowSearch === true) {\n        props['showSearch'] = true\n      }\n      return props\n    },\n    // 下拉选项\n    selectOptions() {\n      if (this.asyncOptions) {\n        return this.asyncOptions\n      }\n      let {linkage} = this.renderOptions\n      if (linkage) {\n        let {getLinkageOptionsSibling, config} = linkage\n        let res = getLinkageOptionsSibling(this.row, this.originColumn, config, true)\n        // 当返回Promise时，说明是多级联动\n        if (res instanceof Promise) {\n          this.loading = true\n          res.then(opt => {\n            this.asyncOptions = opt\n            this.loading = false\n          }).catch(e => {\n            console.error(e)\n            this.loading = false\n          })\n        } else {\n          this.asyncOptions = null\n          return res\n        }\n      }\n      return this.originColumn.options\n    },\n  },\n  created() {\n    let multiple = [JVXETypes.selectMultiple, JVXETypes.list_multi]\n    let search = [JVXETypes.selectSearch, JVXETypes.sel_search]\n    if (multiple.includes(this.$type)) {\n      // 处理多选\n      let props = this.originColumn.props || {}\n      props['mode'] = 'multiple'\n      props['maxTagCount'] = 1\n      this.$set(this.originColumn, 'props', props)\n    } else if (search.includes(this.$type)) {\n      // 处理搜索\n      this.$set(this.originColumn, 'allowSearch', true)\n    }\n  },\n  methods: {\n\n    handleChange(value) {\n      // 处理下级联动\n      let linkage = this.renderOptions.linkage\n      if (linkage) {\n        linkage.linkageSelectChange(this.row, this.originColumn, linkage.config, value)\n      }\n      this.handleChangeCommon(value)\n    },\n\n    /** 处理blur失去焦点事件 */\n    handleBlur(value) {\n      let {allowInput, options} = this.originColumn\n\n      if (allowInput === true) {\n        // 删除无用的因搜索（用户输入）而创建的项\n        if (typeof value === 'string') {\n          let indexes = []\n          options.forEach((option, index) => {\n            if (option.value.toLocaleString() === value.toLocaleString()) {\n              delete option.searchAdd\n            } else if (option.searchAdd === true) {\n              indexes.push(index)\n            }\n          })\n          // 翻转删除数组中的项\n          for (let index of indexes.reverse()) {\n            options.splice(index, 1)\n          }\n        }\n      }\n\n      this.handleBlurCommon(value)\n    },\n\n    /** 用于搜索下拉框中的内容 */\n    handleSelectFilterOption(input, option) {\n      let {allowSearch, allowInput} = this.originColumn\n      if (allowSearch === true || allowInput === true) {\n        //update-begin-author:taoyan date:20200820 for:【专项任务】大连项目反馈行编辑问题处理 下拉框搜索\n        return option.componentOptions.children[0].children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n        //update-end-author:taoyan date:20200820 for:【专项任务】大连项目反馈行编辑问题处理 下拉框搜索\n      }\n      return true\n    },\n\n    /** select 搜索时的事件，用于动态添加options */\n    handleSearchSelect(value) {\n      let {allowSearch, allowInput, options} = this.originColumn\n\n      if (allowSearch !== true && allowInput === true) {\n        // 是否找到了对应的项，找不到则添加这一项\n        let flag = false\n        for (let option of options) {\n          if (option.value.toLocaleString() === value.toLocaleString()) {\n            flag = true\n            break\n          }\n        }\n        // !!value ：不添加空值\n        if (!flag && !!value) {\n          // searchAdd 是否是通过搜索添加的\n          options.push({title: value, value: value, searchAdd: true})\n        }\n\n      }\n    },\n\n  },\n  // 【组件增强】注释详见：JVxeCellMixins.js\n  enhanced: {\n    aopEvents: {\n      editActived(event) {\n        dispatchEvent.call(this, event, 'ant-select')\n      },\n    },\n    translate: {\n      enabled: true,\n      async handler(value,) {\n        let options\n        let {linkage} = this.renderOptions\n        // 判断是否是多级联动，如果是就通过接口异步翻译\n        if (linkage) {\n          let {getLinkageOptionsSibling, config} = linkage\n          options = getLinkageOptionsSibling(this.row, this.originColumn, config, true)\n          if (options instanceof Promise) {\n            return new Promise(resolve => {\n              options.then(opt => {\n                resolve(filterDictText(opt, value))\n              })\n            })\n          }\n        } else {\n          options = this.column.own.options\n        }\n        return filterDictText(options, value)\n      },\n    },\n    getValue(value) {\n      if (Array.isArray(value)) {\n        return value.join(',')\n      } else {\n        return value\n      }\n    },\n    setValue(value) {\n      let {column: {own: col}, params: {$table}} = this\n      // 判断是否是多选\n      if ((col.props || {})['mode'] === 'multiple') {\n        $table.$set(col.props, 'maxTagCount', 1)\n      }\n      if (value != null && value !== '') {\n        if (typeof value === 'string') {\n          return value === '' ? [] : value.split(',')\n        }\n        return value\n      } else {\n        return undefined\n      }\n    }\n  }\n}\n",{"version":3,"sources":["JVxeSelectCell.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"JVxeSelectCell.vue","sourceRoot":"src/components/jeecg/JVxeTable/components/cells","sourcesContent":["<template>\r\n  <a-select\r\n    ref=\"select\"\r\n    :value=\"innerValue\"\r\n    allowClear\r\n    :filterOption=\"handleSelectFilterOption\"\r\n    v-bind=\"selectProps\"\r\n    style=\"width: 100%;\"\r\n    @blur=\"handleBlur\"\r\n    @change=\"handleChange\"\r\n    @search=\"handleSearchSelect\"\r\n  >\r\n\r\n    <div v-if=\"loading\" slot=\"notFoundContent\">\r\n      <a-icon type=\"loading\"  />\r\n      <span>&nbsp;加载中…</span>\r\n    </div>\r\n\r\n    <template v-for=\"option of selectOptions\">\r\n      <a-select-option :key=\"option.value\" :value=\"option.value\" :disabled=\"option.disabled\">\r\n        <span>{{option.text || option.label || option.title|| option.value}}</span>\r\n      </a-select-option>\r\n    </template>\r\n\r\n  </a-select>\r\n</template>\r\n\r\n<script>\r\n  import JVxeCellMixins, { dispatchEvent } from '@/components/jeecg/JVxeTable/mixins/JVxeCellMixins'\r\n  import { JVXETypes } from '@comp/jeecg/JVxeTable/index'\r\n  import { filterDictText } from '@comp/dict/JDictSelectUtil'\r\n\r\n  export default {\r\n    name: 'JVxeSelectCell',\r\n    mixins: [JVxeCellMixins],\r\n    data(){\r\n      return {\r\n        loading: false,\r\n        // 异步加载的options（用于多级联动）\r\n        asyncOptions: null,\r\n      }\r\n    },\r\n    computed: {\r\n      selectProps() {\r\n        let props = {...this.cellProps}\r\n        // 判断select是否允许输入\r\n        let {allowSearch, allowInput} = this.originColumn\r\n        if (allowInput === true || allowSearch === true) {\r\n          props['showSearch'] = true\r\n        }\r\n        return props\r\n      },\r\n      // 下拉选项\r\n      selectOptions() {\r\n        if (this.asyncOptions) {\r\n          return this.asyncOptions\r\n        }\r\n        let {linkage} = this.renderOptions\r\n        if (linkage) {\r\n          let {getLinkageOptionsSibling, config} = linkage\r\n          let res = getLinkageOptionsSibling(this.row, this.originColumn, config, true)\r\n          // 当返回Promise时，说明是多级联动\r\n          if (res instanceof Promise) {\r\n            this.loading = true\r\n            res.then(opt => {\r\n              this.asyncOptions = opt\r\n              this.loading = false\r\n            }).catch(e => {\r\n              console.error(e)\r\n              this.loading = false\r\n            })\r\n          } else {\r\n            this.asyncOptions = null\r\n            return res\r\n          }\r\n        }\r\n        return this.originColumn.options\r\n      },\r\n    },\r\n    created() {\r\n      let multiple = [JVXETypes.selectMultiple, JVXETypes.list_multi]\r\n      let search = [JVXETypes.selectSearch, JVXETypes.sel_search]\r\n      if (multiple.includes(this.$type)) {\r\n        // 处理多选\r\n        let props = this.originColumn.props || {}\r\n        props['mode'] = 'multiple'\r\n        props['maxTagCount'] = 1\r\n        this.$set(this.originColumn, 'props', props)\r\n      } else if (search.includes(this.$type)) {\r\n        // 处理搜索\r\n        this.$set(this.originColumn, 'allowSearch', true)\r\n      }\r\n    },\r\n    methods: {\r\n\r\n      handleChange(value) {\r\n        // 处理下级联动\r\n        let linkage = this.renderOptions.linkage\r\n        if (linkage) {\r\n          linkage.linkageSelectChange(this.row, this.originColumn, linkage.config, value)\r\n        }\r\n        this.handleChangeCommon(value)\r\n      },\r\n\r\n      /** 处理blur失去焦点事件 */\r\n      handleBlur(value) {\r\n        let {allowInput, options} = this.originColumn\r\n\r\n        if (allowInput === true) {\r\n          // 删除无用的因搜索（用户输入）而创建的项\r\n          if (typeof value === 'string') {\r\n            let indexes = []\r\n            options.forEach((option, index) => {\r\n              if (option.value.toLocaleString() === value.toLocaleString()) {\r\n                delete option.searchAdd\r\n              } else if (option.searchAdd === true) {\r\n                indexes.push(index)\r\n              }\r\n            })\r\n            // 翻转删除数组中的项\r\n            for (let index of indexes.reverse()) {\r\n              options.splice(index, 1)\r\n            }\r\n          }\r\n        }\r\n\r\n        this.handleBlurCommon(value)\r\n      },\r\n\r\n      /** 用于搜索下拉框中的内容 */\r\n      handleSelectFilterOption(input, option) {\r\n        let {allowSearch, allowInput} = this.originColumn\r\n        if (allowSearch === true || allowInput === true) {\r\n          //update-begin-author:taoyan date:20200820 for:【专项任务】大连项目反馈行编辑问题处理 下拉框搜索\r\n          return option.componentOptions.children[0].children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          //update-end-author:taoyan date:20200820 for:【专项任务】大连项目反馈行编辑问题处理 下拉框搜索\r\n        }\r\n        return true\r\n      },\r\n\r\n      /** select 搜索时的事件，用于动态添加options */\r\n      handleSearchSelect(value) {\r\n        let {allowSearch, allowInput, options} = this.originColumn\r\n\r\n        if (allowSearch !== true && allowInput === true) {\r\n          // 是否找到了对应的项，找不到则添加这一项\r\n          let flag = false\r\n          for (let option of options) {\r\n            if (option.value.toLocaleString() === value.toLocaleString()) {\r\n              flag = true\r\n              break\r\n            }\r\n          }\r\n          // !!value ：不添加空值\r\n          if (!flag && !!value) {\r\n            // searchAdd 是否是通过搜索添加的\r\n            options.push({title: value, value: value, searchAdd: true})\r\n          }\r\n\r\n        }\r\n      },\r\n\r\n    },\r\n    // 【组件增强】注释详见：JVxeCellMixins.js\r\n    enhanced: {\r\n      aopEvents: {\r\n        editActived(event) {\r\n          dispatchEvent.call(this, event, 'ant-select')\r\n        },\r\n      },\r\n      translate: {\r\n        enabled: true,\r\n        async handler(value,) {\r\n          let options\r\n          let {linkage} = this.renderOptions\r\n          // 判断是否是多级联动，如果是就通过接口异步翻译\r\n          if (linkage) {\r\n            let {getLinkageOptionsSibling, config} = linkage\r\n            options = getLinkageOptionsSibling(this.row, this.originColumn, config, true)\r\n            if (options instanceof Promise) {\r\n              return new Promise(resolve => {\r\n                options.then(opt => {\r\n                  resolve(filterDictText(opt, value))\r\n                })\r\n              })\r\n            }\r\n          } else {\r\n            options = this.column.own.options\r\n          }\r\n          return filterDictText(options, value)\r\n        },\r\n      },\r\n      getValue(value) {\r\n        if (Array.isArray(value)) {\r\n          return value.join(',')\r\n        } else {\r\n          return value\r\n        }\r\n      },\r\n      setValue(value) {\r\n        let {column: {own: col}, params: {$table}} = this\r\n        // 判断是否是多选\r\n        if ((col.props || {})['mode'] === 'multiple') {\r\n          $table.$set(col.props, 'maxTagCount', 1)\r\n        }\r\n        if (value != null && value !== '') {\r\n          if (typeof value === 'string') {\r\n            return value === '' ? [] : value.split(',')\r\n          }\r\n          return value\r\n        } else {\r\n          return undefined\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}