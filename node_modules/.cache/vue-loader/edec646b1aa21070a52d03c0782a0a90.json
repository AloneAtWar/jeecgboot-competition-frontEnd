{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a\\ant-design-vue-jeecg\\src\\components\\jeecg\\modal\\JPopupOnlReport.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\components\\jeecg\\modal\\JPopupOnlReport.vue","mtime":1661074531203},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1657458571653}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getAction } from '@/api/manage'\nimport {filterObj} from '@/utils/util'\nimport { filterMultiDictText } from '@/components/dict/JDictSelectUtil'\nimport { httpGroupRequest } from '@/api/GroupRequest.js'\nimport md5 from 'md5'\n\nconst MODAL_WIDTH = 1200;\nexport default {\n  name: 'JPopupOnlReport',\n  props: ['multi', 'code', 'sorter', 'groupId', 'param'],\n  components:{\n  },\n  data(){\n    return {\n      visible:false,\n      title:\"\",\n      confirmLoading:false,\n      queryInfo:[],\n      toggleSearchStatus:false,\n      queryParam:{\n\n      },\n      dictOptions: {},\n      url: {\n        getColumns: '/online/cgreport/api/getRpColumns/',\n        getData: '/online/cgreport/api/getData/',\n        getQueryInfo: '/online/cgreport/api/getQueryInfo/'\n      },\n      table: {\n        loading: true,\n        // 表头\n        columns: [],\n        //数据集\n        dataSource: [],\n        // 选择器\n        selectedRowKeys: [],\n        selectionRows: [],\n        // 分页参数\n        pagination: {\n          current: 1,\n          pageSize: 10,\n          pageSizeOptions: ['10', '20', '30'],\n          showTotal: (total, range) => {\n            return range[0] + '-' + range[1] + ' 共' + total + '条'\n          },\n          showQuickJumper: true,\n          showSizeChanger: true,\n          total: 0\n        }\n      },\n      cgRpConfigId:\"\",\n      modalWidth:MODAL_WIDTH,\n      tableScroll:{x:true},\n      dynamicParam:{},\n      // 排序字段，默认无排序\n      iSorter: null,\n    }\n  },\n  mounted() {\n    //this.loadColumnsInfo()\n  },\n  watch: {\n    code() {\n      this.loadColumnsInfo()\n    },\n    param:{\n      deep:true,\n      handler(){\n        // update--begin--autor:liusq-----date:20210706------for：JPopup组件在modal中使用报错#2729------\n        if(this.visible){\n          this.dynamicParamHandler()\n          this.loadData();\n        }\n        // update--begin--autor:liusq-----date:20210706------for：JPopup组件在modal中使用报错#2729------\n      },\n    },\n    sorter: {\n      immediate: true,\n      handler() {\n        if (this.sorter) {\n          let arr = this.sorter.split('=')\n          if (arr.length === 2 && ['asc', 'desc'].includes(arr[1].toLowerCase())) {\n            this.iSorter = {column: arr[0], order: arr[1].toLowerCase()}\n            // 排序字段受控\n            this.table.columns.forEach(col => {\n              if (col.dataIndex === this.iSorter.column) {\n                this.$set(col, 'sortOrder', this.iSorter.order === 'asc' ? 'ascend' : 'descend')\n              } else {\n                this.$set(col, 'sortOrder', false)\n              }\n            })\n          } else {\n            console.warn('【JPopup】sorter参数不合法')\n          }\n        }\n      },\n    },\n  },\n  computed:{\n    showSearchFlag(){\n      return this.queryInfo && this.queryInfo.length>0\n    },\n    // 行选择框类型，根据是否多选来控制显示为单选框还是多选框\n    rowSelectionType() {\n      return this.multi ? 'checkbox' : 'radio'\n    },\n  },\n  methods:{\n    loadColumnsInfo(){\n      let url = `${this.url.getColumns}${this.code}`\n      //缓存key\n      let groupIdKey\n      if (this.groupId) {\n        groupIdKey = this.groupId + url\n      }\n      httpGroupRequest(() => getAction(url), groupIdKey).then(res => {\n        if(res.success){\n          this.initDictOptionData(res.result.dictOptions);\n          this.cgRpConfigId = res.result.cgRpConfigId\n          this.title = res.result.cgRpConfigName\n          let currColumns = res.result.columns\n          for(let a=0;a<currColumns.length;a++){\n            if(currColumns[a].customRender){\n              let dictCode = currColumns[a].customRender;\n              currColumns[a].customRender=(text)=>{\n                return filterMultiDictText(this.dictOptions[dictCode], text+\"\");\n              }\n            }\n            // 排序字段受控\n            if (this.iSorter && currColumns[a].dataIndex === this.iSorter.column) {\n              currColumns[a].sortOrder = this.iSorter.order === 'asc' ? 'ascend' : 'descend'\n            }\n          }\n          this.table.columns = [...currColumns]\n          this.initQueryInfo()\n        } else {\n          this.$error({\n            title: '出错了',\n            content: (<p>Popup初始化失败，请检查你的配置或稍后重试！<br/>错误信息如下：{res.message}</p>),\n            onOk: () => this.close(),\n          })\n        }\n      })\n    },\n    initQueryInfo() {\n      let url = `${this.url.getQueryInfo}${this.cgRpConfigId}`\n      //缓存key\n      let groupIdKey\n      if (this.groupId) {\n        groupIdKey = this.groupId + url\n      }\n      httpGroupRequest(() => getAction(url), groupIdKey).then((res) => {\n        // console.log(\"获取查询条件\", res);\n        if (res.success) {\n          this.dynamicParamHandler(res.result)\n          this.queryInfo = res.result\n          //查询条件加载后再请求数据\n          this.loadData(1)\n        } else {\n          this.$message.warning(res.message)\n        }\n      })\n    },\n    //处理动态参数\n    dynamicParamHandler(arr){\n      if(arr && arr.length>0){\n        //第一次加载查询条件前 初始化queryParam为空对象\n        let queryTemp = {}\n        for(let item of arr){\n          if(item.mode==='single'){\n            queryTemp[item.field] = ''\n          }\n        }\n        this.queryParam = {...queryTemp}\n      }\n      let dynamicTemp = {}\n      if(this.param){\n        Object.keys(this.param).map(key=>{\n          let str = this.param[key]\n          if(key in this.queryParam){\n            if(str && str.startsWith(\"'\") && str.endsWith(\"'\")){\n              str = str.substring(1,str.length-1)\n            }\n            //如果查询条件包含参数 设置值\n            this.queryParam[key]=str\n          }\n          dynamicTemp[key] = this.param[key]\n        })\n      }\n      this.dynamicParam = {...dynamicTemp}\n    },\n    loadData(arg) {\n      if (arg == 1) {\n        this.table.pagination.current = 1\n      }\n      let params = this.getQueryParams();//查询条件\n      this.table.loading = true\n      let url = `${this.url.getData}${this.cgRpConfigId}`\n      //缓存key\n      let groupIdKey\n      if (this.groupId) {\n        groupIdKey = this.groupId + url + JSON.stringify(params)\n      }\n      httpGroupRequest(() => getAction(url, params), groupIdKey).then(res => {\n        this.table.loading = false\n        // console.log(\"daa\",res)\n        let data = res.result\n        if (data) {\n          this.table.pagination.total = Number(data.total)\n          this.table.dataSource = data.records\n        } else {\n          this.table.pagination.total = 0\n          this.table.dataSource = []\n        }\n      })\n    },\n    getQueryParams() {\n      let paramTarget = {}\n      if(this.dynamicParam){\n        //处理自定义参数\n       Object.keys(this.dynamicParam).map(key=>{\n         paramTarget['self_'+key] = this.dynamicParam[key]\n       })\n      }\n      let param = Object.assign(paramTarget, this.queryParam, this.iSorter);\n      param.pageNo = this.table.pagination.current;\n      param.pageSize = this.table.pagination.pageSize;\n      return filterObj(param);\n    },\n    handleChangeInTableSelect(selectedRowKeys, selectionRows) {\n      //update-begin-author:taoyan date:2020902 for:【issue】开源online的几个问题 LOWCOD-844\n      if(!selectedRowKeys || selectedRowKeys.length==0){\n        this.table.selectionRows = []\n      }else if(selectedRowKeys.length == selectionRows.length){\n        this.table.selectionRows = selectionRows\n      }else{\n        //当两者长度不一的时候 需要判断\n        let keys = this.table.selectedRowKeys\n        let rows = this.table.selectionRows;\n        //这个循环 添加新的记录\n        for(let i=0;i<selectionRows.length;i++){\n          let combineKey = this.combineRowKey(selectionRows[i])\n          if(keys.indexOf(combineKey)<0){\n            //如果 原来的key 不包含当前记录 push\n            rows.push(selectionRows[i])\n          }\n        }\n        //这个循环 移除取消选中的数据\n        this.table.selectionRows = rows.filter(item=>{\n          let combineKey = this.combineRowKey(item)\n          return selectedRowKeys.indexOf(combineKey)>=0\n        })\n      }\n      //update-end-author:taoyan date:2020902 for:【issue】开源online的几个问题 LOWCOD-844\n      this.table.selectedRowKeys = selectedRowKeys\n    },\n    handleChangeInTable(pagination, filters, sorter) {\n      //分页、排序、筛选变化时触发\n      if (Object.keys(sorter).length > 0) {\n        this.iSorter = {\n          column: sorter.field,\n          order: 'ascend' === sorter.order ? 'asc' : 'desc'\n        }\n        // 排序字段受控\n        this.table.columns.forEach(col => {\n          if (col.dataIndex === sorter.field) {\n            this.$set(col, 'sortOrder',sorter.order)\n          } else {\n            this.$set(col, 'sortOrder', false)\n          }\n        })\n      }\n      this.table.pagination = pagination\n      this.loadData()\n    },\n    handleCancel() {\n      this.close()\n    },\n    handleSubmit() {\n      if(!this.multi){\n        if(this.table.selectionRows && this.table.selectionRows.length>1){\n          this.$message.warning(\"请选择一条记录\")\n          return false\n        }\n      }\n      if(!this.table.selectionRows || this.table.selectionRows.length==0){\n        this.$message.warning(\"请选择一条记录\")\n        return false\n      }\n      this.$emit('ok', this.table.selectionRows);\n      this.close()\n    },\n    close() {\n      this.$emit('close');\n      this.visible = false;\n      this.onClearSelected()\n    },\n    show(){\n      this.visible = true\n      this.loadColumnsInfo()\n    },\n    handleToggleSearch(){\n      this.toggleSearchStatus = !this.toggleSearchStatus;\n    },\n    searchByquery(){\n      this.loadData(1);\n    },\n    onlyReload(){\n      this.loadData();\n    },\n    searchReset(){\n      Object.keys(this.queryParam).forEach(key=>{\n        this.queryParam[key]=\"\"\n      })\n      this.loadData(1);\n    },\n    onClearSelected(){\n      this.table.selectedRowKeys = []\n      this.table.selectionRows = []\n    },\n    combineRowKey(record){\n      let res = ''\n       Object.keys(record).forEach(key=>{\n         //update-begin---author:liusq   Date:20210203  for：pop选择器列主键问题 issues/I29P9Q------------\n         if(key=='id'){\n           res=record[key]+res\n         }else{\n           res+=record[key]\n         }\n         //update-end---author:liusq     Date:20210203  for：pop选择器列主键问题 issues/I29P9Q------------\n       })\n      // update-begin---author:taoyan   Date:20211025 for：jpopup 表格key重复BUG /issues/3121\n      res = md5(res)\n      /*if(res.length>50){\n        res = res.substring(0,50)\n      }*/\n      // update-end---author:taoyan   Date:20211025 for：jpopup 表格key重复BUG /issues/3121\n      return res\n    },\n\n    clickThenCheck(record){\n      return {\n        on: {\n          click: () => {\n            let rowKey = this.combineRowKey(record)\n            if(!this.table.selectedRowKeys || this.table.selectedRowKeys.length==0){\n              let arr1=[],arr2=[]\n              arr1.push(record)\n              arr2.push(rowKey)\n              this.table.selectedRowKeys=arr2\n              this.table.selectionRows=arr1\n            }else{\n              if(this.table.selectedRowKeys.indexOf(rowKey)<0){\n                this.table.selectedRowKeys.push(rowKey)\n                this.table.selectionRows.push(record)\n              }else{\n                let rowKey_index = this.table.selectedRowKeys.indexOf(rowKey)\n                this.table.selectedRowKeys.splice(rowKey_index,1);\n                this.table.selectionRows.splice(rowKey_index,1);\n              }\n            }\n            // 判断是否允许多选，如果不允许多选，就只存储最后一个选中的行\n            if (!this.multi && this.table.selectedRowKeys.length > 1) {\n              this.table.selectionRows = [this.table.selectionRows.pop()]\n              this.table.selectedRowKeys = [this.table.selectedRowKeys.pop()]\n            }\n          }\n        }\n      }\n    },\n    //防止字典中有垃圾数据\n    initDictOptionData(dictOptions){\n      let obj = { }\n      Object.keys(dictOptions).map(k=>{\n        obj[k] = dictOptions[k].filter(item=>{\n          return item!=null\n        });\n      });\n      this.dictOptions  = obj\n    }\n\n  }\n}\n",{"version":3,"sources":["JPopupOnlReport.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"JPopupOnlReport.vue","sourceRoot":"src/components/jeecg/modal","sourcesContent":["<template>\r\n  <j-modal\r\n    :title=\"title\"\r\n    :width=\"modalWidth\"\r\n    :visible=\"visible\"\r\n    :confirmLoading=\"confirmLoading\"\r\n    switchFullscreen\r\n    wrapClassName=\"j-popup-modal\"\r\n    @ok=\"handleSubmit\"\r\n    @cancel=\"handleCancel\"\r\n    cancelText=\"关闭\">\r\n\r\n    <div class=\"table-page-search-wrapper\">\r\n      <a-form layout=\"inline\" @keyup.enter.native=\"searchByquery\">\r\n        <a-row :gutter=\"24\" v-if=\"showSearchFlag\">\r\n          <template v-for=\"(item,index) in queryInfo\">\r\n            <template v-if=\" item.hidden==='1' \">\r\n              <a-col :md=\"8\" :sm=\"24\" :key=\" 'query'+index \" v-show=\"toggleSearchStatus\">\r\n                <online-query-form-item :queryParam=\"queryParam\" :item=\"item\" :dictOptions=\"dictOptions\"></online-query-form-item>\r\n              </a-col>\r\n            </template>\r\n            <template v-else>\r\n              <a-col :md=\"8\" :sm=\"24\" :key=\" 'query'+index \">\r\n                <online-query-form-item :queryParam=\"queryParam\" :item=\"item\" :dictOptions=\"dictOptions\"></online-query-form-item>\r\n              </a-col>\r\n            </template>\r\n          </template>\r\n\r\n          <a-col :md=\"8\" :sm=\"8\">\r\n            <span style=\"float: left;overflow: hidden;\" class=\"table-page-search-submitButtons\">\r\n              <a-button type=\"primary\" @click=\"searchByquery\" icon=\"search\">查询</a-button>\r\n              <a-button type=\"primary\" @click=\"searchReset\" icon=\"reload\" style=\"margin-left: 8px\">重置</a-button>\r\n              <a @click=\"handleToggleSearch\" style=\"margin-left: 8px\">\r\n                {{ toggleSearchStatus ? '收起' : '展开' }}\r\n                <a-icon :type=\"toggleSearchStatus ? 'up' : 'down'\"/>\r\n              </a>\r\n            </span>\r\n          </a-col>\r\n\r\n        </a-row>\r\n      </a-form>\r\n    </div>\r\n\r\n    <div class=\"ant-alert ant-alert-info\" style=\"margin-bottom: 16px;\">\r\n      <i class=\"anticon anticon-info-circle ant-alert-icon\"></i>\r\n      已选择&nbsp;<a style=\"font-weight: 600\">{{ table.selectedRowKeys.length }}</a>项&nbsp;&nbsp;\r\n      <a style=\"margin-left: 24px\" @click=\"onClearSelected\">清空</a>\r\n\r\n      <a v-if=\"!showSearchFlag\" style=\"margin-left: 24px\" @click=\"onlyReload\">刷新</a>\r\n    </div>\r\n\r\n    <a-table\r\n      ref=\"table\"\r\n      size=\"middle\"\r\n      bordered\r\n      :rowKey=\"combineRowKey\"\r\n      :columns=\"table.columns\"\r\n      :dataSource=\"table.dataSource\"\r\n      :pagination=\"table.pagination\"\r\n      :loading=\"table.loading\"\r\n      :rowSelection=\"{type:rowSelectionType,fixed:true,selectedRowKeys: table.selectedRowKeys, onChange: handleChangeInTableSelect}\"\r\n      @change=\"handleChangeInTable\"\r\n      style=\"min-height: 300px\"\r\n      :scroll=\"tableScroll\"\r\n      :customRow=\"clickThenCheck\">\r\n    </a-table>\r\n\r\n\r\n  </j-modal>\r\n</template>\r\n\r\n<script>\r\n  import { getAction } from '@/api/manage'\r\n  import {filterObj} from '@/utils/util'\r\n  import { filterMultiDictText } from '@/components/dict/JDictSelectUtil'\r\n  import { httpGroupRequest } from '@/api/GroupRequest.js'\r\n  import md5 from 'md5'\r\n\r\n  const MODAL_WIDTH = 1200;\r\n  export default {\r\n    name: 'JPopupOnlReport',\r\n    props: ['multi', 'code', 'sorter', 'groupId', 'param'],\r\n    components:{\r\n    },\r\n    data(){\r\n      return {\r\n        visible:false,\r\n        title:\"\",\r\n        confirmLoading:false,\r\n        queryInfo:[],\r\n        toggleSearchStatus:false,\r\n        queryParam:{\r\n\r\n        },\r\n        dictOptions: {},\r\n        url: {\r\n          getColumns: '/online/cgreport/api/getRpColumns/',\r\n          getData: '/online/cgreport/api/getData/',\r\n          getQueryInfo: '/online/cgreport/api/getQueryInfo/'\r\n        },\r\n        table: {\r\n          loading: true,\r\n          // 表头\r\n          columns: [],\r\n          //数据集\r\n          dataSource: [],\r\n          // 选择器\r\n          selectedRowKeys: [],\r\n          selectionRows: [],\r\n          // 分页参数\r\n          pagination: {\r\n            current: 1,\r\n            pageSize: 10,\r\n            pageSizeOptions: ['10', '20', '30'],\r\n            showTotal: (total, range) => {\r\n              return range[0] + '-' + range[1] + ' 共' + total + '条'\r\n            },\r\n            showQuickJumper: true,\r\n            showSizeChanger: true,\r\n            total: 0\r\n          }\r\n        },\r\n        cgRpConfigId:\"\",\r\n        modalWidth:MODAL_WIDTH,\r\n        tableScroll:{x:true},\r\n        dynamicParam:{},\r\n        // 排序字段，默认无排序\r\n        iSorter: null,\r\n      }\r\n    },\r\n    mounted() {\r\n      //this.loadColumnsInfo()\r\n    },\r\n    watch: {\r\n      code() {\r\n        this.loadColumnsInfo()\r\n      },\r\n      param:{\r\n        deep:true,\r\n        handler(){\r\n          // update--begin--autor:liusq-----date:20210706------for：JPopup组件在modal中使用报错#2729------\r\n          if(this.visible){\r\n            this.dynamicParamHandler()\r\n            this.loadData();\r\n          }\r\n          // update--begin--autor:liusq-----date:20210706------for：JPopup组件在modal中使用报错#2729------\r\n        },\r\n      },\r\n      sorter: {\r\n        immediate: true,\r\n        handler() {\r\n          if (this.sorter) {\r\n            let arr = this.sorter.split('=')\r\n            if (arr.length === 2 && ['asc', 'desc'].includes(arr[1].toLowerCase())) {\r\n              this.iSorter = {column: arr[0], order: arr[1].toLowerCase()}\r\n              // 排序字段受控\r\n              this.table.columns.forEach(col => {\r\n                if (col.dataIndex === this.iSorter.column) {\r\n                  this.$set(col, 'sortOrder', this.iSorter.order === 'asc' ? 'ascend' : 'descend')\r\n                } else {\r\n                  this.$set(col, 'sortOrder', false)\r\n                }\r\n              })\r\n            } else {\r\n              console.warn('【JPopup】sorter参数不合法')\r\n            }\r\n          }\r\n        },\r\n      },\r\n    },\r\n    computed:{\r\n      showSearchFlag(){\r\n        return this.queryInfo && this.queryInfo.length>0\r\n      },\r\n      // 行选择框类型，根据是否多选来控制显示为单选框还是多选框\r\n      rowSelectionType() {\r\n        return this.multi ? 'checkbox' : 'radio'\r\n      },\r\n    },\r\n    methods:{\r\n      loadColumnsInfo(){\r\n        let url = `${this.url.getColumns}${this.code}`\r\n        //缓存key\r\n        let groupIdKey\r\n        if (this.groupId) {\r\n          groupIdKey = this.groupId + url\r\n        }\r\n        httpGroupRequest(() => getAction(url), groupIdKey).then(res => {\r\n          if(res.success){\r\n            this.initDictOptionData(res.result.dictOptions);\r\n            this.cgRpConfigId = res.result.cgRpConfigId\r\n            this.title = res.result.cgRpConfigName\r\n            let currColumns = res.result.columns\r\n            for(let a=0;a<currColumns.length;a++){\r\n              if(currColumns[a].customRender){\r\n                let dictCode = currColumns[a].customRender;\r\n                currColumns[a].customRender=(text)=>{\r\n                  return filterMultiDictText(this.dictOptions[dictCode], text+\"\");\r\n                }\r\n              }\r\n              // 排序字段受控\r\n              if (this.iSorter && currColumns[a].dataIndex === this.iSorter.column) {\r\n                currColumns[a].sortOrder = this.iSorter.order === 'asc' ? 'ascend' : 'descend'\r\n              }\r\n            }\r\n            this.table.columns = [...currColumns]\r\n            this.initQueryInfo()\r\n          } else {\r\n            this.$error({\r\n              title: '出错了',\r\n              content: (<p>Popup初始化失败，请检查你的配置或稍后重试！<br/>错误信息如下：{res.message}</p>),\r\n              onOk: () => this.close(),\r\n            })\r\n          }\r\n        })\r\n      },\r\n      initQueryInfo() {\r\n        let url = `${this.url.getQueryInfo}${this.cgRpConfigId}`\r\n        //缓存key\r\n        let groupIdKey\r\n        if (this.groupId) {\r\n          groupIdKey = this.groupId + url\r\n        }\r\n        httpGroupRequest(() => getAction(url), groupIdKey).then((res) => {\r\n          // console.log(\"获取查询条件\", res);\r\n          if (res.success) {\r\n            this.dynamicParamHandler(res.result)\r\n            this.queryInfo = res.result\r\n            //查询条件加载后再请求数据\r\n            this.loadData(1)\r\n          } else {\r\n            this.$message.warning(res.message)\r\n          }\r\n        })\r\n      },\r\n      //处理动态参数\r\n      dynamicParamHandler(arr){\r\n        if(arr && arr.length>0){\r\n          //第一次加载查询条件前 初始化queryParam为空对象\r\n          let queryTemp = {}\r\n          for(let item of arr){\r\n            if(item.mode==='single'){\r\n              queryTemp[item.field] = ''\r\n            }\r\n          }\r\n          this.queryParam = {...queryTemp}\r\n        }\r\n        let dynamicTemp = {}\r\n        if(this.param){\r\n          Object.keys(this.param).map(key=>{\r\n            let str = this.param[key]\r\n            if(key in this.queryParam){\r\n              if(str && str.startsWith(\"'\") && str.endsWith(\"'\")){\r\n                str = str.substring(1,str.length-1)\r\n              }\r\n              //如果查询条件包含参数 设置值\r\n              this.queryParam[key]=str\r\n            }\r\n            dynamicTemp[key] = this.param[key]\r\n          })\r\n        }\r\n        this.dynamicParam = {...dynamicTemp}\r\n      },\r\n      loadData(arg) {\r\n        if (arg == 1) {\r\n          this.table.pagination.current = 1\r\n        }\r\n        let params = this.getQueryParams();//查询条件\r\n        this.table.loading = true\r\n        let url = `${this.url.getData}${this.cgRpConfigId}`\r\n        //缓存key\r\n        let groupIdKey\r\n        if (this.groupId) {\r\n          groupIdKey = this.groupId + url + JSON.stringify(params)\r\n        }\r\n        httpGroupRequest(() => getAction(url, params), groupIdKey).then(res => {\r\n          this.table.loading = false\r\n          // console.log(\"daa\",res)\r\n          let data = res.result\r\n          if (data) {\r\n            this.table.pagination.total = Number(data.total)\r\n            this.table.dataSource = data.records\r\n          } else {\r\n            this.table.pagination.total = 0\r\n            this.table.dataSource = []\r\n          }\r\n        })\r\n      },\r\n      getQueryParams() {\r\n        let paramTarget = {}\r\n        if(this.dynamicParam){\r\n          //处理自定义参数\r\n         Object.keys(this.dynamicParam).map(key=>{\r\n           paramTarget['self_'+key] = this.dynamicParam[key]\r\n         })\r\n        }\r\n        let param = Object.assign(paramTarget, this.queryParam, this.iSorter);\r\n        param.pageNo = this.table.pagination.current;\r\n        param.pageSize = this.table.pagination.pageSize;\r\n        return filterObj(param);\r\n      },\r\n      handleChangeInTableSelect(selectedRowKeys, selectionRows) {\r\n        //update-begin-author:taoyan date:2020902 for:【issue】开源online的几个问题 LOWCOD-844\r\n        if(!selectedRowKeys || selectedRowKeys.length==0){\r\n          this.table.selectionRows = []\r\n        }else if(selectedRowKeys.length == selectionRows.length){\r\n          this.table.selectionRows = selectionRows\r\n        }else{\r\n          //当两者长度不一的时候 需要判断\r\n          let keys = this.table.selectedRowKeys\r\n          let rows = this.table.selectionRows;\r\n          //这个循环 添加新的记录\r\n          for(let i=0;i<selectionRows.length;i++){\r\n            let combineKey = this.combineRowKey(selectionRows[i])\r\n            if(keys.indexOf(combineKey)<0){\r\n              //如果 原来的key 不包含当前记录 push\r\n              rows.push(selectionRows[i])\r\n            }\r\n          }\r\n          //这个循环 移除取消选中的数据\r\n          this.table.selectionRows = rows.filter(item=>{\r\n            let combineKey = this.combineRowKey(item)\r\n            return selectedRowKeys.indexOf(combineKey)>=0\r\n          })\r\n        }\r\n        //update-end-author:taoyan date:2020902 for:【issue】开源online的几个问题 LOWCOD-844\r\n        this.table.selectedRowKeys = selectedRowKeys\r\n      },\r\n      handleChangeInTable(pagination, filters, sorter) {\r\n        //分页、排序、筛选变化时触发\r\n        if (Object.keys(sorter).length > 0) {\r\n          this.iSorter = {\r\n            column: sorter.field,\r\n            order: 'ascend' === sorter.order ? 'asc' : 'desc'\r\n          }\r\n          // 排序字段受控\r\n          this.table.columns.forEach(col => {\r\n            if (col.dataIndex === sorter.field) {\r\n              this.$set(col, 'sortOrder',sorter.order)\r\n            } else {\r\n              this.$set(col, 'sortOrder', false)\r\n            }\r\n          })\r\n        }\r\n        this.table.pagination = pagination\r\n        this.loadData()\r\n      },\r\n      handleCancel() {\r\n        this.close()\r\n      },\r\n      handleSubmit() {\r\n        if(!this.multi){\r\n          if(this.table.selectionRows && this.table.selectionRows.length>1){\r\n            this.$message.warning(\"请选择一条记录\")\r\n            return false\r\n          }\r\n        }\r\n        if(!this.table.selectionRows || this.table.selectionRows.length==0){\r\n          this.$message.warning(\"请选择一条记录\")\r\n          return false\r\n        }\r\n        this.$emit('ok', this.table.selectionRows);\r\n        this.close()\r\n      },\r\n      close() {\r\n        this.$emit('close');\r\n        this.visible = false;\r\n        this.onClearSelected()\r\n      },\r\n      show(){\r\n        this.visible = true\r\n        this.loadColumnsInfo()\r\n      },\r\n      handleToggleSearch(){\r\n        this.toggleSearchStatus = !this.toggleSearchStatus;\r\n      },\r\n      searchByquery(){\r\n        this.loadData(1);\r\n      },\r\n      onlyReload(){\r\n        this.loadData();\r\n      },\r\n      searchReset(){\r\n        Object.keys(this.queryParam).forEach(key=>{\r\n          this.queryParam[key]=\"\"\r\n        })\r\n        this.loadData(1);\r\n      },\r\n      onClearSelected(){\r\n        this.table.selectedRowKeys = []\r\n        this.table.selectionRows = []\r\n      },\r\n      combineRowKey(record){\r\n        let res = ''\r\n         Object.keys(record).forEach(key=>{\r\n           //update-begin---author:liusq   Date:20210203  for：pop选择器列主键问题 issues/I29P9Q------------\r\n           if(key=='id'){\r\n             res=record[key]+res\r\n           }else{\r\n             res+=record[key]\r\n           }\r\n           //update-end---author:liusq     Date:20210203  for：pop选择器列主键问题 issues/I29P9Q------------\r\n         })\r\n        // update-begin---author:taoyan   Date:20211025 for：jpopup 表格key重复BUG /issues/3121\r\n        res = md5(res)\r\n        /*if(res.length>50){\r\n          res = res.substring(0,50)\r\n        }*/\r\n        // update-end---author:taoyan   Date:20211025 for：jpopup 表格key重复BUG /issues/3121\r\n        return res\r\n      },\r\n\r\n      clickThenCheck(record){\r\n        return {\r\n          on: {\r\n            click: () => {\r\n              let rowKey = this.combineRowKey(record)\r\n              if(!this.table.selectedRowKeys || this.table.selectedRowKeys.length==0){\r\n                let arr1=[],arr2=[]\r\n                arr1.push(record)\r\n                arr2.push(rowKey)\r\n                this.table.selectedRowKeys=arr2\r\n                this.table.selectionRows=arr1\r\n              }else{\r\n                if(this.table.selectedRowKeys.indexOf(rowKey)<0){\r\n                  this.table.selectedRowKeys.push(rowKey)\r\n                  this.table.selectionRows.push(record)\r\n                }else{\r\n                  let rowKey_index = this.table.selectedRowKeys.indexOf(rowKey)\r\n                  this.table.selectedRowKeys.splice(rowKey_index,1);\r\n                  this.table.selectionRows.splice(rowKey_index,1);\r\n                }\r\n              }\r\n              // 判断是否允许多选，如果不允许多选，就只存储最后一个选中的行\r\n              if (!this.multi && this.table.selectedRowKeys.length > 1) {\r\n                this.table.selectionRows = [this.table.selectionRows.pop()]\r\n                this.table.selectedRowKeys = [this.table.selectedRowKeys.pop()]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      //防止字典中有垃圾数据\r\n      initDictOptionData(dictOptions){\r\n        let obj = { }\r\n        Object.keys(dictOptions).map(k=>{\r\n          obj[k] = dictOptions[k].filter(item=>{\r\n            return item!=null\r\n          });\r\n        });\r\n        this.dictOptions  = obj\r\n      }\r\n\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}