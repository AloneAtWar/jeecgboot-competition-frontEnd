{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a\\ant-design-vue-jeecg\\src\\components\\jeecg\\JSelectMultiple.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\components\\jeecg\\JSelectMultiple.vue","mtime":1661074531182},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1657458571653}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n//option {label:,value:}\nimport { getAction } from '@api/manage'\n\nexport default {\n  name: 'JSelectMultiple',\n  props: {\n    placeholder:{\n      type: String,\n      default:'',\n      required: false\n    },\n    value:{\n      type: String,\n      required: false\n    },\n    readOnly:{\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    options:{\n      type: Array,\n      default:()=>[],\n      required: false\n    },\n    triggerChange:{\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    spliter:{\n      type: String,\n      required: false,\n      default: ','\n    },\n    popContainer:{\n      type:String,\n      default:'',\n      required:false\n    },\n    dictCode:{\n      type:String,\n      required:false\n    },\n  },\n  data(){\n    return {\n      arrayValue:!this.value?[]:this.value.split(this.spliter),\n      dictOptions: [],\n    }\n  },\n  computed:{\n    selectOptions(){\n      return this.dictOptions.length > 0 ? this.dictOptions : this.options\n    },\n  },\n  watch:{\n    value (val) {\n      if(!val){\n        this.arrayValue = []\n      }else{\n        this.arrayValue = this.value.split(this.spliter)\n      }\n    }\n  },\n  mounted(){\n    if (this.dictCode) {\n      this.loadDictOptions()\n    }\n  },\n  methods:{\n    onChange (selectedValue) {\n      if(this.triggerChange){\n        this.$emit('change', selectedValue.join(this.spliter));\n      }else{\n        this.$emit('input', selectedValue.join(this.spliter));\n      }\n    },\n    getParentContainer(node){\n      if(!this.popContainer){\n        return node.parentNode\n      }else{\n        return document.querySelector(this.popContainer)\n      }\n    },\n    // 根据字典code查询字典项\n    loadDictOptions(){\n      getAction(`/sys/dict/getDictItems/${this.dictCode}`,{}).then(res=>{\n        if (res.success) {\n          this.dictOptions = res.result.map(item => ({value: item.value, label: item.text}))\n        } else {\n          console.error('getDictItems error: : ', res)\n          this.dictOptions = []\n        }\n      })\n    },\n  },\n\n}\n",{"version":3,"sources":["JSelectMultiple.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"JSelectMultiple.vue","sourceRoot":"src/components/jeecg","sourcesContent":["<template>\r\n  <a-select :value=\"arrayValue\" @change=\"onChange\" mode=\"multiple\" :placeholder=\"placeholder\" allowClear>\r\n    <a-select-option\r\n      v-for=\"(item,index) in selectOptions\"\r\n      :key=\"index\"\r\n      :getPopupContainer=\"getParentContainer\"\r\n      :value=\"item.value\">\r\n      {{ item.text || item.label }}\r\n    </a-select-option>\r\n  </a-select>\r\n</template>\r\n\r\n<script>\r\n  //option {label:,value:}\r\n  import { getAction } from '@api/manage'\r\n\r\n  export default {\r\n    name: 'JSelectMultiple',\r\n    props: {\r\n      placeholder:{\r\n        type: String,\r\n        default:'',\r\n        required: false\r\n      },\r\n      value:{\r\n        type: String,\r\n        required: false\r\n      },\r\n      readOnly:{\r\n        type: Boolean,\r\n        required: false,\r\n        default: false\r\n      },\r\n      options:{\r\n        type: Array,\r\n        default:()=>[],\r\n        required: false\r\n      },\r\n      triggerChange:{\r\n        type: Boolean,\r\n        required: false,\r\n        default: false\r\n      },\r\n      spliter:{\r\n        type: String,\r\n        required: false,\r\n        default: ','\r\n      },\r\n      popContainer:{\r\n        type:String,\r\n        default:'',\r\n        required:false\r\n      },\r\n      dictCode:{\r\n        type:String,\r\n        required:false\r\n      },\r\n    },\r\n    data(){\r\n      return {\r\n        arrayValue:!this.value?[]:this.value.split(this.spliter),\r\n        dictOptions: [],\r\n      }\r\n    },\r\n    computed:{\r\n      selectOptions(){\r\n        return this.dictOptions.length > 0 ? this.dictOptions : this.options\r\n      },\r\n    },\r\n    watch:{\r\n      value (val) {\r\n        if(!val){\r\n          this.arrayValue = []\r\n        }else{\r\n          this.arrayValue = this.value.split(this.spliter)\r\n        }\r\n      }\r\n    },\r\n    mounted(){\r\n      if (this.dictCode) {\r\n        this.loadDictOptions()\r\n      }\r\n    },\r\n    methods:{\r\n      onChange (selectedValue) {\r\n        if(this.triggerChange){\r\n          this.$emit('change', selectedValue.join(this.spliter));\r\n        }else{\r\n          this.$emit('input', selectedValue.join(this.spliter));\r\n        }\r\n      },\r\n      getParentContainer(node){\r\n        if(!this.popContainer){\r\n          return node.parentNode\r\n        }else{\r\n          return document.querySelector(this.popContainer)\r\n        }\r\n      },\r\n      // 根据字典code查询字典项\r\n      loadDictOptions(){\r\n        getAction(`/sys/dict/getDictItems/${this.dictCode}`,{}).then(res=>{\r\n          if (res.success) {\r\n            this.dictOptions = res.result.map(item => ({value: item.value, label: item.text}))\r\n          } else {\r\n            console.error('getDictItems error: : ', res)\r\n            this.dictOptions = []\r\n          }\r\n        })\r\n      },\r\n    },\r\n\r\n  }\r\n</script>\r\n"]}]}