{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\layout-demo\\ErpTemplate.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\layout-demo\\ErpTemplate.vue","mtime":1661074531268},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1657458571653}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { JVXETypes } from '@/components/jeecg/JVxeTable'\nimport { getAction } from '@api/manage'\n\nexport default {\n  name: 'ErpTemplate',\n  data() {\n    return {\n      toolbarConfig: {\n        // prefix 前缀；suffix 后缀\n        slot: ['prefix', 'suffix'],\n        // add 新增按钮；remove 删除按钮；clearSelection 清空选择按钮\n        btn: ['add', 'remove', 'clearSelection']\n      },\n\n      expandConfig: {\n        // 是否只能同时展开一行\n        accordion: true\n      },\n\n      // 子表 tabs\n      subTabs: {\n        show: false,\n        // 是否展开\n        expand: true,\n        // 是否自动展开\n        autoExpand: true,\n      },\n\n      table1: {\n        // 是否正在加载\n        loading: false,\n        // 分页器参数\n        pagination: {\n          // 当前页码\n          current: 1,\n          // 每页的条数\n          pageSize: 200,\n          // 可切换的条数\n          pageSizeOptions: ['10', '20', '30', '100', '200'],\n          // 数据总数（目前并不知道真实的总数，所以先填写0，在后台查出来后再赋值）\n          total: 0,\n          showTotal: (total, range) => {\n            // 此处为 jsx 语法\n            let text = <span>{range[0] + '-' + range[1] + ' 共 ' + total + ' 条'}</span>\n            // 判断子表是否显示，如果显示就渲染展开收起按钮\n            if (this.subTabs.show) {\n              let expand = (<span>\n              <a-button type=\"link\" onClick={this.handleToggleTabs}>\n                <a-icon type={this.subTabs.expand ? 'up' : 'down'}/>\n                <span>{this.subTabs.expand ? '收起' : '展开'}</span>\n              </a-button>\n              <a-checkbox vModel={this.subTabs.autoExpand}>自动展开</a-checkbox>\n            </span>)\n              // 返回多个dom用数组\n              return [expand, text]\n            } else {\n              // 直接返回单个dom\n              return text\n            }\n          },\n        },\n        // 选择的行\n        selectedRows: [],\n        // 数据源，控制表格的数据\n        dataSource: [],\n        // 列配置，控制表格显示的列\n        columns: [\n          {key: 'num', title: '序号', width: '80px'},\n          {\n            // 字段key，跟后台数据的字段名匹配\n            key: 'ship_name',\n            // 列的标题\n            title: '船名',\n            // 列的宽度\n            width: '180px',\n            // 如果加上了该属性，就代表当前单元格是可编辑的，type就是表单的类型，input就是简单的输入框\n            type: JVXETypes.input\n          },\n          {key: 'call', title: '呼叫', width: '990px', type: JVXETypes.input},\n          {key: 'len', title: '长', width: '80px', type: JVXETypes.inputNumber},\n          {key: 'ton', title: '吨', width: '120px', type: JVXETypes.inputNumber},\n          {key: 'payer', title: '付款方', width: '120px', type: JVXETypes.input},\n          {key: 'count', title: '数', width: '40px'},\n          {\n            key: 'company',\n            title: '公司',\n            // 最小宽度，与宽度不同的是，这个不是固定的宽度，如果表格有多余的空间，会平均分配给设置了 minWidth 的列\n            // 如果要做占满表格的列可以这么写\n            minWidth: '180px',\n            type: JVXETypes.input\n          },\n          {key: 'trend', title: '动向', width: '120px', type: JVXETypes.input},\n        ],\n      },\n      // 子级表的配置信息 （配置和主表的完全一致，就不写冗余的注释了）\n      table2: {\n        currentRowId: null,\n        loading: false,\n        pagination: {current: 1, pageSize: 10, pageSizeOptions: ['5', '10', '20', '30'], total: 0},\n        selectedRows: [],\n        dataSource: [],\n        columns: [\n          {key: 'dd_num', title: '调度序号', width: '120px'},\n          {key: 'tug', title: '拖轮', width: '180px', type: JVXETypes.input},\n          {key: 'work_start_time', title: '作业开始时间', width: '180px', type: JVXETypes.input},\n          {key: 'work_stop_time', title: '作业结束时间', width: '180px', type: JVXETypes.input},\n          {key: 'type', title: '船舶分类', width: '120px', type: JVXETypes.input},\n          {key: 'port_area', title: '所属港区', width: '120px', type: JVXETypes.input},\n        ],\n      },\n      currentSubRow: null,\n      // 查询url地址\n      url: {\n        getData: '/mock/vxe/getData',\n      },\n    }\n  },\n  computed: {\n    tableHeight() {\n      let {show, expand} = this.subTabs\n      return show ? (expand ? 350 : 482) : 482\n    },\n  },\n  created() {\n    this.loadTable1Data()\n  },\n  methods: {\n\n    // 加载table1【主表】的数据\n    loadTable1Data() {\n      // 封装查询条件\n      let formData = {\n        pageNo: this.table1.pagination.current,\n        pageSize: this.table1.pagination.pageSize\n      }\n      // 调用查询数据接口\n      this.table1.loading = true\n      getAction(this.url.getData, formData).then(res => {\n        if (res.success) {\n          // 后台查询回来的 total，数据总数量\n          this.table1.pagination.total = res.result.total\n          // 将查询的数据赋值给 dataSource\n          this.table1.dataSource = res.result.records\n          // 重置选择\n          this.table1.selectedRows = []\n        } else {\n          this.$error({title: '主表查询失败', content: res.message})\n        }\n      }).finally(() => {\n        // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n        this.table1.loading = false\n      })\n    },\n\n    // 查询子表数据\n    loadSubData(row) {\n      if (row) {\n        // 这里一定要做限制，限制不能重复查询，否者会出现死循环\n        if (this.table2.currentRowId === row.id) {\n          return true\n        }\n        this.table2.currentRowId = row.id\n        this.loadTable2Data()\n        return true\n      } else {\n        return false\n      }\n    },\n    // 查询子表数据\n    loadTable2Data() {\n      let table2 = this.table2\n      let formData = {\n        parentId: table2.currentRowId,\n        pageNo: this.table2.pagination.current,\n        pageSize: this.table2.pagination.pageSize\n      }\n      table2.loading = true\n      getAction(this.url.getData, formData).then(res => {\n        if (res.success) {\n          // 将查询的数据赋值给 dataSource\n          table2.selectedRows = []\n          table2.dataSource = res.result.records\n          table2.pagination.total = res.result.total\n        } else {\n          this.$error({title: '子表查询失败', content: res.message})\n        }\n      }).finally(() => {\n        // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n        table2.loading = false\n      })\n    },\n\n\n    // table1【主表】当选择的行变化时触发的事件\n    handleTable1SelectRowChange(event) {\n      this.table1.selectedRows = event.selectedRows\n      this.subTabs.show = true\n      if (this.subTabs.autoExpand) {\n        this.subTabs.expand = true\n      }\n      this.loadSubData(event.selectedRows[0])\n    },\n    // table2【子表】当选择的行变化时触发的事件\n    handleTable2SelectRowChange(event) {\n      this.table2.selectedRows = event.selectedRows\n    },\n\n    handleTable1PageChange(event) {\n      // 重新赋值\n      this.table1.pagination.current = event.current\n      this.table1.pagination.pageSize = event.pageSize\n      // 查询数据\n      this.loadTable1Data()\n    },\n    // 当table2【子表】分页参数变化时触发的事件\n    handleTable2PageChange(event) {\n      // 重新赋值\n      this.table2.pagination.current = event.current\n      this.table2.pagination.pageSize = event.pageSize\n      // 查询数据\n      this.loadTable2Data()\n    },\n\n    // 展开或收起子表tabs\n    handleToggleTabs() {\n      this.subTabs.expand = !this.subTabs.expand\n    },\n\n  },\n\n}\n",{"version":3,"sources":["ErpTemplate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA","file":"ErpTemplate.vue","sourceRoot":"src/views/jeecg/JVxeDemo/layout-demo","sourcesContent":["<template>\r\n\r\n  <a-card :bordered=\"false\">\r\n    <j-vxe-table\r\n      toolbar\r\n      :toolbarConfig=\"toolbarConfig\"\r\n\r\n      row-number\r\n      row-selection\r\n      row-selection-type=\"radio\"\r\n      highlight-current-row\r\n      click-select-row\r\n      :height=\"tableHeight\"\r\n      :loading=\"table1.loading\"\r\n      :columns=\"table1.columns\"\r\n      :dataSource=\"table1.dataSource\"\r\n      :pagination=\"table1.pagination\"\r\n      :expand-config=\"expandConfig\"\r\n      style=\"margin-bottom: 8px\"\r\n\r\n      @pageChange=\"handleTable1PageChange\"\r\n      @selectRowChange=\"handleTable1SelectRowChange\"\r\n    ></j-vxe-table>\r\n\r\n    <a-tabs v-show=\"subTabs.show\" :class=\"{'sub-tabs':true, 'un-expand': !subTabs.expand}\">\r\n      <a-tab-pane tab=\"子表1\" key=\"1\">\r\n        <j-vxe-table\r\n          toolbar\r\n          row-number\r\n          row-selection\r\n          height=\"auto\"\r\n          :maxHeight=\"350\"\r\n          :loading=\"table2.loading\"\r\n          :columns=\"table2.columns\"\r\n          :dataSource=\"table2.dataSource\"\r\n          :pagination=\"table2.pagination\"\r\n          @pageChange=\"handleTable2PageChange\"\r\n          @selectRowChange=\"handleTable2SelectRowChange\"\r\n        />\r\n      </a-tab-pane>\r\n      <a-tab-pane tab=\"子表2\" key=\"2\">\r\n        <h1>这里是子表2</h1>\r\n        <h1>这里是子表2</h1>\r\n        <h1>这里是子表2</h1>\r\n        <h1>这里是子表2</h1>\r\n        <h1>这里是子表2</h1>\r\n        <h1>这里是子表2</h1>\r\n      </a-tab-pane>\r\n    </a-tabs>\r\n\r\n  </a-card>\r\n</template>\r\n\r\n<script>\r\n  import { JVXETypes } from '@/components/jeecg/JVxeTable'\r\n  import { getAction } from '@api/manage'\r\n\r\n  export default {\r\n    name: 'ErpTemplate',\r\n    data() {\r\n      return {\r\n        toolbarConfig: {\r\n          // prefix 前缀；suffix 后缀\r\n          slot: ['prefix', 'suffix'],\r\n          // add 新增按钮；remove 删除按钮；clearSelection 清空选择按钮\r\n          btn: ['add', 'remove', 'clearSelection']\r\n        },\r\n\r\n        expandConfig: {\r\n          // 是否只能同时展开一行\r\n          accordion: true\r\n        },\r\n\r\n        // 子表 tabs\r\n        subTabs: {\r\n          show: false,\r\n          // 是否展开\r\n          expand: true,\r\n          // 是否自动展开\r\n          autoExpand: true,\r\n        },\r\n\r\n        table1: {\r\n          // 是否正在加载\r\n          loading: false,\r\n          // 分页器参数\r\n          pagination: {\r\n            // 当前页码\r\n            current: 1,\r\n            // 每页的条数\r\n            pageSize: 200,\r\n            // 可切换的条数\r\n            pageSizeOptions: ['10', '20', '30', '100', '200'],\r\n            // 数据总数（目前并不知道真实的总数，所以先填写0，在后台查出来后再赋值）\r\n            total: 0,\r\n            showTotal: (total, range) => {\r\n              // 此处为 jsx 语法\r\n              let text = <span>{range[0] + '-' + range[1] + ' 共 ' + total + ' 条'}</span>\r\n              // 判断子表是否显示，如果显示就渲染展开收起按钮\r\n              if (this.subTabs.show) {\r\n                let expand = (<span>\r\n                <a-button type=\"link\" onClick={this.handleToggleTabs}>\r\n                  <a-icon type={this.subTabs.expand ? 'up' : 'down'}/>\r\n                  <span>{this.subTabs.expand ? '收起' : '展开'}</span>\r\n                </a-button>\r\n                <a-checkbox vModel={this.subTabs.autoExpand}>自动展开</a-checkbox>\r\n              </span>)\r\n                // 返回多个dom用数组\r\n                return [expand, text]\r\n              } else {\r\n                // 直接返回单个dom\r\n                return text\r\n              }\r\n            },\r\n          },\r\n          // 选择的行\r\n          selectedRows: [],\r\n          // 数据源，控制表格的数据\r\n          dataSource: [],\r\n          // 列配置，控制表格显示的列\r\n          columns: [\r\n            {key: 'num', title: '序号', width: '80px'},\r\n            {\r\n              // 字段key，跟后台数据的字段名匹配\r\n              key: 'ship_name',\r\n              // 列的标题\r\n              title: '船名',\r\n              // 列的宽度\r\n              width: '180px',\r\n              // 如果加上了该属性，就代表当前单元格是可编辑的，type就是表单的类型，input就是简单的输入框\r\n              type: JVXETypes.input\r\n            },\r\n            {key: 'call', title: '呼叫', width: '990px', type: JVXETypes.input},\r\n            {key: 'len', title: '长', width: '80px', type: JVXETypes.inputNumber},\r\n            {key: 'ton', title: '吨', width: '120px', type: JVXETypes.inputNumber},\r\n            {key: 'payer', title: '付款方', width: '120px', type: JVXETypes.input},\r\n            {key: 'count', title: '数', width: '40px'},\r\n            {\r\n              key: 'company',\r\n              title: '公司',\r\n              // 最小宽度，与宽度不同的是，这个不是固定的宽度，如果表格有多余的空间，会平均分配给设置了 minWidth 的列\r\n              // 如果要做占满表格的列可以这么写\r\n              minWidth: '180px',\r\n              type: JVXETypes.input\r\n            },\r\n            {key: 'trend', title: '动向', width: '120px', type: JVXETypes.input},\r\n          ],\r\n        },\r\n        // 子级表的配置信息 （配置和主表的完全一致，就不写冗余的注释了）\r\n        table2: {\r\n          currentRowId: null,\r\n          loading: false,\r\n          pagination: {current: 1, pageSize: 10, pageSizeOptions: ['5', '10', '20', '30'], total: 0},\r\n          selectedRows: [],\r\n          dataSource: [],\r\n          columns: [\r\n            {key: 'dd_num', title: '调度序号', width: '120px'},\r\n            {key: 'tug', title: '拖轮', width: '180px', type: JVXETypes.input},\r\n            {key: 'work_start_time', title: '作业开始时间', width: '180px', type: JVXETypes.input},\r\n            {key: 'work_stop_time', title: '作业结束时间', width: '180px', type: JVXETypes.input},\r\n            {key: 'type', title: '船舶分类', width: '120px', type: JVXETypes.input},\r\n            {key: 'port_area', title: '所属港区', width: '120px', type: JVXETypes.input},\r\n          ],\r\n        },\r\n        currentSubRow: null,\r\n        // 查询url地址\r\n        url: {\r\n          getData: '/mock/vxe/getData',\r\n        },\r\n      }\r\n    },\r\n    computed: {\r\n      tableHeight() {\r\n        let {show, expand} = this.subTabs\r\n        return show ? (expand ? 350 : 482) : 482\r\n      },\r\n    },\r\n    created() {\r\n      this.loadTable1Data()\r\n    },\r\n    methods: {\r\n\r\n      // 加载table1【主表】的数据\r\n      loadTable1Data() {\r\n        // 封装查询条件\r\n        let formData = {\r\n          pageNo: this.table1.pagination.current,\r\n          pageSize: this.table1.pagination.pageSize\r\n        }\r\n        // 调用查询数据接口\r\n        this.table1.loading = true\r\n        getAction(this.url.getData, formData).then(res => {\r\n          if (res.success) {\r\n            // 后台查询回来的 total，数据总数量\r\n            this.table1.pagination.total = res.result.total\r\n            // 将查询的数据赋值给 dataSource\r\n            this.table1.dataSource = res.result.records\r\n            // 重置选择\r\n            this.table1.selectedRows = []\r\n          } else {\r\n            this.$error({title: '主表查询失败', content: res.message})\r\n          }\r\n        }).finally(() => {\r\n          // 这里是无论成功或失败都会执行的方法，在这里关闭loading\r\n          this.table1.loading = false\r\n        })\r\n      },\r\n\r\n      // 查询子表数据\r\n      loadSubData(row) {\r\n        if (row) {\r\n          // 这里一定要做限制，限制不能重复查询，否者会出现死循环\r\n          if (this.table2.currentRowId === row.id) {\r\n            return true\r\n          }\r\n          this.table2.currentRowId = row.id\r\n          this.loadTable2Data()\r\n          return true\r\n        } else {\r\n          return false\r\n        }\r\n      },\r\n      // 查询子表数据\r\n      loadTable2Data() {\r\n        let table2 = this.table2\r\n        let formData = {\r\n          parentId: table2.currentRowId,\r\n          pageNo: this.table2.pagination.current,\r\n          pageSize: this.table2.pagination.pageSize\r\n        }\r\n        table2.loading = true\r\n        getAction(this.url.getData, formData).then(res => {\r\n          if (res.success) {\r\n            // 将查询的数据赋值给 dataSource\r\n            table2.selectedRows = []\r\n            table2.dataSource = res.result.records\r\n            table2.pagination.total = res.result.total\r\n          } else {\r\n            this.$error({title: '子表查询失败', content: res.message})\r\n          }\r\n        }).finally(() => {\r\n          // 这里是无论成功或失败都会执行的方法，在这里关闭loading\r\n          table2.loading = false\r\n        })\r\n      },\r\n\r\n\r\n      // table1【主表】当选择的行变化时触发的事件\r\n      handleTable1SelectRowChange(event) {\r\n        this.table1.selectedRows = event.selectedRows\r\n        this.subTabs.show = true\r\n        if (this.subTabs.autoExpand) {\r\n          this.subTabs.expand = true\r\n        }\r\n        this.loadSubData(event.selectedRows[0])\r\n      },\r\n      // table2【子表】当选择的行变化时触发的事件\r\n      handleTable2SelectRowChange(event) {\r\n        this.table2.selectedRows = event.selectedRows\r\n      },\r\n\r\n      handleTable1PageChange(event) {\r\n        // 重新赋值\r\n        this.table1.pagination.current = event.current\r\n        this.table1.pagination.pageSize = event.pageSize\r\n        // 查询数据\r\n        this.loadTable1Data()\r\n      },\r\n      // 当table2【子表】分页参数变化时触发的事件\r\n      handleTable2PageChange(event) {\r\n        // 重新赋值\r\n        this.table2.pagination.current = event.current\r\n        this.table2.pagination.pageSize = event.pageSize\r\n        // 查询数据\r\n        this.loadTable2Data()\r\n      },\r\n\r\n      // 展开或收起子表tabs\r\n      handleToggleTabs() {\r\n        this.subTabs.expand = !this.subTabs.expand\r\n      },\r\n\r\n    },\r\n\r\n  }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n  .sub-tabs {\r\n    &.un-expand {\r\n      /deep/ .ant-tabs-content {\r\n        height: 0 !important;\r\n      }\r\n\r\n      /deep/ .ant-tabs-bar {\r\n        border-color: transparent !important;\r\n      }\r\n\r\n      /deep/ .ant-tabs-ink-bar {\r\n        background-color: transparent !important;\r\n      }\r\n\r\n      /deep/ .ant-tabs-tab {\r\n        display: none !important;\r\n      }\r\n    }\r\n  }\r\n</style>"]}]}