{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\demo\\SocketReload.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\demo\\SocketReload.vue","mtime":1661074531268},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1657458571653}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getAction } from '@api/manage'\nimport { JVXETypes } from '@/components/jeecg/JVxeTable'\n\n// 无痕刷新示例\nexport default {\n  name: 'SocketReload',\n  data() {\n    return {\n      loading: false,\n      dataSource: [],\n      columns: [\n        {key: 'num', title: '序号', width: '80px'},\n        {key: 'ship_name', title: '船名', width: '180px', type: JVXETypes.input},\n        {key: 'call', title: '呼叫', width: '80px', type: JVXETypes.input},\n        {key: 'len', title: '长', width: '80px', type: JVXETypes.input},\n        {key: 'ton', title: '吨', width: '120px', type: JVXETypes.input},\n        {key: 'payer', title: '付款方', width: '120px', type: JVXETypes.input},\n        {key: 'count', title: '数', width: '40px'},\n        {key: 'company', title: '公司', minWidth: '180px', type: JVXETypes.input},\n        {key: 'trend', title: '动向', width: '120px', type: JVXETypes.input},\n      ],\n      // 查询url地址\n      url: {\n        getData: '/mock/vxe/getData',\n      },\n      // 是否启用日历刷新效果\n      reloadEffect: false,\n    }\n  },\n  created() {\n    this.loadData()\n  },\n  methods: {\n    // 加载数据\n    loadData() {\n      let formData = {pageNo: 1, pageSize: 200}\n      this.loading = true\n      getAction(this.url.getData, formData).then(res => {\n        if (res.success) {\n          this.dataSource = res.result.records\n        } else {\n          this.$error({title: '主表查询失败', content: res.message})\n        }\n      }).finally(() => {\n        this.loading = false\n      })\n    },\n\n    // 单元格编辑完成之后触发的事件\n    handleEditClosed(event) {\n      let {$table, row, column} = event\n\n      let field = column.property\n      let cellValue = row[field]\n      // 判断单元格值是否被修改\n      if ($table.isUpdateByRow(row, field)) {\n        // 校验当前行\n        $table.validate(row).then((errMap) => {\n          // 校验通过\n          if (!errMap) {\n            // 【模拟保存】（此处需要替换成真实的请求）\n            let hideLoading = this.$message.loading(`正在保存\"${column.title}\"`, 0)\n            setTimeout(() => {\n              hideLoading()\n              this.$message.success(`\"${column.title}\"保存成功！`)\n              // 局部更新单元格为已保存状态\n              $table.reloadRow(row, null, field)\n              // 发送更新消息\n              this.$refs.table.socketSendUpdateRow(row)\n            }, 555)\n          }\n        })\n      }\n    },\n\n  },\n}\n",{"version":3,"sources":["SocketReload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"SocketReload.vue","sourceRoot":"src/views/jeecg/JVxeDemo/demo","sourcesContent":["<template>\r\n  <a-card title=\"无痕刷新示例\" :bordered=\"false\">\r\n\r\n    <div style=\"margin-bottom: 8px;\">\r\n      <span>启用数据变动特效：</span>\r\n      <a-switch v-model=\"reloadEffect\"/>\r\n    </div>\r\n\r\n    <!--\r\n      【即时保存大体思路】：\r\n      1. 该功能依赖于【即时保存】功能，请先看即时保存示例\r\n      2. 必须要有 socket-reload 属性，且设为 true\r\n      3. 必须要有 socket-key 属性，该属性为当前表格的唯一标识，\r\n         系统会自动更新所有 socket-key 相同的表格\r\n      4. 在局部保存 edit-closed 事件中，\r\n         保存成功后调用 socketSendUpdateRow 方法，将当前 row 传递过去即可 （见第 108 行）\r\n    -->\r\n    <j-vxe-table\r\n      ref=\"table\"\r\n      row-number\r\n      row-selection\r\n\r\n      keep-source\r\n      socket-reload\r\n      socket-key=\"demo-socket-reload\"\r\n      :reload-effect=\"reloadEffect\"\r\n\r\n      :height=\"340\"\r\n      :loading=\"loading\"\r\n      :columns=\"columns\"\r\n      :dataSource=\"dataSource\"\r\n      @edit-closed=\"handleEditClosed\"\r\n    />\r\n  </a-card>\r\n</template>\r\n\r\n<script>\r\n  import { getAction } from '@api/manage'\r\n  import { JVXETypes } from '@/components/jeecg/JVxeTable'\r\n\r\n  // 无痕刷新示例\r\n  export default {\r\n    name: 'SocketReload',\r\n    data() {\r\n      return {\r\n        loading: false,\r\n        dataSource: [],\r\n        columns: [\r\n          {key: 'num', title: '序号', width: '80px'},\r\n          {key: 'ship_name', title: '船名', width: '180px', type: JVXETypes.input},\r\n          {key: 'call', title: '呼叫', width: '80px', type: JVXETypes.input},\r\n          {key: 'len', title: '长', width: '80px', type: JVXETypes.input},\r\n          {key: 'ton', title: '吨', width: '120px', type: JVXETypes.input},\r\n          {key: 'payer', title: '付款方', width: '120px', type: JVXETypes.input},\r\n          {key: 'count', title: '数', width: '40px'},\r\n          {key: 'company', title: '公司', minWidth: '180px', type: JVXETypes.input},\r\n          {key: 'trend', title: '动向', width: '120px', type: JVXETypes.input},\r\n        ],\r\n        // 查询url地址\r\n        url: {\r\n          getData: '/mock/vxe/getData',\r\n        },\r\n        // 是否启用日历刷新效果\r\n        reloadEffect: false,\r\n      }\r\n    },\r\n    created() {\r\n      this.loadData()\r\n    },\r\n    methods: {\r\n      // 加载数据\r\n      loadData() {\r\n        let formData = {pageNo: 1, pageSize: 200}\r\n        this.loading = true\r\n        getAction(this.url.getData, formData).then(res => {\r\n          if (res.success) {\r\n            this.dataSource = res.result.records\r\n          } else {\r\n            this.$error({title: '主表查询失败', content: res.message})\r\n          }\r\n        }).finally(() => {\r\n          this.loading = false\r\n        })\r\n      },\r\n\r\n      // 单元格编辑完成之后触发的事件\r\n      handleEditClosed(event) {\r\n        let {$table, row, column} = event\r\n\r\n        let field = column.property\r\n        let cellValue = row[field]\r\n        // 判断单元格值是否被修改\r\n        if ($table.isUpdateByRow(row, field)) {\r\n          // 校验当前行\r\n          $table.validate(row).then((errMap) => {\r\n            // 校验通过\r\n            if (!errMap) {\r\n              // 【模拟保存】（此处需要替换成真实的请求）\r\n              let hideLoading = this.$message.loading(`正在保存\"${column.title}\"`, 0)\r\n              setTimeout(() => {\r\n                hideLoading()\r\n                this.$message.success(`\"${column.title}\"保存成功！`)\r\n                // 局部更新单元格为已保存状态\r\n                $table.reloadRow(row, null, field)\r\n                // 发送更新消息\r\n                this.$refs.table.socketSendUpdateRow(row)\r\n              }, 555)\r\n            }\r\n          })\r\n        }\r\n      },\r\n\r\n    },\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}