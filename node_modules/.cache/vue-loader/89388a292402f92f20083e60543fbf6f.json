{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a\\ant-design-vue-jeecg\\src\\components\\jeecgbiz\\thirdApp\\JThirdAppButton.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\components\\jeecgbiz\\thirdApp\\JThirdAppButton.vue","mtime":1661074531209},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1657458571653}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getAction } from '@/api/manage'\r\nimport { cloneObject } from '@/utils/util'\r\nimport JThirdAppDropdown from './JThirdAppDropdown'\r\n\r\nconst backEndUrl = {\r\n  // 获取启用的第三方App\r\n  getEnabledType: '/sys/thirdApp/getEnabledType',\r\n  // 企业微信\r\n  wechatEnterprise: {\r\n    user: '/sys/thirdApp/sync/wechatEnterprise/user',\r\n    depart: '/sys/thirdApp/sync/wechatEnterprise/depart',\r\n  },\r\n  // 钉钉\r\n  dingtalk: {\r\n    user: '/sys/thirdApp/sync/dingtalk/user',\r\n    depart: '/sys/thirdApp/sync/dingtalk/depart',\r\n  }\r\n}\r\n\r\nexport default {\r\n  name: 'JThirdAppButton',\r\n  components: {JThirdAppDropdown},\r\n  props: {\r\n    // 同步类型，可以是 user、depart\r\n    bizType: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    // 是否允许同步到第三方APP\r\n    syncToApp: Boolean,\r\n    // 是否允许第三方APP同步到本地\r\n    syncToLocal: Boolean,\r\n    // 选择的行\r\n    selectedRowKeys: Array,\r\n  },\r\n  data() {\r\n    return {\r\n      enabledTypes: {},\r\n      attrs: {\r\n        dingtalk: {},\r\n      },\r\n    }\r\n  },\r\n  computed: {\r\n    bindAttrs() {\r\n      return {\r\n        syncToApp: this.syncToApp,\r\n        syncToLocal: this.syncToLocal\r\n      }\r\n    },\r\n    bindEvents() {\r\n      return {\r\n        'to-app': this.onToApp,\r\n        'to-local': this.onToLocal,\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    this.loadEnabledTypes()\r\n  },\r\n  methods: {\r\n    handleMenuClick() {\r\n      console.log(arguments)\r\n    },\r\n    onToApp(e) {\r\n      this.doSync(e.type, '/toApp')\r\n    },\r\n    onToLocal(e) {\r\n      this.doSync(e.type, '/toLocal')\r\n    },\r\n    // 获取启用的第三方App\r\n    async loadEnabledTypes() {\r\n      this.enabledTypes = await loadEnabledTypes()\r\n    },\r\n    // 开始同步第三方App\r\n    doSync(type, direction) {\r\n      let urls = backEndUrl[type]\r\n      if (!(urls && urls[this.bizType])) {\r\n        console.warn('配置出错')\r\n        return\r\n      }\r\n      let url = urls[this.bizType] + direction\r\n\r\n      let selectedRowKeys = this.selectedRowKeys\r\n      let content = '确定要开始同步全部数据吗？可能花费较长时间！'\r\n      if (Array.isArray(selectedRowKeys) && selectedRowKeys.length > 0) {\r\n        content = `确定要开始同步这 ${selectedRowKeys.length} 项吗？`\r\n      } else {\r\n        selectedRowKeys = []\r\n      }\r\n      return new Promise((resolve, reject) => {\r\n        let model = this.$confirm({\r\n          title: '同步',\r\n          content,\r\n          onOk: () => {\r\n            model.update({\r\n              keyboard: false,\r\n              okText: '同步中…',\r\n              cancelButtonProps: {props: {disabled: true}}\r\n            })\r\n            return getAction(url, {\r\n              ids: selectedRowKeys.join(',')\r\n            }).then(res => {\r\n              let options = null\r\n              if (res.result) {\r\n                options = {\r\n                  width: 600,\r\n                  title: res.message,\r\n                  content: (h) => {\r\n                    let nodes\r\n                    let successInfo = [\r\n                      `成功信息如下：`,\r\n                      this.renderTextarea(h, res.result.successInfo.map((v, i) => `${i + 1}. ${v}`).join('\\n')),\r\n                    ]\r\n                    if (res.success) {\r\n                      nodes = [\r\n                        ...successInfo,\r\n                        h('br'),\r\n                        `无失败信息！`,\r\n                      ]\r\n                    } else {\r\n                      nodes = [\r\n                        `失败信息如下：`,\r\n                        this.renderTextarea(h, res.result.failInfo.map((v, i) => `${i + 1}. ${v}`).join('\\n')),\r\n                        h('br'),\r\n                        ...successInfo,\r\n                      ]\r\n                    }\r\n                    return nodes\r\n                  }\r\n                }\r\n              }\r\n              if (res.success) {\r\n                if (options != null) {\r\n                  this.$success(options)\r\n                } else {\r\n                  this.$message.success(res.message)\r\n                }\r\n                this.$emit('sync-ok')\r\n              } else {\r\n                if (options != null) {\r\n                  this.$warning(options)\r\n                } else {\r\n                  this.$message.warning(res.message)\r\n                }\r\n                this.$emit('sync-error')\r\n              }\r\n            }).catch(() => model.destroy()).finally(() => {\r\n              resolve()\r\n              this.$emit('sync-finally', {\r\n                type,\r\n                direction,\r\n                isToApp: direction === '/toApp',\r\n                isToLocal: direction === '/toLocal',\r\n              })\r\n            })\r\n          },\r\n          onCancel() {\r\n            resolve()\r\n          },\r\n        })\r\n      })\r\n    },\r\n    renderTextarea(h, value) {\r\n      return h('a-textarea', {\r\n        props: {\r\n          value: value,\r\n          readOnly: true,\r\n          autosize: {minRows: 5, maxRows: 10},\r\n        },\r\n        style: {\r\n          // 关闭textarea的自动换行，使其可以左右滚动\r\n          whiteSpace: 'pre',\r\n          overflow: 'auto',\r\n        }\r\n      })\r\n    }\r\n  },\r\n}\r\n\r\n// 启用了哪些第三方App（在此缓存）\r\nlet enabledTypes = null\r\n\r\n// 获取启用的第三方App\r\nexport async function loadEnabledTypes() {\r\n  // 获取缓存\r\n  if (enabledTypes != null) {\r\n    return cloneObject(enabledTypes)\r\n  } else {\r\n    let {success, result} = await getAction(backEndUrl.getEnabledType)\r\n    if (success) {\r\n      // 在此缓存\r\n      enabledTypes = cloneObject(result)\r\n      return result\r\n    } else {\r\n      console.warn('getEnabledType查询失败：', res)\r\n    }\r\n  }\r\n  return {}\r\n}\r\n",{"version":3,"sources":["JThirdAppButton.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"JThirdAppButton.vue","sourceRoot":"src/components/jeecgbiz/thirdApp","sourcesContent":["<template>\r\n  <span v-if=\"syncToApp || syncToLocal\">\r\n    <j-third-app-dropdown v-if=\"enabledTypes.wechatEnterprise\" type=\"wechatEnterprise\" name=\"企微\" v-bind=\"bindAttrs\" v-on=\"bindEvents\"/>\r\n    <j-third-app-dropdown v-if=\"enabledTypes.dingtalk\" type=\"dingtalk\" name=\"钉钉\" v-bind=\"bindAttrs\" v-on=\"bindEvents\"/>\r\n  </span>\r\n  <span v-else>未设置任何同步方向</span>\r\n</template>\r\n\r\n<script>\r\nimport { getAction } from '@/api/manage'\r\nimport { cloneObject } from '@/utils/util'\r\nimport JThirdAppDropdown from './JThirdAppDropdown'\r\n\r\nconst backEndUrl = {\r\n  // 获取启用的第三方App\r\n  getEnabledType: '/sys/thirdApp/getEnabledType',\r\n  // 企业微信\r\n  wechatEnterprise: {\r\n    user: '/sys/thirdApp/sync/wechatEnterprise/user',\r\n    depart: '/sys/thirdApp/sync/wechatEnterprise/depart',\r\n  },\r\n  // 钉钉\r\n  dingtalk: {\r\n    user: '/sys/thirdApp/sync/dingtalk/user',\r\n    depart: '/sys/thirdApp/sync/dingtalk/depart',\r\n  }\r\n}\r\n\r\nexport default {\r\n  name: 'JThirdAppButton',\r\n  components: {JThirdAppDropdown},\r\n  props: {\r\n    // 同步类型，可以是 user、depart\r\n    bizType: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    // 是否允许同步到第三方APP\r\n    syncToApp: Boolean,\r\n    // 是否允许第三方APP同步到本地\r\n    syncToLocal: Boolean,\r\n    // 选择的行\r\n    selectedRowKeys: Array,\r\n  },\r\n  data() {\r\n    return {\r\n      enabledTypes: {},\r\n      attrs: {\r\n        dingtalk: {},\r\n      },\r\n    }\r\n  },\r\n  computed: {\r\n    bindAttrs() {\r\n      return {\r\n        syncToApp: this.syncToApp,\r\n        syncToLocal: this.syncToLocal\r\n      }\r\n    },\r\n    bindEvents() {\r\n      return {\r\n        'to-app': this.onToApp,\r\n        'to-local': this.onToLocal,\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    this.loadEnabledTypes()\r\n  },\r\n  methods: {\r\n    handleMenuClick() {\r\n      console.log(arguments)\r\n    },\r\n    onToApp(e) {\r\n      this.doSync(e.type, '/toApp')\r\n    },\r\n    onToLocal(e) {\r\n      this.doSync(e.type, '/toLocal')\r\n    },\r\n    // 获取启用的第三方App\r\n    async loadEnabledTypes() {\r\n      this.enabledTypes = await loadEnabledTypes()\r\n    },\r\n    // 开始同步第三方App\r\n    doSync(type, direction) {\r\n      let urls = backEndUrl[type]\r\n      if (!(urls && urls[this.bizType])) {\r\n        console.warn('配置出错')\r\n        return\r\n      }\r\n      let url = urls[this.bizType] + direction\r\n\r\n      let selectedRowKeys = this.selectedRowKeys\r\n      let content = '确定要开始同步全部数据吗？可能花费较长时间！'\r\n      if (Array.isArray(selectedRowKeys) && selectedRowKeys.length > 0) {\r\n        content = `确定要开始同步这 ${selectedRowKeys.length} 项吗？`\r\n      } else {\r\n        selectedRowKeys = []\r\n      }\r\n      return new Promise((resolve, reject) => {\r\n        let model = this.$confirm({\r\n          title: '同步',\r\n          content,\r\n          onOk: () => {\r\n            model.update({\r\n              keyboard: false,\r\n              okText: '同步中…',\r\n              cancelButtonProps: {props: {disabled: true}}\r\n            })\r\n            return getAction(url, {\r\n              ids: selectedRowKeys.join(',')\r\n            }).then(res => {\r\n              let options = null\r\n              if (res.result) {\r\n                options = {\r\n                  width: 600,\r\n                  title: res.message,\r\n                  content: (h) => {\r\n                    let nodes\r\n                    let successInfo = [\r\n                      `成功信息如下：`,\r\n                      this.renderTextarea(h, res.result.successInfo.map((v, i) => `${i + 1}. ${v}`).join('\\n')),\r\n                    ]\r\n                    if (res.success) {\r\n                      nodes = [\r\n                        ...successInfo,\r\n                        h('br'),\r\n                        `无失败信息！`,\r\n                      ]\r\n                    } else {\r\n                      nodes = [\r\n                        `失败信息如下：`,\r\n                        this.renderTextarea(h, res.result.failInfo.map((v, i) => `${i + 1}. ${v}`).join('\\n')),\r\n                        h('br'),\r\n                        ...successInfo,\r\n                      ]\r\n                    }\r\n                    return nodes\r\n                  }\r\n                }\r\n              }\r\n              if (res.success) {\r\n                if (options != null) {\r\n                  this.$success(options)\r\n                } else {\r\n                  this.$message.success(res.message)\r\n                }\r\n                this.$emit('sync-ok')\r\n              } else {\r\n                if (options != null) {\r\n                  this.$warning(options)\r\n                } else {\r\n                  this.$message.warning(res.message)\r\n                }\r\n                this.$emit('sync-error')\r\n              }\r\n            }).catch(() => model.destroy()).finally(() => {\r\n              resolve()\r\n              this.$emit('sync-finally', {\r\n                type,\r\n                direction,\r\n                isToApp: direction === '/toApp',\r\n                isToLocal: direction === '/toLocal',\r\n              })\r\n            })\r\n          },\r\n          onCancel() {\r\n            resolve()\r\n          },\r\n        })\r\n      })\r\n    },\r\n    renderTextarea(h, value) {\r\n      return h('a-textarea', {\r\n        props: {\r\n          value: value,\r\n          readOnly: true,\r\n          autosize: {minRows: 5, maxRows: 10},\r\n        },\r\n        style: {\r\n          // 关闭textarea的自动换行，使其可以左右滚动\r\n          whiteSpace: 'pre',\r\n          overflow: 'auto',\r\n        }\r\n      })\r\n    }\r\n  },\r\n}\r\n\r\n// 启用了哪些第三方App（在此缓存）\r\nlet enabledTypes = null\r\n\r\n// 获取启用的第三方App\r\nexport async function loadEnabledTypes() {\r\n  // 获取缓存\r\n  if (enabledTypes != null) {\r\n    return cloneObject(enabledTypes)\r\n  } else {\r\n    let {success, result} = await getAction(backEndUrl.getEnabledType)\r\n    if (success) {\r\n      // 在此缓存\r\n      enabledTypes = cloneObject(result)\r\n      return result\r\n    } else {\r\n      console.warn('getEnabledType查询失败：', res)\r\n    }\r\n  }\r\n  return {}\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}