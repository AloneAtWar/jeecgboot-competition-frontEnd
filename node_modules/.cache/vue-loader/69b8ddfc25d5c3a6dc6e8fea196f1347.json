{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\layout-demo\\Template1.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\views\\jeecg\\JVxeDemo\\layout-demo\\Template1.vue","mtime":1661074531269},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1657458571653}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getAction } from '@api/manage'\nimport { JVXETypes } from '@/components/jeecg/JVxeTable'\n\n// 【多种布局模板】上面父、左下子、右下孙\nexport default {\n  name: 'Template1',\n  data() {\n    return {\n      table1: {\n        // 是否正在加载\n        loading: false,\n        // 分页器参数\n        pagination: {\n          // 当前页码\n          current: 1,\n          // 每页的条数\n          pageSize: 200,\n          // 可切换的条数\n          pageSizeOptions: ['10', '20', '30', '100', '200'],\n          // 数据总数（目前并不知道真实的总数，所以先填写0，在后台查出来后再赋值）\n          total: 0,\n        },\n        // 最后选中的行\n        lastRow: null,\n        // 选择的行\n        selectedRows: [],\n        // 数据源，控制表格的数据\n        dataSource: [],\n        // 列配置，控制表格显示的列\n        columns: [\n          {key: 'num', title: '序号', width: '80px'},\n          {\n            // 字段key，跟后台数据的字段名匹配\n            key: 'ship_name',\n            // 列的标题\n            title: '船名',\n            // 列的宽度\n            width: '180px',\n            // 如果加上了该属性，就代表当前单元格是可编辑的，type就是表单的类型，input就是简单的输入框\n            type: JVXETypes.input,\n            formatter({cellValue, row, column}) {\n              let foo = ''\n              if (row.company === '佧伒侾佯有限公司') {\n                foo += '-233'\n              }\n              return cellValue + foo\n            },\n          },\n          {key: 'call', title: '呼叫', width: '80px', type: JVXETypes.input},\n          {key: 'len', title: '长', width: '80px', type: JVXETypes.inputNumber},\n          {key: 'ton', title: '吨', width: '120px', type: JVXETypes.inputNumber},\n          {key: 'payer', title: '付款方', width: '120px', type: JVXETypes.input},\n          {key: 'count', title: '数', width: '40px'},\n          {\n            key: 'company',\n            title: '公司',\n            // 最小宽度，与宽度不同的是，这个不是固定的宽度，如果表格有多余的空间，会平均分配给设置了 minWidth 的列\n            // 如果要做占满表格的列可以这么写\n            minWidth: '180px',\n            type: JVXETypes.input\n          },\n          {key: 'trend', title: '动向', width: '120px', type: JVXETypes.input},\n        ],\n      },\n      // 子级表的配置信息 （配置和主表的完全一致，就不写冗余的注释了）\n      table2: {\n        loading: false,\n        pagination: {current: 1, pageSize: 200, pageSizeOptions: ['100', '200'], total: 0},\n        // 最后选中的行\n        lastRow: null,\n        selectedRows: [],\n        dataSource: [],\n        columns: [\n          {key: 'dd_num', title: '调度序号', width: '120px'},\n          {key: 'tug', title: '拖轮', width: '180px', type: JVXETypes.input},\n          {key: 'work_start_time', title: '作业开始时间', width: '180px', type: JVXETypes.input},\n          {key: 'work_stop_time', title: '作业结束时间', width: '180px', type: JVXETypes.input},\n          {key: 'type', title: '船舶分类', width: '120px', type: JVXETypes.input},\n          {key: 'port_area', title: '所属港区', width: '120px', type: JVXETypes.input},\n        ],\n      },\n      // 孙级表的配置信息 （配置和主表的完全一致，就不写冗余的注释了）\n      table3: {\n        loading: false,\n        pagination: {current: 1, pageSize: 200, pageSizeOptions: ['100', '200'], total: 0},\n        selectedRows: [],\n        dataSource: [],\n        columns: [\n          {key: 'dd_num', title: '调度序号', width: '120px'},\n          {key: 'tug', title: '拖轮', width: '120px', type: JVXETypes.input},\n          {key: 'power', title: '马力', width: '120px', type: JVXETypes.input},\n          {key: 'nature', title: '性质', width: '120px', type: JVXETypes.input},\n          {key: 'departure_time', title: '发船时间', width: '180px', type: JVXETypes.input},\n        ],\n      },\n      // 查询url地址\n      url: {\n        getData: '/mock/vxe/getData',\n      },\n    }\n  },\n  // 监听器\n  watch: {\n    // 监听table1 【主表】选择的数据发生了变化\n    ['table1.lastRow'](row) {\n      this.loadTable2Data()\n    },\n    // 监听table2 【子表】选择的数据发生了变化\n    ['table2.lastRow']() {\n      this.loadTable3Data()\n    },\n  },\n  created() {\n    this.loadTable1Data()\n  },\n  methods: {\n\n    // 加载table1【主表】的数据\n    loadTable1Data() {\n      // 封装查询条件\n      let formData = {\n        pageNo: this.table1.pagination.current,\n        pageSize: this.table1.pagination.pageSize\n      }\n      // 调用查询数据接口\n      this.table1.loading = true\n      getAction(this.url.getData, formData).then(res => {\n        if (res.success) {\n          // 后台查询回来的 total，数据总数量\n          this.table1.pagination.total = res.result.total\n          // 将查询的数据赋值给 dataSource\n          this.table1.dataSource = res.result.records\n          // 重置选择\n          this.table1.selectedRows = []\n        } else {\n          this.$error({title: '主表查询失败', content: res.message})\n        }\n      }).finally(() => {\n        // 这里是无论成功或失败都会执行的方法，在这里关闭loading\n        this.table1.loading = false\n      })\n    },\n\n    // 当table1【主表】分页参数变化时触发的事件\n    handleTable1PageChange(event) {\n      // 重新赋值\n      this.table1.pagination.current = event.current\n      this.table1.pagination.pageSize = event.pageSize\n      // 查询数据\n      this.loadTable1Data()\n    },\n\n    // table1【主表】当选择的行变化时触发的事件\n    handleTable1SelectRowChange(event) {\n      this.handleTableSelectRowChange(this.table1, event)\n    },\n\n    // 加载table2【子表】的数据，根据主表的id进行查询\n    loadTable2Data() {\n      // 如果主表没有选择，则不查询\n      let selectedRows = this.table1.selectedRows\n      if (!selectedRows || selectedRows.length === 0) {\n        this.table2.pagination.total = 0\n        this.table2.dataSource = []\n        this.table2.selectedRows = []\n        return\n      } else if (this.table1.lastRow == null) {\n        this.table1.lastRow = selectedRows[selectedRows.length - 1]\n      }\n      let formData = {\n        parentId: this.table1.lastRow.id,\n        pageNo: this.table2.pagination.current,\n        pageSize: this.table2.pagination.pageSize\n      }\n      this.table2.loading = true\n      getAction(this.url.getData, formData).then(res => {\n        if (res.success) {\n          this.table2.pagination.total = res.result.total\n          this.table2.dataSource = res.result.records\n          this.table2.selectedRows = []\n        } else {\n          this.$error({title: '子表查询失败', content: res.message})\n        }\n      }).finally(() => {\n        this.table2.loading = false\n      })\n    },\n\n    // table2【子表】当选择的行变化时触发的事件\n    handleTable2SelectRowChange(event) {\n      this.handleTableSelectRowChange(this.table2, event)\n    },\n\n    // 当table2【子表】分页参数变化时触发的事件\n    handleTable2PageChange(event) {\n      // 重新赋值\n      this.table2.pagination.current = event.current\n      this.table2.pagination.pageSize = event.pageSize\n      // 查询数据\n      this.loadTable2Data()\n    },\n\n    // 加载table3【孙表】的数据，根据子表的id进行查询\n    loadTable3Data() {\n      // 如果主表没有选择，则不查询\n      let selectedRows = this.table2.selectedRows\n      if (!selectedRows || selectedRows.length === 0) {\n        this.table3.pagination.total = 0\n        this.table3.dataSource = []\n        this.table3.selectedRows = []\n        return\n      } else if (this.table2.lastRow == null) {\n        this.table2.lastRow = selectedRows[selectedRows.length - 1]\n      }\n      let formData = {\n        parentId: this.table2.lastRow.id,\n        pageNo: this.table3.pagination.current,\n        pageSize: this.table3.pagination.pageSize\n      }\n      this.table3.loading = true\n      getAction(this.url.getData, formData).then(res => {\n        if (res.success) {\n          this.table3.pagination.total = res.result.total\n          this.table3.dataSource = res.result.records\n        } else {\n          this.$error({title: '子表查询失败', content: res.message})\n        }\n      }).finally(() => {\n        this.table3.loading = false\n      })\n    },\n    // 当table3【孙表】分页参数变化时触发的事件\n    handleTable3PageChange(event) {\n      // 重新赋值\n      this.table3.pagination.current = event.current\n      this.table3.pagination.pageSize = event.pageSize\n      // 查询数据\n      this.loadTable3Data()\n    },\n\n    /** 公共方法：处理表格选中变化事件 */\n    handleTableSelectRowChange(table, event) {\n      let {row, action, selectedRows, $table} = event\n      // 获取最后一个选中的\n      let lastSelected = selectedRows[selectedRows.length - 1]\n      if (action === 'selected') {\n        table.lastRow = row\n      } else if (action === 'selected-all') {\n        // 取消全选\n        if (selectedRows.length === 0) {\n          table.lastRow = null\n        } else if (!table.lastRow) {\n          table.lastRow = lastSelected\n        }\n      } else if (action === 'unselected' && row === table.lastRow) {\n        table.lastRow = lastSelected\n      }\n      $table.setCurrentRow(table.lastRow)\n      table.selectedRows = selectedRows\n    },\n\n  }\n}\n",{"version":3,"sources":["Template1.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Template1.vue","sourceRoot":"src/views/jeecg/JVxeDemo/layout-demo","sourcesContent":["<template>\r\n  <a-card :bordered=\"false\">\r\n    <a-row :gutter=\"8\">\r\n      <!-- 这里是父级节点 -->\r\n      <a-col :span=\"24\" style=\"margin-bottom: 4px;\">\r\n        <j-vxe-table\r\n          toolbar\r\n          row-number\r\n          row-selection\r\n          click-select-row\r\n          highlight-current-row\r\n          :radio-config=\"{highlight: false}\"\r\n          :checkbox-config=\"{highlight: false}\"\r\n          :height=\"340\"\r\n          :loading=\"table1.loading\"\r\n          :columns=\"table1.columns\"\r\n          :dataSource=\"table1.dataSource\"\r\n          :pagination=\"table1.pagination\"\r\n          @pageChange=\"handleTable1PageChange\"\r\n          @selectRowChange=\"handleTable1SelectRowChange\"\r\n        />\r\n      </a-col>\r\n      <!-- 这里是子级节点 -->\r\n      <a-col :span=\"12\">\r\n        <j-vxe-table\r\n          toolbar\r\n          row-number\r\n          row-selection\r\n          click-select-row\r\n          highlight-current-row\r\n          :radio-config=\"{highlight: false}\"\r\n          :checkbox-config=\"{highlight: false}\"\r\n          :height=\"340\"\r\n          :loading=\"table2.loading\"\r\n          :columns=\"table2.columns\"\r\n          :dataSource=\"table2.dataSource\"\r\n          :pagination=\"table2.pagination\"\r\n          @pageChange=\"handleTable2PageChange\"\r\n          @selectRowChange=\"handleTable2SelectRowChange\"\r\n        >\r\n        </j-vxe-table>\r\n      </a-col>\r\n      <!-- 这里是孙级节点 -->\r\n      <a-col :span=\"12\">\r\n        <j-vxe-table\r\n          toolbar\r\n          row-number\r\n          row-selection\r\n          :height=\"340\"\r\n          :loading=\"table3.loading\"\r\n          :columns=\"table3.columns\"\r\n          :dataSource=\"table3.dataSource\"\r\n          :pagination=\"table3.pagination\"\r\n          @pageChange=\"handleTable3PageChange\"\r\n        >\r\n        </j-vxe-table>\r\n      </a-col>\r\n    </a-row>\r\n  </a-card>\r\n</template>\r\n\r\n<script>\r\n  import { getAction } from '@api/manage'\r\n  import { JVXETypes } from '@/components/jeecg/JVxeTable'\r\n\r\n  // 【多种布局模板】上面父、左下子、右下孙\r\n  export default {\r\n    name: 'Template1',\r\n    data() {\r\n      return {\r\n        table1: {\r\n          // 是否正在加载\r\n          loading: false,\r\n          // 分页器参数\r\n          pagination: {\r\n            // 当前页码\r\n            current: 1,\r\n            // 每页的条数\r\n            pageSize: 200,\r\n            // 可切换的条数\r\n            pageSizeOptions: ['10', '20', '30', '100', '200'],\r\n            // 数据总数（目前并不知道真实的总数，所以先填写0，在后台查出来后再赋值）\r\n            total: 0,\r\n          },\r\n          // 最后选中的行\r\n          lastRow: null,\r\n          // 选择的行\r\n          selectedRows: [],\r\n          // 数据源，控制表格的数据\r\n          dataSource: [],\r\n          // 列配置，控制表格显示的列\r\n          columns: [\r\n            {key: 'num', title: '序号', width: '80px'},\r\n            {\r\n              // 字段key，跟后台数据的字段名匹配\r\n              key: 'ship_name',\r\n              // 列的标题\r\n              title: '船名',\r\n              // 列的宽度\r\n              width: '180px',\r\n              // 如果加上了该属性，就代表当前单元格是可编辑的，type就是表单的类型，input就是简单的输入框\r\n              type: JVXETypes.input,\r\n              formatter({cellValue, row, column}) {\r\n                let foo = ''\r\n                if (row.company === '佧伒侾佯有限公司') {\r\n                  foo += '-233'\r\n                }\r\n                return cellValue + foo\r\n              },\r\n            },\r\n            {key: 'call', title: '呼叫', width: '80px', type: JVXETypes.input},\r\n            {key: 'len', title: '长', width: '80px', type: JVXETypes.inputNumber},\r\n            {key: 'ton', title: '吨', width: '120px', type: JVXETypes.inputNumber},\r\n            {key: 'payer', title: '付款方', width: '120px', type: JVXETypes.input},\r\n            {key: 'count', title: '数', width: '40px'},\r\n            {\r\n              key: 'company',\r\n              title: '公司',\r\n              // 最小宽度，与宽度不同的是，这个不是固定的宽度，如果表格有多余的空间，会平均分配给设置了 minWidth 的列\r\n              // 如果要做占满表格的列可以这么写\r\n              minWidth: '180px',\r\n              type: JVXETypes.input\r\n            },\r\n            {key: 'trend', title: '动向', width: '120px', type: JVXETypes.input},\r\n          ],\r\n        },\r\n        // 子级表的配置信息 （配置和主表的完全一致，就不写冗余的注释了）\r\n        table2: {\r\n          loading: false,\r\n          pagination: {current: 1, pageSize: 200, pageSizeOptions: ['100', '200'], total: 0},\r\n          // 最后选中的行\r\n          lastRow: null,\r\n          selectedRows: [],\r\n          dataSource: [],\r\n          columns: [\r\n            {key: 'dd_num', title: '调度序号', width: '120px'},\r\n            {key: 'tug', title: '拖轮', width: '180px', type: JVXETypes.input},\r\n            {key: 'work_start_time', title: '作业开始时间', width: '180px', type: JVXETypes.input},\r\n            {key: 'work_stop_time', title: '作业结束时间', width: '180px', type: JVXETypes.input},\r\n            {key: 'type', title: '船舶分类', width: '120px', type: JVXETypes.input},\r\n            {key: 'port_area', title: '所属港区', width: '120px', type: JVXETypes.input},\r\n          ],\r\n        },\r\n        // 孙级表的配置信息 （配置和主表的完全一致，就不写冗余的注释了）\r\n        table3: {\r\n          loading: false,\r\n          pagination: {current: 1, pageSize: 200, pageSizeOptions: ['100', '200'], total: 0},\r\n          selectedRows: [],\r\n          dataSource: [],\r\n          columns: [\r\n            {key: 'dd_num', title: '调度序号', width: '120px'},\r\n            {key: 'tug', title: '拖轮', width: '120px', type: JVXETypes.input},\r\n            {key: 'power', title: '马力', width: '120px', type: JVXETypes.input},\r\n            {key: 'nature', title: '性质', width: '120px', type: JVXETypes.input},\r\n            {key: 'departure_time', title: '发船时间', width: '180px', type: JVXETypes.input},\r\n          ],\r\n        },\r\n        // 查询url地址\r\n        url: {\r\n          getData: '/mock/vxe/getData',\r\n        },\r\n      }\r\n    },\r\n    // 监听器\r\n    watch: {\r\n      // 监听table1 【主表】选择的数据发生了变化\r\n      ['table1.lastRow'](row) {\r\n        this.loadTable2Data()\r\n      },\r\n      // 监听table2 【子表】选择的数据发生了变化\r\n      ['table2.lastRow']() {\r\n        this.loadTable3Data()\r\n      },\r\n    },\r\n    created() {\r\n      this.loadTable1Data()\r\n    },\r\n    methods: {\r\n\r\n      // 加载table1【主表】的数据\r\n      loadTable1Data() {\r\n        // 封装查询条件\r\n        let formData = {\r\n          pageNo: this.table1.pagination.current,\r\n          pageSize: this.table1.pagination.pageSize\r\n        }\r\n        // 调用查询数据接口\r\n        this.table1.loading = true\r\n        getAction(this.url.getData, formData).then(res => {\r\n          if (res.success) {\r\n            // 后台查询回来的 total，数据总数量\r\n            this.table1.pagination.total = res.result.total\r\n            // 将查询的数据赋值给 dataSource\r\n            this.table1.dataSource = res.result.records\r\n            // 重置选择\r\n            this.table1.selectedRows = []\r\n          } else {\r\n            this.$error({title: '主表查询失败', content: res.message})\r\n          }\r\n        }).finally(() => {\r\n          // 这里是无论成功或失败都会执行的方法，在这里关闭loading\r\n          this.table1.loading = false\r\n        })\r\n      },\r\n\r\n      // 当table1【主表】分页参数变化时触发的事件\r\n      handleTable1PageChange(event) {\r\n        // 重新赋值\r\n        this.table1.pagination.current = event.current\r\n        this.table1.pagination.pageSize = event.pageSize\r\n        // 查询数据\r\n        this.loadTable1Data()\r\n      },\r\n\r\n      // table1【主表】当选择的行变化时触发的事件\r\n      handleTable1SelectRowChange(event) {\r\n        this.handleTableSelectRowChange(this.table1, event)\r\n      },\r\n\r\n      // 加载table2【子表】的数据，根据主表的id进行查询\r\n      loadTable2Data() {\r\n        // 如果主表没有选择，则不查询\r\n        let selectedRows = this.table1.selectedRows\r\n        if (!selectedRows || selectedRows.length === 0) {\r\n          this.table2.pagination.total = 0\r\n          this.table2.dataSource = []\r\n          this.table2.selectedRows = []\r\n          return\r\n        } else if (this.table1.lastRow == null) {\r\n          this.table1.lastRow = selectedRows[selectedRows.length - 1]\r\n        }\r\n        let formData = {\r\n          parentId: this.table1.lastRow.id,\r\n          pageNo: this.table2.pagination.current,\r\n          pageSize: this.table2.pagination.pageSize\r\n        }\r\n        this.table2.loading = true\r\n        getAction(this.url.getData, formData).then(res => {\r\n          if (res.success) {\r\n            this.table2.pagination.total = res.result.total\r\n            this.table2.dataSource = res.result.records\r\n            this.table2.selectedRows = []\r\n          } else {\r\n            this.$error({title: '子表查询失败', content: res.message})\r\n          }\r\n        }).finally(() => {\r\n          this.table2.loading = false\r\n        })\r\n      },\r\n\r\n      // table2【子表】当选择的行变化时触发的事件\r\n      handleTable2SelectRowChange(event) {\r\n        this.handleTableSelectRowChange(this.table2, event)\r\n      },\r\n\r\n      // 当table2【子表】分页参数变化时触发的事件\r\n      handleTable2PageChange(event) {\r\n        // 重新赋值\r\n        this.table2.pagination.current = event.current\r\n        this.table2.pagination.pageSize = event.pageSize\r\n        // 查询数据\r\n        this.loadTable2Data()\r\n      },\r\n\r\n      // 加载table3【孙表】的数据，根据子表的id进行查询\r\n      loadTable3Data() {\r\n        // 如果主表没有选择，则不查询\r\n        let selectedRows = this.table2.selectedRows\r\n        if (!selectedRows || selectedRows.length === 0) {\r\n          this.table3.pagination.total = 0\r\n          this.table3.dataSource = []\r\n          this.table3.selectedRows = []\r\n          return\r\n        } else if (this.table2.lastRow == null) {\r\n          this.table2.lastRow = selectedRows[selectedRows.length - 1]\r\n        }\r\n        let formData = {\r\n          parentId: this.table2.lastRow.id,\r\n          pageNo: this.table3.pagination.current,\r\n          pageSize: this.table3.pagination.pageSize\r\n        }\r\n        this.table3.loading = true\r\n        getAction(this.url.getData, formData).then(res => {\r\n          if (res.success) {\r\n            this.table3.pagination.total = res.result.total\r\n            this.table3.dataSource = res.result.records\r\n          } else {\r\n            this.$error({title: '子表查询失败', content: res.message})\r\n          }\r\n        }).finally(() => {\r\n          this.table3.loading = false\r\n        })\r\n      },\r\n      // 当table3【孙表】分页参数变化时触发的事件\r\n      handleTable3PageChange(event) {\r\n        // 重新赋值\r\n        this.table3.pagination.current = event.current\r\n        this.table3.pagination.pageSize = event.pageSize\r\n        // 查询数据\r\n        this.loadTable3Data()\r\n      },\r\n\r\n      /** 公共方法：处理表格选中变化事件 */\r\n      handleTableSelectRowChange(table, event) {\r\n        let {row, action, selectedRows, $table} = event\r\n        // 获取最后一个选中的\r\n        let lastSelected = selectedRows[selectedRows.length - 1]\r\n        if (action === 'selected') {\r\n          table.lastRow = row\r\n        } else if (action === 'selected-all') {\r\n          // 取消全选\r\n          if (selectedRows.length === 0) {\r\n            table.lastRow = null\r\n          } else if (!table.lastRow) {\r\n            table.lastRow = lastSelected\r\n          }\r\n        } else if (action === 'unselected' && row === table.lastRow) {\r\n          table.lastRow = lastSelected\r\n        }\r\n        $table.setCurrentRow(table.lastRow)\r\n        table.selectedRows = selectedRows\r\n      },\r\n\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"less\">\r\n\r\n</style>"]}]}