{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a\\ant-design-vue-jeecg\\src\\components\\jeecg\\JPopup.vue?vue&type=style&index=0&id=1b7791d3&scoped=true&lang=css&","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\components\\jeecg\\JPopup.vue","mtime":1661074531181},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\css-loader\\index.js","mtime":1657458574837},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1657458571653},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\postcss-loader\\src\\index.js","mtime":1657458638287},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1657458571653}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.components-input-demo-presuffix .anticon-close-circle {\n  cursor: pointer;\n  color: #ccc;\n  transition: color 0.3s;\n  font-size: 12px;\n}\n\n.components-input-demo-presuffix .anticon-close-circle:hover {\n  color: #f5222d;\n}\n\n.components-input-demo-presuffix .anticon-close-circle:active {\n  color: #666;\n}\n",{"version":3,"sources":["JPopup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0NA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"JPopup.vue","sourceRoot":"src/components/jeecg","sourcesContent":["<template>\r\n  <div class=\"components-input-demo-presuffix\" v-if=\"avalid\">\r\n    <!---->\r\n    <a-input @click=\"openModal\" :placeholder=\"placeholder\" v-model=\"showText\" readOnly :disabled=\"disabled\">\r\n      <a-icon slot=\"prefix\" type=\"cluster\" :title=\"title\"/>\r\n      <a-icon v-if=\"showText\" slot=\"suffix\" type=\"close-circle\" @click=\"handleEmpty\" title=\"清空\"/>\r\n    </a-input>\r\n\r\n    <j-popup-onl-report\r\n      ref=\"jPopupOnlReport\"\r\n      :code=\"code\"\r\n      :multi=\"multi\"\r\n      :sorter=\"sorter\"\r\n      :groupId=\"uniqGroupId\"\r\n      :param=\"param\"\r\n      @ok=\"callBack\"\r\n    />\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import JPopupOnlReport from './modal/JPopupOnlReport'\r\n\r\n  export default {\r\n    name: 'JPopup',\r\n    components: {\r\n      JPopupOnlReport\r\n    },\r\n    props: {\r\n      code: {\r\n        type: String,\r\n        default: '',\r\n        required: false\r\n      },\r\n      field: {\r\n        type: String,\r\n        default: '',\r\n        required: false\r\n      },\r\n      orgFields: {\r\n        type: String,\r\n        default: '',\r\n        required: false\r\n      },\r\n      destFields: {\r\n        type: String,\r\n        default: '',\r\n        required: false\r\n      },\r\n      /** 排序列，指定要排序的列，使用方式：列名=desc|asc */\r\n      sorter: {\r\n        type: String,\r\n        default: ''\r\n      },\r\n      width: {\r\n        type: Number,\r\n        default: 1200,\r\n        required: false\r\n      },\r\n      placeholder: {\r\n        type: String,\r\n        default: '请选择',\r\n        required: false\r\n      },\r\n      value: {\r\n        type: String,\r\n        required: false\r\n      },\r\n      triggerChange: {\r\n        type: Boolean,\r\n        required: false,\r\n        default: false\r\n      },\r\n      disabled: {\r\n        type: Boolean,\r\n        required: false,\r\n        default: false\r\n      },\r\n      multi: {\r\n        type: Boolean,\r\n        required: false,\r\n        default: false\r\n      },\r\n      //popup动态参数 支持系统变量语法\r\n      param:{\r\n        type: Object,\r\n        required: false,\r\n        default: ()=>{}\r\n      },\r\n      spliter:{\r\n        type: String,\r\n        required: false,\r\n        default: ','\r\n      },\r\n      /** 分组ID，用于将多个popup的请求合并到一起，不传不分组 */\r\n      groupId: String\r\n\r\n    },\r\n    data() {\r\n      return {\r\n        showText: '',\r\n        title: '',\r\n        avalid: true\r\n      }\r\n    },\r\n    computed: {\r\n      uniqGroupId() {\r\n        if (this.groupId) {\r\n          let { groupId, code, field, orgFields, destFields } = this\r\n          return `${groupId}_${code}_${field}_${orgFields}_${destFields}`\r\n        }\r\n      }\r\n    },\r\n    watch: {\r\n      value: {\r\n        immediate: true,\r\n        handler: function(val) {\r\n          if (!val) {\r\n            this.showText = ''\r\n          } else {\r\n            this.showText = val.split(this.spliter).join(',')\r\n          }\r\n        }\r\n      }\r\n    },\r\n    created() {\r\n    },\r\n    mounted() {\r\n      if (!this.orgFields || !this.destFields || !this.code) {\r\n        this.$message.error('popup参数未正确配置!')\r\n        this.avalid = false\r\n      }\r\n      if (this.destFields.split(',').length != this.orgFields.split(',').length) {\r\n        this.$message.error('popup参数未正确配置,原始值和目标值数量不一致!')\r\n        this.avalid = false\r\n      }\r\n    },\r\n    methods: {\r\n      openModal() {\r\n        if (this.disabled === false) {\r\n          this.$refs.jPopupOnlReport.show()\r\n        }\r\n      },\r\n      handleEmpty() {\r\n        // 禁用时，不允许清空内容\r\n        if (this.disabled) {\r\n          return\r\n        }\r\n        this.showText = ''\r\n        let destFieldsArr = this.destFields.split(',')\r\n        if (destFieldsArr.length === 0) {\r\n          return\r\n        }\r\n        let res = {}\r\n        for (let i = 0; i < destFieldsArr.length; i++) {\r\n          res[destFieldsArr[i]] = ''\r\n        }\r\n        if (this.triggerChange) {\r\n          this.$emit('callback', res)\r\n        } else {\r\n          this.$emit('input', '', res)\r\n        }\r\n      },\r\n      callBack(rows) {\r\n        // update--begin--autor:lvdandan-----date:20200630------for：多选时未带回多个值------\r\n        let orgFieldsArr = this.orgFields.split(',')\r\n        let destFieldsArr = this.destFields.split(',')\r\n        let resetText = false\r\n        if (this.field && this.field.length > 0) {\r\n          this.showText = ''\r\n          resetText = true\r\n        }\r\n        let res = {}\r\n        if (orgFieldsArr.length > 0) {\r\n          for (let i = 0; i < orgFieldsArr.length; i++) {\r\n            let tempDestArr = []\r\n            for(let rw of rows){\r\n              let val = rw[orgFieldsArr[i]]\r\n              // update--begin--autor:liusq-----date:20210713------for：处理val等于0的情况issues/I3ZL4T------\r\n              if(typeof val=='undefined'|| val==null || val.toString()==\"\"){\r\n                val = \"\"\r\n              }\r\n              // update--end--autor:liusq-----date:20210713------for：处理val等于0的情况issues/I3ZL4T------\r\n              tempDestArr.push(val)\r\n            }\r\n            res[destFieldsArr[i]] = tempDestArr.join(\",\")\r\n          }\r\n          if (resetText === true) {\r\n            let tempText = []\r\n            for(let rw of rows){\r\n              let val = rw[orgFieldsArr[destFieldsArr.indexOf(this.field)]]\r\n              if(!val){\r\n                val = \"\"\r\n              }\r\n              tempText.push(val)\r\n            }\r\n            this.showText = tempText.join(\",\")\r\n          }\r\n          // update--end--autor:lvdandan-----date:20200630------for：多选时未带回多个值------\r\n        }\r\n        if (this.triggerChange) {\r\n          //v-dec时即triggerChange为true时 将整个对象给form页面 让他自己setFieldsValue\r\n          this.$emit('callback', res)\r\n        } else {\r\n          //v-model时 需要传一个参数field 表示当前这个字段 从而根据这个字段的顺序找到原始值\r\n          // this.$emit(\"input\",row[orgFieldsArr[destFieldsArr.indexOf(this.field)]])\r\n          let str = ''\r\n          if(this.showText){\r\n            str = this.showText.split(',').join(this.spliter)\r\n          }\r\n          this.$emit('input', str, res)\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>\r\n<style scoped>\r\n  .components-input-demo-presuffix .anticon-close-circle {\r\n    cursor: pointer;\r\n    color: #ccc;\r\n    transition: color 0.3s;\r\n    font-size: 12px;\r\n  }\r\n\r\n  .components-input-demo-presuffix .anticon-close-circle:hover {\r\n    color: #f5222d;\r\n  }\r\n\r\n  .components-input-demo-presuffix .anticon-close-circle:active {\r\n    color: #666;\r\n  }\r\n</style>"]}]}