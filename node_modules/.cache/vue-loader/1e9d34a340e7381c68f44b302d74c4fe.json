{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a\\ant-design-vue-jeecg\\src\\components\\dict\\JSearchSelectTag.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\components\\dict\\JSearchSelectTag.vue","mtime":1661074531162},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1657458571653}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { ajaxGetDictItems,getDictItemsFromCache } from '@/api/api'\nimport debounce from 'lodash/debounce';\nimport { getAction } from '../../api/manage'\n\nexport default {\n  name: 'JSearchSelectTag',\n  props:{\n    disabled: Boolean,\n    value: [String, Number],\n    dictOptions: Array,\n    async: Boolean,\n    placeholder:{\n      type:String,\n      default:\"请选择\",\n      required:false\n    },\n    dict:{\n      type: String,\n      default: '',\n      required: false\n    },\n    popContainer:{\n      type:String,\n      default:'',\n      required:false\n    },\n    pageSize:{\n      type: Number,\n      default: 10,\n      required: false\n    },\n    getPopupContainer: {\n      type:Function,\n      default: null\n    },\n  },\n  data(){\n    this.loadData = debounce(this.loadData, 800);//消抖\n    this.lastLoad = 0;\n    return {\n      loading:false,\n      selectedValue:[],\n      selectedAsyncValue:[],\n      options: [],\n    }\n  },\n  created(){\n    this.initDictData();\n  },\n  watch:{\n    \"value\":{\n      immediate:true,\n      handler(val){\n        if(!val){\n          if(val==0){\n            this.initSelectValue()\n          }else{\n            this.selectedValue=[]\n            this.selectedAsyncValue=[]\n          }\n        }else{\n          this.initSelectValue()\n        }\n      }\n    },\n    \"dict\":{\n      handler(){\n        this.initDictData()\n      }\n    },\n    'dictOptions':{\n      deep: true,\n      handler(val){\n        if(val && val.length>0){\n          this.options = [...val]\n        }\n      }\n    }\n  },\n  methods:{\n    initSelectValue(){\n      if(this.async){\n        if(!this.selectedAsyncValue || !this.selectedAsyncValue.key || this.selectedAsyncValue.key!=this.value){\n          console.log(\"这才请求后台\")\n          //update-begin-author:taoyan date:20220112 for: 方法initSelectValue 根据下拉框实际值查询下拉框的显示的文本 因后台接口只处理3个参数，所以将过滤条件去掉\n          // TODO 隐患 查询效率问题 还是应该在后台作筛选\n          let itemDictStr = this.dict\n          let arr = itemDictStr.split(',')\n          if(arr && arr.length==4){\n            // 删除最后一个元素\n            arr.pop();\n            itemDictStr = arr.join(',')\n          }\n          //update-end-author:taoyan date:20220112 for: 方法initSelectValue 根据下拉框实际值查询下拉框的显示的文本 因后台接口只处理3个参数，所以将过滤条件去掉\n          getAction(`/sys/dict/loadDictItem/${itemDictStr}`,{key:this.value}).then(res=>{\n            if(res.success){\n              let obj = {\n                key:this.value,\n                label:res.result\n              }\n              this.selectedAsyncValue = {...obj}\n            }\n          })\n        }\n      }else{\n        this.selectedValue = this.value.toString()\n      }\n    },\n    loadData(value){\n      console.log(\"数据加载\",value)\n      this.lastLoad +=1\n      const currentLoad = this.lastLoad\n      this.options = []\n      this.loading=true\n      // 字典code格式：table,text,code\n      getAction(`/sys/dict/loadDict/${this.dict}`,{keyword:value, pageSize: this.pageSize}).then(res=>{\n        this.loading=false\n        if(res.success){\n          if(currentLoad!=this.lastLoad){\n            return\n          }\n          this.options = res.result\n          console.log(\"我是第一个\",res)\n        }else{\n          this.$message.warning(res.message)\n        }\n\n      })\n\n    },\n    initDictData(){\n      if(!this.async){\n        //如果字典项集合有数据\n        if(this.dictOptions && this.dictOptions.length>0){\n          this.options = [...this.dictOptions]\n        }else{\n          //根据字典Code, 初始化字典数组\n          let dictStr = ''\n          if(this.dict){\n              let arr = this.dict.split(',')\n              if(arr[0].indexOf('where')>0){\n                let tbInfo = arr[0].split('where')\n                dictStr = tbInfo[0].trim()+','+arr[1]+','+arr[2]+','+encodeURIComponent(tbInfo[1])\n              }else{\n                dictStr = this.dict\n              }\n              if (this.dict.indexOf(\",\") == -1) {\n                //优先从缓存中读取字典配置\n                if (getDictItemsFromCache(this.dictCode)) {\n                  this.options = getDictItemsFromCache(this.dictCode);\n                  return\n                }\n              }\n              ajaxGetDictItems(dictStr, null).then((res) => {\n                if (res.success) {\n                  this.options = res.result;\n                }\n              })\n          }\n        }\n      }else{\n        if(!this.dict){\n          console.error('搜索组件未配置字典项')\n        }else{\n          //异步一开始也加载一点数据\n          this.loading=true\n          getAction(`/sys/dict/loadDict/${this.dict}`,{pageSize: this.pageSize, keyword:''}).then(res=>{\n            this.loading=false\n            if(res.success){\n              this.options = res.result\n            }else{\n              this.$message.warning(res.message)\n            }\n          })\n        }\n      }\n    },\n    filterOption(input, option) {\n      return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    },\n    handleChange (selectedValue) {\n      console.log(\"selectedValue\",selectedValue)\n      this.selectedValue = selectedValue\n      this.callback()\n    },\n    handleAsyncChange(selectedObj){\n      //update-begin-author:scott date:20201222 for:【搜索】搜索查询组件，删除条件，默认下拉还是上次的缓存数据，不好 JT-191\n      if(selectedObj){\n        this.selectedAsyncValue = selectedObj\n        this.selectedValue = selectedObj.key\n      }else{\n        this.selectedAsyncValue = null\n        this.selectedValue = null\n        this.options = null\n        this.loadData(\"\")\n      }\n      this.callback()\n      //update-end-author:scott date:20201222 for:【搜索】搜索查询组件，删除条件，默认下拉还是上次的缓存数据，不好 JT-191\n    },\n    callback(){\n      this.$emit('change', this.selectedValue);\n    },\n    setCurrentDictOptions(dictOptions){\n      this.options = dictOptions\n    },\n    getCurrentDictOptions(){\n      return this.options\n    },\n    getParentContainer(node){\n      if(typeof this.getPopupContainer === 'function'){\n        return this.getPopupContainer(node)\n      } else if(!this.popContainer){\n        return node.parentNode\n      }else{\n        return document.querySelector(this.popContainer)\n      }\n    },\n\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n}\n",{"version":3,"sources":["JSearchSelectTag.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"JSearchSelectTag.vue","sourceRoot":"src/components/dict","sourcesContent":["<template>\r\n\r\n  <a-select\r\n    v-if=\"async\"\r\n    showSearch\r\n    labelInValue\r\n    :disabled=\"disabled\"\r\n    :getPopupContainer=\"getParentContainer\"\r\n    @search=\"loadData\"\r\n    :placeholder=\"placeholder\"\r\n    v-model=\"selectedAsyncValue\"\r\n    style=\"width: 100%\"\r\n    :filterOption=\"false\"\r\n    @change=\"handleAsyncChange\"\r\n    allowClear\r\n    :notFoundContent=\"loading ? undefined : null\"\r\n  >\r\n    <a-spin v-if=\"loading\" slot=\"notFoundContent\" size=\"small\"/>\r\n    <a-select-option v-for=\"d in options\" :key=\"d.value\" :value=\"d.value\">{{ d.text }}</a-select-option>\r\n  </a-select>\r\n\r\n  <a-select\r\n    v-else\r\n    :getPopupContainer=\"getParentContainer\"\r\n    showSearch\r\n    :disabled=\"disabled\"\r\n    :placeholder=\"placeholder\"\r\n    optionFilterProp=\"children\"\r\n    style=\"width: 100%\"\r\n    @change=\"handleChange\"\r\n    :filterOption=\"filterOption\"\r\n    v-model=\"selectedValue\"\r\n    allowClear\r\n    :notFoundContent=\"loading ? undefined : null\">\r\n    <a-spin v-if=\"loading\" slot=\"notFoundContent\" size=\"small\"/>\r\n    <a-select-option v-for=\"d in options\" :key=\"d.value\" :value=\"d.value\">{{ d.text }}</a-select-option>\r\n  </a-select>\r\n\r\n</template>\r\n\r\n<script>\r\n  import { ajaxGetDictItems,getDictItemsFromCache } from '@/api/api'\r\n  import debounce from 'lodash/debounce';\r\n  import { getAction } from '../../api/manage'\r\n\r\n  export default {\r\n    name: 'JSearchSelectTag',\r\n    props:{\r\n      disabled: Boolean,\r\n      value: [String, Number],\r\n      dictOptions: Array,\r\n      async: Boolean,\r\n      placeholder:{\r\n        type:String,\r\n        default:\"请选择\",\r\n        required:false\r\n      },\r\n      dict:{\r\n        type: String,\r\n        default: '',\r\n        required: false\r\n      },\r\n      popContainer:{\r\n        type:String,\r\n        default:'',\r\n        required:false\r\n      },\r\n      pageSize:{\r\n        type: Number,\r\n        default: 10,\r\n        required: false\r\n      },\r\n      getPopupContainer: {\r\n        type:Function,\r\n        default: null\r\n      },\r\n    },\r\n    data(){\r\n      this.loadData = debounce(this.loadData, 800);//消抖\r\n      this.lastLoad = 0;\r\n      return {\r\n        loading:false,\r\n        selectedValue:[],\r\n        selectedAsyncValue:[],\r\n        options: [],\r\n      }\r\n    },\r\n    created(){\r\n      this.initDictData();\r\n    },\r\n    watch:{\r\n      \"value\":{\r\n        immediate:true,\r\n        handler(val){\r\n          if(!val){\r\n            if(val==0){\r\n              this.initSelectValue()\r\n            }else{\r\n              this.selectedValue=[]\r\n              this.selectedAsyncValue=[]\r\n            }\r\n          }else{\r\n            this.initSelectValue()\r\n          }\r\n        }\r\n      },\r\n      \"dict\":{\r\n        handler(){\r\n          this.initDictData()\r\n        }\r\n      },\r\n      'dictOptions':{\r\n        deep: true,\r\n        handler(val){\r\n          if(val && val.length>0){\r\n            this.options = [...val]\r\n          }\r\n        }\r\n      }\r\n    },\r\n    methods:{\r\n      initSelectValue(){\r\n        if(this.async){\r\n          if(!this.selectedAsyncValue || !this.selectedAsyncValue.key || this.selectedAsyncValue.key!=this.value){\r\n            console.log(\"这才请求后台\")\r\n            //update-begin-author:taoyan date:20220112 for: 方法initSelectValue 根据下拉框实际值查询下拉框的显示的文本 因后台接口只处理3个参数，所以将过滤条件去掉\r\n            // TODO 隐患 查询效率问题 还是应该在后台作筛选\r\n            let itemDictStr = this.dict\r\n            let arr = itemDictStr.split(',')\r\n            if(arr && arr.length==4){\r\n              // 删除最后一个元素\r\n              arr.pop();\r\n              itemDictStr = arr.join(',')\r\n            }\r\n            //update-end-author:taoyan date:20220112 for: 方法initSelectValue 根据下拉框实际值查询下拉框的显示的文本 因后台接口只处理3个参数，所以将过滤条件去掉\r\n            getAction(`/sys/dict/loadDictItem/${itemDictStr}`,{key:this.value}).then(res=>{\r\n              if(res.success){\r\n                let obj = {\r\n                  key:this.value,\r\n                  label:res.result\r\n                }\r\n                this.selectedAsyncValue = {...obj}\r\n              }\r\n            })\r\n          }\r\n        }else{\r\n          this.selectedValue = this.value.toString()\r\n        }\r\n      },\r\n      loadData(value){\r\n        console.log(\"数据加载\",value)\r\n        this.lastLoad +=1\r\n        const currentLoad = this.lastLoad\r\n        this.options = []\r\n        this.loading=true\r\n        // 字典code格式：table,text,code\r\n        getAction(`/sys/dict/loadDict/${this.dict}`,{keyword:value, pageSize: this.pageSize}).then(res=>{\r\n          this.loading=false\r\n          if(res.success){\r\n            if(currentLoad!=this.lastLoad){\r\n              return\r\n            }\r\n            this.options = res.result\r\n            console.log(\"我是第一个\",res)\r\n          }else{\r\n            this.$message.warning(res.message)\r\n          }\r\n\r\n        })\r\n\r\n      },\r\n      initDictData(){\r\n        if(!this.async){\r\n          //如果字典项集合有数据\r\n          if(this.dictOptions && this.dictOptions.length>0){\r\n            this.options = [...this.dictOptions]\r\n          }else{\r\n            //根据字典Code, 初始化字典数组\r\n            let dictStr = ''\r\n            if(this.dict){\r\n                let arr = this.dict.split(',')\r\n                if(arr[0].indexOf('where')>0){\r\n                  let tbInfo = arr[0].split('where')\r\n                  dictStr = tbInfo[0].trim()+','+arr[1]+','+arr[2]+','+encodeURIComponent(tbInfo[1])\r\n                }else{\r\n                  dictStr = this.dict\r\n                }\r\n                if (this.dict.indexOf(\",\") == -1) {\r\n                  //优先从缓存中读取字典配置\r\n                  if (getDictItemsFromCache(this.dictCode)) {\r\n                    this.options = getDictItemsFromCache(this.dictCode);\r\n                    return\r\n                  }\r\n                }\r\n                ajaxGetDictItems(dictStr, null).then((res) => {\r\n                  if (res.success) {\r\n                    this.options = res.result;\r\n                  }\r\n                })\r\n            }\r\n          }\r\n        }else{\r\n          if(!this.dict){\r\n            console.error('搜索组件未配置字典项')\r\n          }else{\r\n            //异步一开始也加载一点数据\r\n            this.loading=true\r\n            getAction(`/sys/dict/loadDict/${this.dict}`,{pageSize: this.pageSize, keyword:''}).then(res=>{\r\n              this.loading=false\r\n              if(res.success){\r\n                this.options = res.result\r\n              }else{\r\n                this.$message.warning(res.message)\r\n              }\r\n            })\r\n          }\r\n        }\r\n      },\r\n      filterOption(input, option) {\r\n        return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n      },\r\n      handleChange (selectedValue) {\r\n        console.log(\"selectedValue\",selectedValue)\r\n        this.selectedValue = selectedValue\r\n        this.callback()\r\n      },\r\n      handleAsyncChange(selectedObj){\r\n        //update-begin-author:scott date:20201222 for:【搜索】搜索查询组件，删除条件，默认下拉还是上次的缓存数据，不好 JT-191\r\n        if(selectedObj){\r\n          this.selectedAsyncValue = selectedObj\r\n          this.selectedValue = selectedObj.key\r\n        }else{\r\n          this.selectedAsyncValue = null\r\n          this.selectedValue = null\r\n          this.options = null\r\n          this.loadData(\"\")\r\n        }\r\n        this.callback()\r\n        //update-end-author:scott date:20201222 for:【搜索】搜索查询组件，删除条件，默认下拉还是上次的缓存数据，不好 JT-191\r\n      },\r\n      callback(){\r\n        this.$emit('change', this.selectedValue);\r\n      },\r\n      setCurrentDictOptions(dictOptions){\r\n        this.options = dictOptions\r\n      },\r\n      getCurrentDictOptions(){\r\n        return this.options\r\n      },\r\n      getParentContainer(node){\r\n        if(typeof this.getPopupContainer === 'function'){\r\n          return this.getPopupContainer(node)\r\n        } else if(!this.popContainer){\r\n          return node.parentNode\r\n        }else{\r\n          return document.querySelector(this.popContainer)\r\n        }\r\n      },\r\n\r\n    },\r\n    model: {\r\n      prop: 'value',\r\n      event: 'change'\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}