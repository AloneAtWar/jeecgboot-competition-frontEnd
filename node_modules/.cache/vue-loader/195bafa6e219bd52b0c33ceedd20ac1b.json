{"remainingRequest":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a\\ant-design-vue-jeecg\\src\\components\\jeecgbiz\\modal\\JSelectDepartModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\a\\ant-design-vue-jeecg\\src\\components\\jeecgbiz\\modal\\JSelectDepartModal.vue","mtime":1661074531208},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1657458618345},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657458637011},{"path":"D:\\a\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1657458571653}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { queryDepartTreeList } from '@/api/api'\nexport default {\n  name: 'JSelectDepartModal',\n  props:['modalWidth','multi','rootOpened','departId', 'store', 'text','treeOpera'],\n  data(){\n    return {\n      visible:false,\n      confirmLoading:false,\n      treeData:[],\n      autoExpandParent:true,\n      expandedKeys:[],\n      dataList:[],\n      checkedKeys:[],\n      checkedRows:[],\n      searchValue:\"\",\n      checkStrictly: true,\n      fullscreen:false\n    }\n  },\n  created(){\n    this.loadDepart();\n  },\n  watch:{\n    departId(){\n      this.initDepartComponent()\n    },\n    visible: {\n      handler() {\n        this.initDepartComponent(true)\n      }\n    }\n  },\n  computed:{\n    treeScreenClass() {\n      return {\n        'my-dept-select-tree': true,\n        'fullscreen': this.fullscreen,\n      }\n    },\n    filterTreeData(){\n      if(!this.searchValue){\n        return this.treeData\n      }\n      let filter = []\n      this.dataList.forEach((item) => {\n        if (item.title.includes(this.searchValue)) {\n          filter.push(Object.assign({}, item, {children: null, isLeaf: true}))\n        }\n      })\n      return filter\n    },\n  },\n  methods:{\n    show(){\n      this.visible=true\n      this.checkedRows=[]\n      this.checkedKeys=[]\n    },\n    loadDepart(){\n      // 这个方法是找到所有的部门信息\n      queryDepartTreeList().then(res=>{\n        if(res.success){\n          let arr = [...res.result]\n          this.reWriterWithSlot(arr)\n          this.treeData = arr\n          this.initDepartComponent()\n          if(this.rootOpened){\n            this.initExpandedKeys(res.result)\n          }\n        }\n      })\n    },\n    initDepartComponent(flag){\n      let arr = []\n      //该方法两个地方用 1.visible改变事件重新设置选中项 2.组件编辑页面回显\n      let fieldName = flag==true?'key':this.text\n      if(this.departId){\n        let arr2 = this.departId.split(',')\n        for(let item of this.dataList){\n          if(arr2.indexOf(item[this.store])>=0){\n            arr.push(item[fieldName])\n          }\n        }\n      }\n      if(flag==true){\n        this.checkedKeys = [...arr]\n      }else{\n        this.$emit(\"initComp\", arr.join(','))\n      }\n    },\n    reWriterWithSlot(arr){\n      for(let item of arr){\n        if(item.children && item.children.length>0){\n          this.reWriterWithSlot(item.children)\n          let temp = Object.assign({},item)\n          temp.children = {}\n          this.dataList.push(temp)\n        }else{\n          this.dataList.push(item)\n          item.scopedSlots={ title: 'title' }\n        }\n      }\n    },\n    initExpandedKeys(arr){\n      if(arr && arr.length>0){\n        let keys = []\n        for(let item of arr){\n          if(item.children && item.children.length>0){\n            keys.push(item.id)\n          }\n        }\n        this.expandedKeys=[...keys]\n        //全部keys\n        //this.allTreeKeys = [...keys]\n      }else{\n        this.expandedKeys=[]\n        //this.allTreeKeys = []\n      }\n    },\n    onCheck (checkedKeys,info) {\n      if(!this.multi){\n        let arr = checkedKeys.checked.filter(item => this.checkedKeys.indexOf(item) < 0)\n        this.checkedKeys = [...arr]\n        this.checkedRows = (this.checkedKeys.length === 0) ? [] : [info.node.dataRef]\n      }else{\n        if(this.checkStrictly){\n          this.checkedKeys = checkedKeys.checked\n        }else{\n          this.checkedKeys = checkedKeys\n        }\n        this.checkedRows = this.getCheckedRows(this.checkedKeys)\n      }\n    },\n    onSelect(selectedKeys,info) {\n      //取消关联的情况下才走onSelect的逻辑\n      if(this.checkStrictly){\n        let keys = []\n        keys.push(selectedKeys[0])\n        if(!this.checkedKeys || this.checkedKeys.length===0 || !this.multi){\n          this.checkedKeys = [...keys]\n          this.checkedRows=[info.node.dataRef]\n        }else{\n          let currKey = info.node.dataRef.key\n          if(this.checkedKeys.indexOf(currKey)>=0){\n            this.checkedKeys = this.checkedKeys.filter(item=> item !==currKey)\n          }else{\n            this.checkedKeys.push(...keys)\n          }\n        }\n        this.checkedRows = this.getCheckedRows(this.checkedKeys)\n      }\n    },\n    onExpand (expandedKeys) {\n      this.expandedKeys = expandedKeys\n      this.autoExpandParent = false\n    },\n    handleSubmit(){\n      if(!this.checkedKeys || this.checkedKeys.length==0){\n        this.$emit(\"ok\",'')\n      }else{\n        let checkRow = this.getCheckedRows(this.checkedKeys)\n        let keyStr = this.checkedKeys.join(\",\")\n        this.$emit(\"ok\", checkRow, keyStr)\n      }\n      this.handleClear()\n    },\n    handleCancel(){\n      this.handleClear()\n    },\n    handleClear(){\n      this.visible=false\n      this.checkedKeys=[]\n    },\n    getParentKey(currKey,treeData){\n      let parentKey\n      for (let i = 0; i < treeData.length; i++) {\n        const node = treeData[i]\n        if (node.children) {\n          if (node.children.some(item => item.key === currKey)) {\n            parentKey = node.key\n          } else if (this.getParentKey(currKey, node.children)) {\n            parentKey = this.getParentKey(currKey, node.children)\n          }\n        }\n      }\n      return parentKey\n    },\n    // 根据 checkedKeys 获取 rows\n    getCheckedRows(checkedKeys) {\n      const forChildren = (list, key) => {\n        for (let item of list) {\n          if (item.id === key) {\n            return item\n          }\n          if (item.children instanceof Array) {\n            let value = forChildren(item.children, key)\n            if (value != null) {\n              return value\n            }\n          }\n        }\n        return null\n      }\n\n      let rows = []\n      for (let key of checkedKeys) {\n        let row = forChildren(this.treeData, key)\n        if (row != null) {\n          rows.push(row)\n        }\n      }\n      return rows\n    },\n    switchCheckStrictly (v) {\n      if(v==1){\n        this.checkStrictly = false\n      }else if(v==2){\n        this.checkStrictly = true\n      }\n    },\n    isFullscreen(val){\n      this.fullscreen=val\n    }\n  }\n}\n\n",{"version":3,"sources":["JSelectDepartModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"JSelectDepartModal.vue","sourceRoot":"src/components/jeecgbiz/modal","sourcesContent":["<template>\r\n  <j-modal\r\n    title=\"选择部门\"\r\n    :width=\"modalWidth\"\r\n    :visible=\"visible\"\r\n    :confirmLoading=\"confirmLoading\"\r\n    @ok=\"handleSubmit\"\r\n    @cancel=\"handleCancel\"\r\n    @update:fullscreen=\"isFullscreen\"\r\n    wrapClassName=\"j-depart-select-modal\"\r\n    switchFullscreen\r\n    cancelText=\"关闭\">\r\n    <a-spin tip=\"Loading...\" :spinning=\"false\">\r\n      <a-input-search v-model=\"searchValue\" style=\"margin-bottom: 1px\" placeholder=\"请输入部门名称按回车进行搜索\" />\r\n      <a-empty v-if=\"filterTreeData.length===0\"></a-empty>\r\n      <a-tree\r\n        v-else\r\n        checkable\r\n        :class=\"treeScreenClass\"\r\n        :treeData=\"filterTreeData\"\r\n        :checkStrictly=\"checkStrictly\"\r\n        @check=\"onCheck\"\r\n        @select=\"onSelect\"\r\n        @expand=\"onExpand\"\r\n        :autoExpandParent=\"autoExpandParent\"\r\n        :expandedKeys=\"expandedKeys\"\r\n        :checkedKeys=\"checkedKeys\">\r\n\r\n      </a-tree>\r\n    </a-spin>\r\n    <!--底部父子关联操作和确认取消按钮-->\r\n    <template slot=\"footer\" v-if=\"treeOpera && multi\">\r\n      <div class=\"drawer-bootom-button\">\r\n        <a-dropdown style=\"float: left\" :trigger=\"['click']\" placement=\"topCenter\">\r\n          <a-menu slot=\"overlay\">\r\n            <a-menu-item key=\"1\" @click=\"switchCheckStrictly(1)\">父子关联</a-menu-item>\r\n            <a-menu-item key=\"2\" @click=\"switchCheckStrictly(2)\">取消关联</a-menu-item>\r\n          </a-menu>\r\n          <a-button>\r\n            树操作 <a-icon type=\"up\" />\r\n          </a-button>\r\n        </a-dropdown>\r\n        <a-button @click=\"handleCancel\" type=\"primary\" style=\"margin-right: 0.8rem\">关闭</a-button>\r\n        <a-button @click=\"handleSubmit\" type=\"primary\" >确认</a-button>\r\n      </div>\r\n    </template>\r\n  </j-modal>\r\n</template>\r\n\r\n<script>\r\n  import { queryDepartTreeList } from '@/api/api'\r\n  export default {\r\n    name: 'JSelectDepartModal',\r\n    props:['modalWidth','multi','rootOpened','departId', 'store', 'text','treeOpera'],\r\n    data(){\r\n      return {\r\n        visible:false,\r\n        confirmLoading:false,\r\n        treeData:[],\r\n        autoExpandParent:true,\r\n        expandedKeys:[],\r\n        dataList:[],\r\n        checkedKeys:[],\r\n        checkedRows:[],\r\n        searchValue:\"\",\r\n        checkStrictly: true,\r\n        fullscreen:false\r\n      }\r\n    },\r\n    created(){\r\n      this.loadDepart();\r\n    },\r\n    watch:{\r\n      departId(){\r\n        this.initDepartComponent()\r\n      },\r\n      visible: {\r\n        handler() {\r\n          this.initDepartComponent(true)\r\n        }\r\n      }\r\n    },\r\n    computed:{\r\n      treeScreenClass() {\r\n        return {\r\n          'my-dept-select-tree': true,\r\n          'fullscreen': this.fullscreen,\r\n        }\r\n      },\r\n      filterTreeData(){\r\n        if(!this.searchValue){\r\n          return this.treeData\r\n        }\r\n        let filter = []\r\n        this.dataList.forEach((item) => {\r\n          if (item.title.includes(this.searchValue)) {\r\n            filter.push(Object.assign({}, item, {children: null, isLeaf: true}))\r\n          }\r\n        })\r\n        return filter\r\n      },\r\n    },\r\n    methods:{\r\n      show(){\r\n        this.visible=true\r\n        this.checkedRows=[]\r\n        this.checkedKeys=[]\r\n      },\r\n      loadDepart(){\r\n        // 这个方法是找到所有的部门信息\r\n        queryDepartTreeList().then(res=>{\r\n          if(res.success){\r\n            let arr = [...res.result]\r\n            this.reWriterWithSlot(arr)\r\n            this.treeData = arr\r\n            this.initDepartComponent()\r\n            if(this.rootOpened){\r\n              this.initExpandedKeys(res.result)\r\n            }\r\n          }\r\n        })\r\n      },\r\n      initDepartComponent(flag){\r\n        let arr = []\r\n        //该方法两个地方用 1.visible改变事件重新设置选中项 2.组件编辑页面回显\r\n        let fieldName = flag==true?'key':this.text\r\n        if(this.departId){\r\n          let arr2 = this.departId.split(',')\r\n          for(let item of this.dataList){\r\n            if(arr2.indexOf(item[this.store])>=0){\r\n              arr.push(item[fieldName])\r\n            }\r\n          }\r\n        }\r\n        if(flag==true){\r\n          this.checkedKeys = [...arr]\r\n        }else{\r\n          this.$emit(\"initComp\", arr.join(','))\r\n        }\r\n      },\r\n      reWriterWithSlot(arr){\r\n        for(let item of arr){\r\n          if(item.children && item.children.length>0){\r\n            this.reWriterWithSlot(item.children)\r\n            let temp = Object.assign({},item)\r\n            temp.children = {}\r\n            this.dataList.push(temp)\r\n          }else{\r\n            this.dataList.push(item)\r\n            item.scopedSlots={ title: 'title' }\r\n          }\r\n        }\r\n      },\r\n      initExpandedKeys(arr){\r\n        if(arr && arr.length>0){\r\n          let keys = []\r\n          for(let item of arr){\r\n            if(item.children && item.children.length>0){\r\n              keys.push(item.id)\r\n            }\r\n          }\r\n          this.expandedKeys=[...keys]\r\n          //全部keys\r\n          //this.allTreeKeys = [...keys]\r\n        }else{\r\n          this.expandedKeys=[]\r\n          //this.allTreeKeys = []\r\n        }\r\n      },\r\n      onCheck (checkedKeys,info) {\r\n        if(!this.multi){\r\n          let arr = checkedKeys.checked.filter(item => this.checkedKeys.indexOf(item) < 0)\r\n          this.checkedKeys = [...arr]\r\n          this.checkedRows = (this.checkedKeys.length === 0) ? [] : [info.node.dataRef]\r\n        }else{\r\n          if(this.checkStrictly){\r\n            this.checkedKeys = checkedKeys.checked\r\n          }else{\r\n            this.checkedKeys = checkedKeys\r\n          }\r\n          this.checkedRows = this.getCheckedRows(this.checkedKeys)\r\n        }\r\n      },\r\n      onSelect(selectedKeys,info) {\r\n        //取消关联的情况下才走onSelect的逻辑\r\n        if(this.checkStrictly){\r\n          let keys = []\r\n          keys.push(selectedKeys[0])\r\n          if(!this.checkedKeys || this.checkedKeys.length===0 || !this.multi){\r\n            this.checkedKeys = [...keys]\r\n            this.checkedRows=[info.node.dataRef]\r\n          }else{\r\n            let currKey = info.node.dataRef.key\r\n            if(this.checkedKeys.indexOf(currKey)>=0){\r\n              this.checkedKeys = this.checkedKeys.filter(item=> item !==currKey)\r\n            }else{\r\n              this.checkedKeys.push(...keys)\r\n            }\r\n          }\r\n          this.checkedRows = this.getCheckedRows(this.checkedKeys)\r\n        }\r\n      },\r\n      onExpand (expandedKeys) {\r\n        this.expandedKeys = expandedKeys\r\n        this.autoExpandParent = false\r\n      },\r\n      handleSubmit(){\r\n        if(!this.checkedKeys || this.checkedKeys.length==0){\r\n          this.$emit(\"ok\",'')\r\n        }else{\r\n          let checkRow = this.getCheckedRows(this.checkedKeys)\r\n          let keyStr = this.checkedKeys.join(\",\")\r\n          this.$emit(\"ok\", checkRow, keyStr)\r\n        }\r\n        this.handleClear()\r\n      },\r\n      handleCancel(){\r\n        this.handleClear()\r\n      },\r\n      handleClear(){\r\n        this.visible=false\r\n        this.checkedKeys=[]\r\n      },\r\n      getParentKey(currKey,treeData){\r\n        let parentKey\r\n        for (let i = 0; i < treeData.length; i++) {\r\n          const node = treeData[i]\r\n          if (node.children) {\r\n            if (node.children.some(item => item.key === currKey)) {\r\n              parentKey = node.key\r\n            } else if (this.getParentKey(currKey, node.children)) {\r\n              parentKey = this.getParentKey(currKey, node.children)\r\n            }\r\n          }\r\n        }\r\n        return parentKey\r\n      },\r\n      // 根据 checkedKeys 获取 rows\r\n      getCheckedRows(checkedKeys) {\r\n        const forChildren = (list, key) => {\r\n          for (let item of list) {\r\n            if (item.id === key) {\r\n              return item\r\n            }\r\n            if (item.children instanceof Array) {\r\n              let value = forChildren(item.children, key)\r\n              if (value != null) {\r\n                return value\r\n              }\r\n            }\r\n          }\r\n          return null\r\n        }\r\n\r\n        let rows = []\r\n        for (let key of checkedKeys) {\r\n          let row = forChildren(this.treeData, key)\r\n          if (row != null) {\r\n            rows.push(row)\r\n          }\r\n        }\r\n        return rows\r\n      },\r\n      switchCheckStrictly (v) {\r\n        if(v==1){\r\n          this.checkStrictly = false\r\n        }else if(v==2){\r\n          this.checkStrictly = true\r\n        }\r\n      },\r\n      isFullscreen(val){\r\n        this.fullscreen=val\r\n      }\r\n    }\r\n  }\r\n\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n  // 限制部门选择树高度，避免部门太多时点击确定不便\r\n  .my-dept-select-tree{\r\n    height:350px;\r\n    \r\n    &.fullscreen{\r\n      height: calc(100vh - 250px);\r\n    }\r\n    overflow-y: scroll;\r\n  }\r\n  .drawer-bootom-button {\r\n    position: absolute;\r\n    bottom: 0;\r\n    width: 100%;\r\n    border-top: 1px solid #e8e8e8;\r\n    padding: 10px 16px;\r\n    text-align: right;\r\n    left: 0;\r\n    background: #fff;\r\n    border-radius: 0 0 2px 2px;\r\n  }\r\n</style>"]}]}